#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

class Grouping(object):
  Commercial = 1
  Internal = 2
  ResearchEducation = 3
  Education = 4
  Site = 5

class OIDType(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OIDType')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class OIDCorrelator(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OIDCorrelator')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class OID(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.oidtypeid = None
    self.oidcorrelatorid = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'oidtypeid' in d:
        self.oidtypeid = d['oidtypeid']
      if 'oidcorrelatorid' in d:
        self.oidcorrelatorid = d['oidcorrelatorid']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.oidtypeid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.oidcorrelatorid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OID')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.oidtypeid != None:
      oprot.writeFieldBegin('oidtypeid', TType.I32, 4)
      oprot.writeI32(self.oidtypeid)
      oprot.writeFieldEnd()
    if self.oidcorrelatorid != None:
      oprot.writeFieldBegin('oidcorrelatorid', TType.I32, 5)
      oprot.writeI32(self.oidcorrelatorid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Poller(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Poller')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class OIDSet(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.frequency = None
    self.oids = None
    self.pollerid = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'frequency' in d:
        self.frequency = d['frequency']
      if 'oids' in d:
        self.oids = d['oids']
      if 'pollerid' in d:
        self.pollerid = d['pollerid']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.frequency = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.oids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = OID()
            _elem5.read(iprot)
            self.oids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pollerid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OIDSet')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.frequency != None:
      oprot.writeFieldBegin('frequency', TType.I32, 3)
      oprot.writeI32(self.frequency)
      oprot.writeFieldEnd()
    if self.oids != None:
      oprot.writeFieldBegin('oids', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.oids))
      for iter6 in self.oids:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pollerid != None:
      oprot.writeFieldBegin('pollerid', TType.I32, 5)
      oprot.writeI32(self.pollerid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class DeviceTag(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('DeviceTag')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Device(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.begin_time = None
    self.end_time = None
    self.community = None
    self.oidsets = None
    self.tags = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']
      if 'community' in d:
        self.community = d['community']
      if 'oidsets' in d:
        self.oidsets = d['oidsets']
      if 'tags' in d:
        self.tags = d['tags']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.begin_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.community = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.oidsets = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = OIDSet()
            _elem12.read(iprot)
            self.oidsets.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.tags = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = DeviceTag()
            _elem18.read(iprot)
            self.tags.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Device')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.I32, 3)
      oprot.writeI32(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.community != None:
      oprot.writeFieldBegin('community', TType.STRING, 5)
      oprot.writeString(self.community)
      oprot.writeFieldEnd()
    if self.oidsets != None:
      oprot.writeFieldBegin('oidsets', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.oidsets))
      for iter19 in self.oidsets:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tags != None:
      oprot.writeFieldBegin('tags', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.tags))
      for iter20 in self.tags:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class IfRef(object):

  def __init__(self, d=None):
    self.id = None
    self.deviceid = None
    self.ifindex = None
    self.ifdescr = None
    self.ifalias = None
    self.ipaddr = None
    self.ifspeed = None
    self.ifhighspeed = None
    self.connection = None
    self.conntype = None
    self.usage = None
    self.visibility = None
    self.grouping = None
    self.begin_time = None
    self.end_time = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'deviceid' in d:
        self.deviceid = d['deviceid']
      if 'ifindex' in d:
        self.ifindex = d['ifindex']
      if 'ifdescr' in d:
        self.ifdescr = d['ifdescr']
      if 'ifalias' in d:
        self.ifalias = d['ifalias']
      if 'ipaddr' in d:
        self.ipaddr = d['ipaddr']
      if 'ifspeed' in d:
        self.ifspeed = d['ifspeed']
      if 'ifhighspeed' in d:
        self.ifhighspeed = d['ifhighspeed']
      if 'connection' in d:
        self.connection = d['connection']
      if 'conntype' in d:
        self.conntype = d['conntype']
      if 'usage' in d:
        self.usage = d['usage']
      if 'visibility' in d:
        self.visibility = d['visibility']
      if 'grouping' in d:
        self.grouping = d['grouping']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.deviceid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ifindex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ifdescr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ifalias = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ipaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.ifspeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.ifhighspeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.connection = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.conntype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.usage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.visibility = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.grouping = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.begin_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('IfRef')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.deviceid != None:
      oprot.writeFieldBegin('deviceid', TType.I32, 2)
      oprot.writeI32(self.deviceid)
      oprot.writeFieldEnd()
    if self.ifindex != None:
      oprot.writeFieldBegin('ifindex', TType.I32, 3)
      oprot.writeI32(self.ifindex)
      oprot.writeFieldEnd()
    if self.ifdescr != None:
      oprot.writeFieldBegin('ifdescr', TType.STRING, 4)
      oprot.writeString(self.ifdescr)
      oprot.writeFieldEnd()
    if self.ifalias != None:
      oprot.writeFieldBegin('ifalias', TType.STRING, 5)
      oprot.writeString(self.ifalias)
      oprot.writeFieldEnd()
    if self.ipaddr != None:
      oprot.writeFieldBegin('ipaddr', TType.STRING, 6)
      oprot.writeString(self.ipaddr)
      oprot.writeFieldEnd()
    if self.ifspeed != None:
      oprot.writeFieldBegin('ifspeed', TType.I32, 7)
      oprot.writeI32(self.ifspeed)
      oprot.writeFieldEnd()
    if self.ifhighspeed != None:
      oprot.writeFieldBegin('ifhighspeed', TType.I32, 8)
      oprot.writeI32(self.ifhighspeed)
      oprot.writeFieldEnd()
    if self.connection != None:
      oprot.writeFieldBegin('connection', TType.STRING, 9)
      oprot.writeString(self.connection)
      oprot.writeFieldEnd()
    if self.conntype != None:
      oprot.writeFieldBegin('conntype', TType.STRING, 10)
      oprot.writeString(self.conntype)
      oprot.writeFieldEnd()
    if self.usage != None:
      oprot.writeFieldBegin('usage', TType.STRING, 11)
      oprot.writeString(self.usage)
      oprot.writeFieldEnd()
    if self.visibility != None:
      oprot.writeFieldBegin('visibility', TType.STRING, 12)
      oprot.writeString(self.visibility)
      oprot.writeFieldEnd()
    if self.grouping != None:
      oprot.writeFieldBegin('grouping', TType.STRING, 13)
      oprot.writeString(self.grouping)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.I32, 14)
      oprot.writeI32(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.I32, 15)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Counter32(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 1
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Counter32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Counter64(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 2
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Counter64')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I64, 3)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Gauge32(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 3
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Gauge32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class VarList(object):

  def __init__(self, d=None):
    self.counter32 = None
    self.counter64 = None
    self.gauge32 = None
    if isinstance(d, dict):
      if 'counter32' in d:
        self.counter32 = d['counter32']
      if 'counter64' in d:
        self.counter64 = d['counter64']
      if 'gauge32' in d:
        self.gauge32 = d['gauge32']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.counter32 = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = Counter32()
            _elem26.read(iprot)
            self.counter32.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter64 = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = Counter64()
            _elem32.read(iprot)
            self.counter64.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gauge32 = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = Gauge32()
            _elem38.read(iprot)
            self.gauge32.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('VarList')
    if self.counter32 != None:
      oprot.writeFieldBegin('counter32', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.counter32))
      for iter39 in self.counter32:
        iter39.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.counter64 != None:
      oprot.writeFieldBegin('counter64', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.counter64))
      for iter40 in self.counter64:
        iter40.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gauge32 != None:
      oprot.writeFieldBegin('gauge32', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.gauge32))
      for iter41 in self.gauge32:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class SNMPPollResultPair(object):

  def __init__(self, d=None):
    self.OIDName = None
    self.value = None
    if isinstance(d, dict):
      if 'OIDName' in d:
        self.OIDName = d['OIDName']
      if 'value' in d:
        self.value = d['value']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.OIDName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('SNMPPollResultPair')
    if self.OIDName != None:
      oprot.writeFieldBegin('OIDName', TType.STRING, 1)
      oprot.writeString(self.OIDName)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class SNMPPollResult(object):

  def __init__(self, d=None):
    self.device_id = None
    self.oidset_id = None
    self.timestamp = None
    self.vars = None
    if isinstance(d, dict):
      if 'device_id' in d:
        self.device_id = d['device_id']
      if 'oidset_id' in d:
        self.oidset_id = d['oidset_id']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'vars' in d:
        self.vars = d['vars']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.device_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.oidset_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.vars = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = []
            (_etype51, _size48) = iprot.readListBegin()
            for _i52 in xrange(_size48):
              _elem53 = iprot.readString();
              _elem47.append(_elem53)
            iprot.readListEnd()
            self.vars.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('SNMPPollResult')
    if self.device_id != None:
      oprot.writeFieldBegin('device_id', TType.I32, 1)
      oprot.writeI32(self.device_id)
      oprot.writeFieldEnd()
    if self.oidset_id != None:
      oprot.writeFieldBegin('oidset_id', TType.I32, 2)
      oprot.writeI32(self.oidset_id)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.vars != None:
      oprot.writeFieldBegin('vars', TType.LIST, 3)
      oprot.writeListBegin(TType.LIST, len(self.vars))
      for iter54 in self.vars:
        oprot.writeListBegin(TType.STRING, len(iter54))
        for iter55 in iter54:
          oprot.writeString(iter55)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

