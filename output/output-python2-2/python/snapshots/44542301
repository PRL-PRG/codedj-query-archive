# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import _uinput
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class input_event(object):
    """Proxy of C input_event struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    time = _swig_property(_uinput.input_event_time_get, _uinput.input_event_time_set)
    type = _swig_property(_uinput.input_event_type_get, _uinput.input_event_type_set)
    code = _swig_property(_uinput.input_event_code_get, _uinput.input_event_code_set)
    value = _swig_property(_uinput.input_event_value_get, _uinput.input_event_value_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.input_event_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct input_event"""
        return _uinput.input_event_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.input_event_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> input_event"""
        this = _uinput.new_input_event(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_input_event
    __del__ = lambda self : None;
input_event_swigregister = _uinput.input_event_swigregister
input_event_swigregister(input_event)

def input_event_unpack(*args, **kwargs):
  """input_event_unpack(PyObject data) -> struct input_event"""
  return _uinput.input_event_unpack(*args, **kwargs)

def input_event_size(*args):
  """input_event_size() -> size_t"""
  return _uinput.input_event_size(*args)

EV_VERSION = _uinput.EV_VERSION
class input_id(object):
    """Proxy of C input_id struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bustype = _swig_property(_uinput.input_id_bustype_get, _uinput.input_id_bustype_set)
    vendor = _swig_property(_uinput.input_id_vendor_get, _uinput.input_id_vendor_set)
    product = _swig_property(_uinput.input_id_product_get, _uinput.input_id_product_set)
    version = _swig_property(_uinput.input_id_version_get, _uinput.input_id_version_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.input_id_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct input_id"""
        return _uinput.input_id_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.input_id_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> input_id"""
        this = _uinput.new_input_id(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_input_id
    __del__ = lambda self : None;
input_id_swigregister = _uinput.input_id_swigregister
input_id_swigregister(input_id)

def input_id_unpack(*args, **kwargs):
  """input_id_unpack(PyObject data) -> struct input_id"""
  return _uinput.input_id_unpack(*args, **kwargs)

def input_id_size(*args):
  """input_id_size() -> size_t"""
  return _uinput.input_id_size(*args)

class input_absinfo(object):
    """Proxy of C input_absinfo struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_uinput.input_absinfo_value_get, _uinput.input_absinfo_value_set)
    minimum = _swig_property(_uinput.input_absinfo_minimum_get, _uinput.input_absinfo_minimum_set)
    maximum = _swig_property(_uinput.input_absinfo_maximum_get, _uinput.input_absinfo_maximum_set)
    fuzz = _swig_property(_uinput.input_absinfo_fuzz_get, _uinput.input_absinfo_fuzz_set)
    flat = _swig_property(_uinput.input_absinfo_flat_get, _uinput.input_absinfo_flat_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.input_absinfo_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct input_absinfo"""
        return _uinput.input_absinfo_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.input_absinfo_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> input_absinfo"""
        this = _uinput.new_input_absinfo(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_input_absinfo
    __del__ = lambda self : None;
input_absinfo_swigregister = _uinput.input_absinfo_swigregister
input_absinfo_swigregister(input_absinfo)

def input_absinfo_unpack(*args, **kwargs):
  """input_absinfo_unpack(PyObject data) -> struct input_absinfo"""
  return _uinput.input_absinfo_unpack(*args, **kwargs)

def input_absinfo_size(*args):
  """input_absinfo_size() -> size_t"""
  return _uinput.input_absinfo_size(*args)

EV_SYN = _uinput.EV_SYN
EV_KEY = _uinput.EV_KEY
EV_REL = _uinput.EV_REL
EV_ABS = _uinput.EV_ABS
EV_MSC = _uinput.EV_MSC
EV_SW = _uinput.EV_SW
EV_LED = _uinput.EV_LED
EV_SND = _uinput.EV_SND
EV_REP = _uinput.EV_REP
EV_FF = _uinput.EV_FF
EV_PWR = _uinput.EV_PWR
EV_FF_STATUS = _uinput.EV_FF_STATUS
EV_MAX = _uinput.EV_MAX
EV_CNT = _uinput.EV_CNT
SYN_REPORT = _uinput.SYN_REPORT
SYN_CONFIG = _uinput.SYN_CONFIG
KEY_RESERVED = _uinput.KEY_RESERVED
KEY_ESC = _uinput.KEY_ESC
KEY_1 = _uinput.KEY_1
KEY_2 = _uinput.KEY_2
KEY_3 = _uinput.KEY_3
KEY_4 = _uinput.KEY_4
KEY_5 = _uinput.KEY_5
KEY_6 = _uinput.KEY_6
KEY_7 = _uinput.KEY_7
KEY_8 = _uinput.KEY_8
KEY_9 = _uinput.KEY_9
KEY_0 = _uinput.KEY_0
KEY_MINUS = _uinput.KEY_MINUS
KEY_EQUAL = _uinput.KEY_EQUAL
KEY_BACKSPACE = _uinput.KEY_BACKSPACE
KEY_TAB = _uinput.KEY_TAB
KEY_Q = _uinput.KEY_Q
KEY_W = _uinput.KEY_W
KEY_E = _uinput.KEY_E
KEY_R = _uinput.KEY_R
KEY_T = _uinput.KEY_T
KEY_Y = _uinput.KEY_Y
KEY_U = _uinput.KEY_U
KEY_I = _uinput.KEY_I
KEY_O = _uinput.KEY_O
KEY_P = _uinput.KEY_P
KEY_LEFTBRACE = _uinput.KEY_LEFTBRACE
KEY_RIGHTBRACE = _uinput.KEY_RIGHTBRACE
KEY_ENTER = _uinput.KEY_ENTER
KEY_LEFTCTRL = _uinput.KEY_LEFTCTRL
KEY_A = _uinput.KEY_A
KEY_S = _uinput.KEY_S
KEY_D = _uinput.KEY_D
KEY_F = _uinput.KEY_F
KEY_G = _uinput.KEY_G
KEY_H = _uinput.KEY_H
KEY_J = _uinput.KEY_J
KEY_K = _uinput.KEY_K
KEY_L = _uinput.KEY_L
KEY_SEMICOLON = _uinput.KEY_SEMICOLON
KEY_APOSTROPHE = _uinput.KEY_APOSTROPHE
KEY_GRAVE = _uinput.KEY_GRAVE
KEY_LEFTSHIFT = _uinput.KEY_LEFTSHIFT
KEY_BACKSLASH = _uinput.KEY_BACKSLASH
KEY_Z = _uinput.KEY_Z
KEY_X = _uinput.KEY_X
KEY_C = _uinput.KEY_C
KEY_V = _uinput.KEY_V
KEY_B = _uinput.KEY_B
KEY_N = _uinput.KEY_N
KEY_M = _uinput.KEY_M
KEY_COMMA = _uinput.KEY_COMMA
KEY_DOT = _uinput.KEY_DOT
KEY_SLASH = _uinput.KEY_SLASH
KEY_RIGHTSHIFT = _uinput.KEY_RIGHTSHIFT
KEY_KPASTERISK = _uinput.KEY_KPASTERISK
KEY_LEFTALT = _uinput.KEY_LEFTALT
KEY_SPACE = _uinput.KEY_SPACE
KEY_CAPSLOCK = _uinput.KEY_CAPSLOCK
KEY_F1 = _uinput.KEY_F1
KEY_F2 = _uinput.KEY_F2
KEY_F3 = _uinput.KEY_F3
KEY_F4 = _uinput.KEY_F4
KEY_F5 = _uinput.KEY_F5
KEY_F6 = _uinput.KEY_F6
KEY_F7 = _uinput.KEY_F7
KEY_F8 = _uinput.KEY_F8
KEY_F9 = _uinput.KEY_F9
KEY_F10 = _uinput.KEY_F10
KEY_NUMLOCK = _uinput.KEY_NUMLOCK
KEY_SCROLLLOCK = _uinput.KEY_SCROLLLOCK
KEY_KP7 = _uinput.KEY_KP7
KEY_KP8 = _uinput.KEY_KP8
KEY_KP9 = _uinput.KEY_KP9
KEY_KPMINUS = _uinput.KEY_KPMINUS
KEY_KP4 = _uinput.KEY_KP4
KEY_KP5 = _uinput.KEY_KP5
KEY_KP6 = _uinput.KEY_KP6
KEY_KPPLUS = _uinput.KEY_KPPLUS
KEY_KP1 = _uinput.KEY_KP1
KEY_KP2 = _uinput.KEY_KP2
KEY_KP3 = _uinput.KEY_KP3
KEY_KP0 = _uinput.KEY_KP0
KEY_KPDOT = _uinput.KEY_KPDOT
KEY_ZENKAKUHANKAKU = _uinput.KEY_ZENKAKUHANKAKU
KEY_102ND = _uinput.KEY_102ND
KEY_F11 = _uinput.KEY_F11
KEY_F12 = _uinput.KEY_F12
KEY_RO = _uinput.KEY_RO
KEY_KATAKANA = _uinput.KEY_KATAKANA
KEY_HIRAGANA = _uinput.KEY_HIRAGANA
KEY_HENKAN = _uinput.KEY_HENKAN
KEY_KATAKANAHIRAGANA = _uinput.KEY_KATAKANAHIRAGANA
KEY_MUHENKAN = _uinput.KEY_MUHENKAN
KEY_KPJPCOMMA = _uinput.KEY_KPJPCOMMA
KEY_KPENTER = _uinput.KEY_KPENTER
KEY_RIGHTCTRL = _uinput.KEY_RIGHTCTRL
KEY_KPSLASH = _uinput.KEY_KPSLASH
KEY_SYSRQ = _uinput.KEY_SYSRQ
KEY_RIGHTALT = _uinput.KEY_RIGHTALT
KEY_LINEFEED = _uinput.KEY_LINEFEED
KEY_HOME = _uinput.KEY_HOME
KEY_UP = _uinput.KEY_UP
KEY_PAGEUP = _uinput.KEY_PAGEUP
KEY_LEFT = _uinput.KEY_LEFT
KEY_RIGHT = _uinput.KEY_RIGHT
KEY_END = _uinput.KEY_END
KEY_DOWN = _uinput.KEY_DOWN
KEY_PAGEDOWN = _uinput.KEY_PAGEDOWN
KEY_INSERT = _uinput.KEY_INSERT
KEY_DELETE = _uinput.KEY_DELETE
KEY_MACRO = _uinput.KEY_MACRO
KEY_MUTE = _uinput.KEY_MUTE
KEY_VOLUMEDOWN = _uinput.KEY_VOLUMEDOWN
KEY_VOLUMEUP = _uinput.KEY_VOLUMEUP
KEY_POWER = _uinput.KEY_POWER
KEY_KPEQUAL = _uinput.KEY_KPEQUAL
KEY_KPPLUSMINUS = _uinput.KEY_KPPLUSMINUS
KEY_PAUSE = _uinput.KEY_PAUSE
KEY_KPCOMMA = _uinput.KEY_KPCOMMA
KEY_HANGEUL = _uinput.KEY_HANGEUL
KEY_HANGUEL = _uinput.KEY_HANGUEL
KEY_HANJA = _uinput.KEY_HANJA
KEY_YEN = _uinput.KEY_YEN
KEY_LEFTMETA = _uinput.KEY_LEFTMETA
KEY_RIGHTMETA = _uinput.KEY_RIGHTMETA
KEY_COMPOSE = _uinput.KEY_COMPOSE
KEY_STOP = _uinput.KEY_STOP
KEY_AGAIN = _uinput.KEY_AGAIN
KEY_PROPS = _uinput.KEY_PROPS
KEY_UNDO = _uinput.KEY_UNDO
KEY_FRONT = _uinput.KEY_FRONT
KEY_COPY = _uinput.KEY_COPY
KEY_OPEN = _uinput.KEY_OPEN
KEY_PASTE = _uinput.KEY_PASTE
KEY_FIND = _uinput.KEY_FIND
KEY_CUT = _uinput.KEY_CUT
KEY_HELP = _uinput.KEY_HELP
KEY_MENU = _uinput.KEY_MENU
KEY_CALC = _uinput.KEY_CALC
KEY_SETUP = _uinput.KEY_SETUP
KEY_SLEEP = _uinput.KEY_SLEEP
KEY_WAKEUP = _uinput.KEY_WAKEUP
KEY_FILE = _uinput.KEY_FILE
KEY_SENDFILE = _uinput.KEY_SENDFILE
KEY_DELETEFILE = _uinput.KEY_DELETEFILE
KEY_XFER = _uinput.KEY_XFER
KEY_PROG1 = _uinput.KEY_PROG1
KEY_PROG2 = _uinput.KEY_PROG2
KEY_WWW = _uinput.KEY_WWW
KEY_MSDOS = _uinput.KEY_MSDOS
KEY_COFFEE = _uinput.KEY_COFFEE
KEY_SCREENLOCK = _uinput.KEY_SCREENLOCK
KEY_DIRECTION = _uinput.KEY_DIRECTION
KEY_CYCLEWINDOWS = _uinput.KEY_CYCLEWINDOWS
KEY_MAIL = _uinput.KEY_MAIL
KEY_BOOKMARKS = _uinput.KEY_BOOKMARKS
KEY_COMPUTER = _uinput.KEY_COMPUTER
KEY_BACK = _uinput.KEY_BACK
KEY_FORWARD = _uinput.KEY_FORWARD
KEY_CLOSECD = _uinput.KEY_CLOSECD
KEY_EJECTCD = _uinput.KEY_EJECTCD
KEY_EJECTCLOSECD = _uinput.KEY_EJECTCLOSECD
KEY_NEXTSONG = _uinput.KEY_NEXTSONG
KEY_PLAYPAUSE = _uinput.KEY_PLAYPAUSE
KEY_PREVIOUSSONG = _uinput.KEY_PREVIOUSSONG
KEY_STOPCD = _uinput.KEY_STOPCD
KEY_RECORD = _uinput.KEY_RECORD
KEY_REWIND = _uinput.KEY_REWIND
KEY_PHONE = _uinput.KEY_PHONE
KEY_ISO = _uinput.KEY_ISO
KEY_CONFIG = _uinput.KEY_CONFIG
KEY_HOMEPAGE = _uinput.KEY_HOMEPAGE
KEY_REFRESH = _uinput.KEY_REFRESH
KEY_EXIT = _uinput.KEY_EXIT
KEY_MOVE = _uinput.KEY_MOVE
KEY_EDIT = _uinput.KEY_EDIT
KEY_SCROLLUP = _uinput.KEY_SCROLLUP
KEY_SCROLLDOWN = _uinput.KEY_SCROLLDOWN
KEY_KPLEFTPAREN = _uinput.KEY_KPLEFTPAREN
KEY_KPRIGHTPAREN = _uinput.KEY_KPRIGHTPAREN
KEY_NEW = _uinput.KEY_NEW
KEY_REDO = _uinput.KEY_REDO
KEY_F13 = _uinput.KEY_F13
KEY_F14 = _uinput.KEY_F14
KEY_F15 = _uinput.KEY_F15
KEY_F16 = _uinput.KEY_F16
KEY_F17 = _uinput.KEY_F17
KEY_F18 = _uinput.KEY_F18
KEY_F19 = _uinput.KEY_F19
KEY_F20 = _uinput.KEY_F20
KEY_F21 = _uinput.KEY_F21
KEY_F22 = _uinput.KEY_F22
KEY_F23 = _uinput.KEY_F23
KEY_F24 = _uinput.KEY_F24
KEY_PLAYCD = _uinput.KEY_PLAYCD
KEY_PAUSECD = _uinput.KEY_PAUSECD
KEY_PROG3 = _uinput.KEY_PROG3
KEY_PROG4 = _uinput.KEY_PROG4
KEY_SUSPEND = _uinput.KEY_SUSPEND
KEY_CLOSE = _uinput.KEY_CLOSE
KEY_PLAY = _uinput.KEY_PLAY
KEY_FASTFORWARD = _uinput.KEY_FASTFORWARD
KEY_BASSBOOST = _uinput.KEY_BASSBOOST
KEY_PRINT = _uinput.KEY_PRINT
KEY_HP = _uinput.KEY_HP
KEY_CAMERA = _uinput.KEY_CAMERA
KEY_SOUND = _uinput.KEY_SOUND
KEY_QUESTION = _uinput.KEY_QUESTION
KEY_EMAIL = _uinput.KEY_EMAIL
KEY_CHAT = _uinput.KEY_CHAT
KEY_SEARCH = _uinput.KEY_SEARCH
KEY_CONNECT = _uinput.KEY_CONNECT
KEY_FINANCE = _uinput.KEY_FINANCE
KEY_SPORT = _uinput.KEY_SPORT
KEY_SHOP = _uinput.KEY_SHOP
KEY_ALTERASE = _uinput.KEY_ALTERASE
KEY_CANCEL = _uinput.KEY_CANCEL
KEY_BRIGHTNESSDOWN = _uinput.KEY_BRIGHTNESSDOWN
KEY_BRIGHTNESSUP = _uinput.KEY_BRIGHTNESSUP
KEY_MEDIA = _uinput.KEY_MEDIA
KEY_SWITCHVIDEOMODE = _uinput.KEY_SWITCHVIDEOMODE
KEY_KBDILLUMTOGGLE = _uinput.KEY_KBDILLUMTOGGLE
KEY_KBDILLUMDOWN = _uinput.KEY_KBDILLUMDOWN
KEY_KBDILLUMUP = _uinput.KEY_KBDILLUMUP
KEY_SEND = _uinput.KEY_SEND
KEY_REPLY = _uinput.KEY_REPLY
KEY_FORWARDMAIL = _uinput.KEY_FORWARDMAIL
KEY_SAVE = _uinput.KEY_SAVE
KEY_DOCUMENTS = _uinput.KEY_DOCUMENTS
KEY_BATTERY = _uinput.KEY_BATTERY
KEY_BLUETOOTH = _uinput.KEY_BLUETOOTH
KEY_WLAN = _uinput.KEY_WLAN
KEY_UWB = _uinput.KEY_UWB
KEY_UNKNOWN = _uinput.KEY_UNKNOWN
KEY_VIDEO_NEXT = _uinput.KEY_VIDEO_NEXT
KEY_VIDEO_PREV = _uinput.KEY_VIDEO_PREV
KEY_BRIGHTNESS_CYCLE = _uinput.KEY_BRIGHTNESS_CYCLE
KEY_BRIGHTNESS_ZERO = _uinput.KEY_BRIGHTNESS_ZERO
KEY_DISPLAY_OFF = _uinput.KEY_DISPLAY_OFF
BTN_MISC = _uinput.BTN_MISC
BTN_0 = _uinput.BTN_0
BTN_1 = _uinput.BTN_1
BTN_2 = _uinput.BTN_2
BTN_3 = _uinput.BTN_3
BTN_4 = _uinput.BTN_4
BTN_5 = _uinput.BTN_5
BTN_6 = _uinput.BTN_6
BTN_7 = _uinput.BTN_7
BTN_8 = _uinput.BTN_8
BTN_9 = _uinput.BTN_9
BTN_MOUSE = _uinput.BTN_MOUSE
BTN_LEFT = _uinput.BTN_LEFT
BTN_RIGHT = _uinput.BTN_RIGHT
BTN_MIDDLE = _uinput.BTN_MIDDLE
BTN_SIDE = _uinput.BTN_SIDE
BTN_EXTRA = _uinput.BTN_EXTRA
BTN_FORWARD = _uinput.BTN_FORWARD
BTN_BACK = _uinput.BTN_BACK
BTN_TASK = _uinput.BTN_TASK
BTN_JOYSTICK = _uinput.BTN_JOYSTICK
BTN_TRIGGER = _uinput.BTN_TRIGGER
BTN_THUMB = _uinput.BTN_THUMB
BTN_THUMB2 = _uinput.BTN_THUMB2
BTN_TOP = _uinput.BTN_TOP
BTN_TOP2 = _uinput.BTN_TOP2
BTN_PINKIE = _uinput.BTN_PINKIE
BTN_BASE = _uinput.BTN_BASE
BTN_BASE2 = _uinput.BTN_BASE2
BTN_BASE3 = _uinput.BTN_BASE3
BTN_BASE4 = _uinput.BTN_BASE4
BTN_BASE5 = _uinput.BTN_BASE5
BTN_BASE6 = _uinput.BTN_BASE6
BTN_DEAD = _uinput.BTN_DEAD
BTN_GAMEPAD = _uinput.BTN_GAMEPAD
BTN_A = _uinput.BTN_A
BTN_B = _uinput.BTN_B
BTN_C = _uinput.BTN_C
BTN_X = _uinput.BTN_X
BTN_Y = _uinput.BTN_Y
BTN_Z = _uinput.BTN_Z
BTN_TL = _uinput.BTN_TL
BTN_TR = _uinput.BTN_TR
BTN_TL2 = _uinput.BTN_TL2
BTN_TR2 = _uinput.BTN_TR2
BTN_SELECT = _uinput.BTN_SELECT
BTN_START = _uinput.BTN_START
BTN_MODE = _uinput.BTN_MODE
BTN_THUMBL = _uinput.BTN_THUMBL
BTN_THUMBR = _uinput.BTN_THUMBR
BTN_DIGI = _uinput.BTN_DIGI
BTN_TOOL_PEN = _uinput.BTN_TOOL_PEN
BTN_TOOL_RUBBER = _uinput.BTN_TOOL_RUBBER
BTN_TOOL_BRUSH = _uinput.BTN_TOOL_BRUSH
BTN_TOOL_PENCIL = _uinput.BTN_TOOL_PENCIL
BTN_TOOL_AIRBRUSH = _uinput.BTN_TOOL_AIRBRUSH
BTN_TOOL_FINGER = _uinput.BTN_TOOL_FINGER
BTN_TOOL_MOUSE = _uinput.BTN_TOOL_MOUSE
BTN_TOOL_LENS = _uinput.BTN_TOOL_LENS
BTN_TOUCH = _uinput.BTN_TOUCH
BTN_STYLUS = _uinput.BTN_STYLUS
BTN_STYLUS2 = _uinput.BTN_STYLUS2
BTN_TOOL_DOUBLETAP = _uinput.BTN_TOOL_DOUBLETAP
BTN_TOOL_TRIPLETAP = _uinput.BTN_TOOL_TRIPLETAP
BTN_WHEEL = _uinput.BTN_WHEEL
BTN_GEAR_DOWN = _uinput.BTN_GEAR_DOWN
BTN_GEAR_UP = _uinput.BTN_GEAR_UP
KEY_OK = _uinput.KEY_OK
KEY_SELECT = _uinput.KEY_SELECT
KEY_GOTO = _uinput.KEY_GOTO
KEY_CLEAR = _uinput.KEY_CLEAR
KEY_POWER2 = _uinput.KEY_POWER2
KEY_OPTION = _uinput.KEY_OPTION
KEY_INFO = _uinput.KEY_INFO
KEY_TIME = _uinput.KEY_TIME
KEY_VENDOR = _uinput.KEY_VENDOR
KEY_ARCHIVE = _uinput.KEY_ARCHIVE
KEY_PROGRAM = _uinput.KEY_PROGRAM
KEY_CHANNEL = _uinput.KEY_CHANNEL
KEY_FAVORITES = _uinput.KEY_FAVORITES
KEY_EPG = _uinput.KEY_EPG
KEY_PVR = _uinput.KEY_PVR
KEY_MHP = _uinput.KEY_MHP
KEY_LANGUAGE = _uinput.KEY_LANGUAGE
KEY_TITLE = _uinput.KEY_TITLE
KEY_SUBTITLE = _uinput.KEY_SUBTITLE
KEY_ANGLE = _uinput.KEY_ANGLE
KEY_ZOOM = _uinput.KEY_ZOOM
KEY_MODE = _uinput.KEY_MODE
KEY_KEYBOARD = _uinput.KEY_KEYBOARD
KEY_SCREEN = _uinput.KEY_SCREEN
KEY_PC = _uinput.KEY_PC
KEY_TV = _uinput.KEY_TV
KEY_TV2 = _uinput.KEY_TV2
KEY_VCR = _uinput.KEY_VCR
KEY_VCR2 = _uinput.KEY_VCR2
KEY_SAT = _uinput.KEY_SAT
KEY_SAT2 = _uinput.KEY_SAT2
KEY_CD = _uinput.KEY_CD
KEY_TAPE = _uinput.KEY_TAPE
KEY_RADIO = _uinput.KEY_RADIO
KEY_TUNER = _uinput.KEY_TUNER
KEY_PLAYER = _uinput.KEY_PLAYER
KEY_TEXT = _uinput.KEY_TEXT
KEY_DVD = _uinput.KEY_DVD
KEY_AUX = _uinput.KEY_AUX
KEY_MP3 = _uinput.KEY_MP3
KEY_AUDIO = _uinput.KEY_AUDIO
KEY_VIDEO = _uinput.KEY_VIDEO
KEY_DIRECTORY = _uinput.KEY_DIRECTORY
KEY_LIST = _uinput.KEY_LIST
KEY_MEMO = _uinput.KEY_MEMO
KEY_CALENDAR = _uinput.KEY_CALENDAR
KEY_RED = _uinput.KEY_RED
KEY_GREEN = _uinput.KEY_GREEN
KEY_YELLOW = _uinput.KEY_YELLOW
KEY_BLUE = _uinput.KEY_BLUE
KEY_CHANNELUP = _uinput.KEY_CHANNELUP
KEY_CHANNELDOWN = _uinput.KEY_CHANNELDOWN
KEY_FIRST = _uinput.KEY_FIRST
KEY_LAST = _uinput.KEY_LAST
KEY_AB = _uinput.KEY_AB
KEY_NEXT = _uinput.KEY_NEXT
KEY_RESTART = _uinput.KEY_RESTART
KEY_SLOW = _uinput.KEY_SLOW
KEY_SHUFFLE = _uinput.KEY_SHUFFLE
KEY_BREAK = _uinput.KEY_BREAK
KEY_PREVIOUS = _uinput.KEY_PREVIOUS
KEY_DIGITS = _uinput.KEY_DIGITS
KEY_TEEN = _uinput.KEY_TEEN
KEY_TWEN = _uinput.KEY_TWEN
KEY_VIDEOPHONE = _uinput.KEY_VIDEOPHONE
KEY_GAMES = _uinput.KEY_GAMES
KEY_ZOOMIN = _uinput.KEY_ZOOMIN
KEY_ZOOMOUT = _uinput.KEY_ZOOMOUT
KEY_ZOOMRESET = _uinput.KEY_ZOOMRESET
KEY_WORDPROCESSOR = _uinput.KEY_WORDPROCESSOR
KEY_EDITOR = _uinput.KEY_EDITOR
KEY_SPREADSHEET = _uinput.KEY_SPREADSHEET
KEY_GRAPHICSEDITOR = _uinput.KEY_GRAPHICSEDITOR
KEY_PRESENTATION = _uinput.KEY_PRESENTATION
KEY_DATABASE = _uinput.KEY_DATABASE
KEY_NEWS = _uinput.KEY_NEWS
KEY_VOICEMAIL = _uinput.KEY_VOICEMAIL
KEY_ADDRESSBOOK = _uinput.KEY_ADDRESSBOOK
KEY_MESSENGER = _uinput.KEY_MESSENGER
KEY_DISPLAYTOGGLE = _uinput.KEY_DISPLAYTOGGLE
KEY_SPELLCHECK = _uinput.KEY_SPELLCHECK
KEY_LOGOFF = _uinput.KEY_LOGOFF
KEY_DOLLAR = _uinput.KEY_DOLLAR
KEY_EURO = _uinput.KEY_EURO
KEY_FRAMEBACK = _uinput.KEY_FRAMEBACK
KEY_FRAMEFORWARD = _uinput.KEY_FRAMEFORWARD
KEY_CONTEXT_MENU = _uinput.KEY_CONTEXT_MENU
KEY_DEL_EOL = _uinput.KEY_DEL_EOL
KEY_DEL_EOS = _uinput.KEY_DEL_EOS
KEY_INS_LINE = _uinput.KEY_INS_LINE
KEY_DEL_LINE = _uinput.KEY_DEL_LINE
KEY_FN = _uinput.KEY_FN
KEY_FN_ESC = _uinput.KEY_FN_ESC
KEY_FN_F1 = _uinput.KEY_FN_F1
KEY_FN_F2 = _uinput.KEY_FN_F2
KEY_FN_F3 = _uinput.KEY_FN_F3
KEY_FN_F4 = _uinput.KEY_FN_F4
KEY_FN_F5 = _uinput.KEY_FN_F5
KEY_FN_F6 = _uinput.KEY_FN_F6
KEY_FN_F7 = _uinput.KEY_FN_F7
KEY_FN_F8 = _uinput.KEY_FN_F8
KEY_FN_F9 = _uinput.KEY_FN_F9
KEY_FN_F10 = _uinput.KEY_FN_F10
KEY_FN_F11 = _uinput.KEY_FN_F11
KEY_FN_F12 = _uinput.KEY_FN_F12
KEY_FN_1 = _uinput.KEY_FN_1
KEY_FN_2 = _uinput.KEY_FN_2
KEY_FN_D = _uinput.KEY_FN_D
KEY_FN_E = _uinput.KEY_FN_E
KEY_FN_F = _uinput.KEY_FN_F
KEY_FN_S = _uinput.KEY_FN_S
KEY_FN_B = _uinput.KEY_FN_B
KEY_BRL_DOT1 = _uinput.KEY_BRL_DOT1
KEY_BRL_DOT2 = _uinput.KEY_BRL_DOT2
KEY_BRL_DOT3 = _uinput.KEY_BRL_DOT3
KEY_BRL_DOT4 = _uinput.KEY_BRL_DOT4
KEY_BRL_DOT5 = _uinput.KEY_BRL_DOT5
KEY_BRL_DOT6 = _uinput.KEY_BRL_DOT6
KEY_BRL_DOT7 = _uinput.KEY_BRL_DOT7
KEY_BRL_DOT8 = _uinput.KEY_BRL_DOT8
KEY_BRL_DOT9 = _uinput.KEY_BRL_DOT9
KEY_BRL_DOT10 = _uinput.KEY_BRL_DOT10
KEY_MIN_INTERESTING = _uinput.KEY_MIN_INTERESTING
KEY_MAX = _uinput.KEY_MAX
KEY_CNT = _uinput.KEY_CNT
REL_X = _uinput.REL_X
REL_Y = _uinput.REL_Y
REL_Z = _uinput.REL_Z
REL_RX = _uinput.REL_RX
REL_RY = _uinput.REL_RY
REL_RZ = _uinput.REL_RZ
REL_HWHEEL = _uinput.REL_HWHEEL
REL_DIAL = _uinput.REL_DIAL
REL_WHEEL = _uinput.REL_WHEEL
REL_MISC = _uinput.REL_MISC
REL_MAX = _uinput.REL_MAX
REL_CNT = _uinput.REL_CNT
ABS_X = _uinput.ABS_X
ABS_Y = _uinput.ABS_Y
ABS_Z = _uinput.ABS_Z
ABS_RX = _uinput.ABS_RX
ABS_RY = _uinput.ABS_RY
ABS_RZ = _uinput.ABS_RZ
ABS_THROTTLE = _uinput.ABS_THROTTLE
ABS_RUDDER = _uinput.ABS_RUDDER
ABS_WHEEL = _uinput.ABS_WHEEL
ABS_GAS = _uinput.ABS_GAS
ABS_BRAKE = _uinput.ABS_BRAKE
ABS_HAT0X = _uinput.ABS_HAT0X
ABS_HAT0Y = _uinput.ABS_HAT0Y
ABS_HAT1X = _uinput.ABS_HAT1X
ABS_HAT1Y = _uinput.ABS_HAT1Y
ABS_HAT2X = _uinput.ABS_HAT2X
ABS_HAT2Y = _uinput.ABS_HAT2Y
ABS_HAT3X = _uinput.ABS_HAT3X
ABS_HAT3Y = _uinput.ABS_HAT3Y
ABS_PRESSURE = _uinput.ABS_PRESSURE
ABS_DISTANCE = _uinput.ABS_DISTANCE
ABS_TILT_X = _uinput.ABS_TILT_X
ABS_TILT_Y = _uinput.ABS_TILT_Y
ABS_TOOL_WIDTH = _uinput.ABS_TOOL_WIDTH
ABS_VOLUME = _uinput.ABS_VOLUME
ABS_MISC = _uinput.ABS_MISC
ABS_MAX = _uinput.ABS_MAX
ABS_CNT = _uinput.ABS_CNT
SW_LID = _uinput.SW_LID
SW_TABLET_MODE = _uinput.SW_TABLET_MODE
SW_HEADPHONE_INSERT = _uinput.SW_HEADPHONE_INSERT
SW_RADIO = _uinput.SW_RADIO
SW_MAX = _uinput.SW_MAX
SW_CNT = _uinput.SW_CNT
MSC_SERIAL = _uinput.MSC_SERIAL
MSC_PULSELED = _uinput.MSC_PULSELED
MSC_GESTURE = _uinput.MSC_GESTURE
MSC_RAW = _uinput.MSC_RAW
MSC_SCAN = _uinput.MSC_SCAN
MSC_MAX = _uinput.MSC_MAX
MSC_CNT = _uinput.MSC_CNT
LED_NUML = _uinput.LED_NUML
LED_CAPSL = _uinput.LED_CAPSL
LED_SCROLLL = _uinput.LED_SCROLLL
LED_COMPOSE = _uinput.LED_COMPOSE
LED_KANA = _uinput.LED_KANA
LED_SLEEP = _uinput.LED_SLEEP
LED_SUSPEND = _uinput.LED_SUSPEND
LED_MUTE = _uinput.LED_MUTE
LED_MISC = _uinput.LED_MISC
LED_MAIL = _uinput.LED_MAIL
LED_CHARGING = _uinput.LED_CHARGING
LED_MAX = _uinput.LED_MAX
LED_CNT = _uinput.LED_CNT
REP_DELAY = _uinput.REP_DELAY
REP_PERIOD = _uinput.REP_PERIOD
REP_MAX = _uinput.REP_MAX
SND_CLICK = _uinput.SND_CLICK
SND_BELL = _uinput.SND_BELL
SND_TONE = _uinput.SND_TONE
SND_MAX = _uinput.SND_MAX
SND_CNT = _uinput.SND_CNT
ID_BUS = _uinput.ID_BUS
ID_VENDOR = _uinput.ID_VENDOR
ID_PRODUCT = _uinput.ID_PRODUCT
ID_VERSION = _uinput.ID_VERSION
BUS_PCI = _uinput.BUS_PCI
BUS_ISAPNP = _uinput.BUS_ISAPNP
BUS_USB = _uinput.BUS_USB
BUS_HIL = _uinput.BUS_HIL
BUS_BLUETOOTH = _uinput.BUS_BLUETOOTH
BUS_VIRTUAL = _uinput.BUS_VIRTUAL
BUS_ISA = _uinput.BUS_ISA
BUS_I8042 = _uinput.BUS_I8042
BUS_XTKBD = _uinput.BUS_XTKBD
BUS_RS232 = _uinput.BUS_RS232
BUS_GAMEPORT = _uinput.BUS_GAMEPORT
BUS_PARPORT = _uinput.BUS_PARPORT
BUS_AMIGA = _uinput.BUS_AMIGA
BUS_ADB = _uinput.BUS_ADB
BUS_I2C = _uinput.BUS_I2C
BUS_HOST = _uinput.BUS_HOST
BUS_GSC = _uinput.BUS_GSC
BUS_ATARI = _uinput.BUS_ATARI
FF_STATUS_STOPPED = _uinput.FF_STATUS_STOPPED
FF_STATUS_PLAYING = _uinput.FF_STATUS_PLAYING
FF_STATUS_MAX = _uinput.FF_STATUS_MAX
class ff_replay(object):
    """Proxy of C ff_replay struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    length = _swig_property(_uinput.ff_replay_length_get, _uinput.ff_replay_length_set)
    delay = _swig_property(_uinput.ff_replay_delay_get, _uinput.ff_replay_delay_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_replay_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_replay"""
        return _uinput.ff_replay_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_replay_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_replay"""
        this = _uinput.new_ff_replay(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_replay
    __del__ = lambda self : None;
ff_replay_swigregister = _uinput.ff_replay_swigregister
ff_replay_swigregister(ff_replay)

def ff_replay_unpack(*args, **kwargs):
  """ff_replay_unpack(PyObject data) -> struct ff_replay"""
  return _uinput.ff_replay_unpack(*args, **kwargs)

def ff_replay_size(*args):
  """ff_replay_size() -> size_t"""
  return _uinput.ff_replay_size(*args)

class ff_trigger(object):
    """Proxy of C ff_trigger struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    button = _swig_property(_uinput.ff_trigger_button_get, _uinput.ff_trigger_button_set)
    interval = _swig_property(_uinput.ff_trigger_interval_get, _uinput.ff_trigger_interval_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_trigger_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_trigger"""
        return _uinput.ff_trigger_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_trigger_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_trigger"""
        this = _uinput.new_ff_trigger(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_trigger
    __del__ = lambda self : None;
ff_trigger_swigregister = _uinput.ff_trigger_swigregister
ff_trigger_swigregister(ff_trigger)

def ff_trigger_unpack(*args, **kwargs):
  """ff_trigger_unpack(PyObject data) -> struct ff_trigger"""
  return _uinput.ff_trigger_unpack(*args, **kwargs)

def ff_trigger_size(*args):
  """ff_trigger_size() -> size_t"""
  return _uinput.ff_trigger_size(*args)

class ff_envelope(object):
    """Proxy of C ff_envelope struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    attack_length = _swig_property(_uinput.ff_envelope_attack_length_get, _uinput.ff_envelope_attack_length_set)
    attack_level = _swig_property(_uinput.ff_envelope_attack_level_get, _uinput.ff_envelope_attack_level_set)
    fade_length = _swig_property(_uinput.ff_envelope_fade_length_get, _uinput.ff_envelope_fade_length_set)
    fade_level = _swig_property(_uinput.ff_envelope_fade_level_get, _uinput.ff_envelope_fade_level_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_envelope_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_envelope"""
        return _uinput.ff_envelope_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_envelope_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_envelope"""
        this = _uinput.new_ff_envelope(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_envelope
    __del__ = lambda self : None;
ff_envelope_swigregister = _uinput.ff_envelope_swigregister
ff_envelope_swigregister(ff_envelope)

def ff_envelope_unpack(*args, **kwargs):
  """ff_envelope_unpack(PyObject data) -> struct ff_envelope"""
  return _uinput.ff_envelope_unpack(*args, **kwargs)

def ff_envelope_size(*args):
  """ff_envelope_size() -> size_t"""
  return _uinput.ff_envelope_size(*args)

class ff_constant_effect(object):
    """Proxy of C ff_constant_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    level = _swig_property(_uinput.ff_constant_effect_level_get, _uinput.ff_constant_effect_level_set)
    envelope = _swig_property(_uinput.ff_constant_effect_envelope_get, _uinput.ff_constant_effect_envelope_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_constant_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_constant_effect"""
        return _uinput.ff_constant_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_constant_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_constant_effect"""
        this = _uinput.new_ff_constant_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_constant_effect
    __del__ = lambda self : None;
ff_constant_effect_swigregister = _uinput.ff_constant_effect_swigregister
ff_constant_effect_swigregister(ff_constant_effect)

def ff_constant_effect_unpack(*args, **kwargs):
  """ff_constant_effect_unpack(PyObject data) -> struct ff_constant_effect"""
  return _uinput.ff_constant_effect_unpack(*args, **kwargs)

def ff_constant_effect_size(*args):
  """ff_constant_effect_size() -> size_t"""
  return _uinput.ff_constant_effect_size(*args)

class ff_ramp_effect(object):
    """Proxy of C ff_ramp_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start_level = _swig_property(_uinput.ff_ramp_effect_start_level_get, _uinput.ff_ramp_effect_start_level_set)
    end_level = _swig_property(_uinput.ff_ramp_effect_end_level_get, _uinput.ff_ramp_effect_end_level_set)
    envelope = _swig_property(_uinput.ff_ramp_effect_envelope_get, _uinput.ff_ramp_effect_envelope_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_ramp_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_ramp_effect"""
        return _uinput.ff_ramp_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_ramp_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_ramp_effect"""
        this = _uinput.new_ff_ramp_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_ramp_effect
    __del__ = lambda self : None;
ff_ramp_effect_swigregister = _uinput.ff_ramp_effect_swigregister
ff_ramp_effect_swigregister(ff_ramp_effect)

def ff_ramp_effect_unpack(*args, **kwargs):
  """ff_ramp_effect_unpack(PyObject data) -> struct ff_ramp_effect"""
  return _uinput.ff_ramp_effect_unpack(*args, **kwargs)

def ff_ramp_effect_size(*args):
  """ff_ramp_effect_size() -> size_t"""
  return _uinput.ff_ramp_effect_size(*args)

class ff_condition_effect(object):
    """Proxy of C ff_condition_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    right_saturation = _swig_property(_uinput.ff_condition_effect_right_saturation_get, _uinput.ff_condition_effect_right_saturation_set)
    left_saturation = _swig_property(_uinput.ff_condition_effect_left_saturation_get, _uinput.ff_condition_effect_left_saturation_set)
    right_coeff = _swig_property(_uinput.ff_condition_effect_right_coeff_get, _uinput.ff_condition_effect_right_coeff_set)
    left_coeff = _swig_property(_uinput.ff_condition_effect_left_coeff_get, _uinput.ff_condition_effect_left_coeff_set)
    deadband = _swig_property(_uinput.ff_condition_effect_deadband_get, _uinput.ff_condition_effect_deadband_set)
    center = _swig_property(_uinput.ff_condition_effect_center_get, _uinput.ff_condition_effect_center_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_condition_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_condition_effect"""
        return _uinput.ff_condition_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_condition_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_condition_effect"""
        this = _uinput.new_ff_condition_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_condition_effect
    __del__ = lambda self : None;
ff_condition_effect_swigregister = _uinput.ff_condition_effect_swigregister
ff_condition_effect_swigregister(ff_condition_effect)

def ff_condition_effect_unpack(*args, **kwargs):
  """ff_condition_effect_unpack(PyObject data) -> struct ff_condition_effect"""
  return _uinput.ff_condition_effect_unpack(*args, **kwargs)

def ff_condition_effect_size(*args):
  """ff_condition_effect_size() -> size_t"""
  return _uinput.ff_condition_effect_size(*args)

class ff_periodic_effect(object):
    """Proxy of C ff_periodic_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    waveform = _swig_property(_uinput.ff_periodic_effect_waveform_get, _uinput.ff_periodic_effect_waveform_set)
    period = _swig_property(_uinput.ff_periodic_effect_period_get, _uinput.ff_periodic_effect_period_set)
    magnitude = _swig_property(_uinput.ff_periodic_effect_magnitude_get, _uinput.ff_periodic_effect_magnitude_set)
    offset = _swig_property(_uinput.ff_periodic_effect_offset_get, _uinput.ff_periodic_effect_offset_set)
    phase = _swig_property(_uinput.ff_periodic_effect_phase_get, _uinput.ff_periodic_effect_phase_set)
    envelope = _swig_property(_uinput.ff_periodic_effect_envelope_get, _uinput.ff_periodic_effect_envelope_set)
    custom_len = _swig_property(_uinput.ff_periodic_effect_custom_len_get, _uinput.ff_periodic_effect_custom_len_set)
    custom_data = _swig_property(_uinput.ff_periodic_effect_custom_data_get, _uinput.ff_periodic_effect_custom_data_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_periodic_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_periodic_effect"""
        return _uinput.ff_periodic_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_periodic_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_periodic_effect"""
        this = _uinput.new_ff_periodic_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_periodic_effect
    __del__ = lambda self : None;
ff_periodic_effect_swigregister = _uinput.ff_periodic_effect_swigregister
ff_periodic_effect_swigregister(ff_periodic_effect)

def ff_periodic_effect_unpack(*args, **kwargs):
  """ff_periodic_effect_unpack(PyObject data) -> struct ff_periodic_effect"""
  return _uinput.ff_periodic_effect_unpack(*args, **kwargs)

def ff_periodic_effect_size(*args):
  """ff_periodic_effect_size() -> size_t"""
  return _uinput.ff_periodic_effect_size(*args)

class ff_rumble_effect(object):
    """Proxy of C ff_rumble_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    strong_magnitude = _swig_property(_uinput.ff_rumble_effect_strong_magnitude_get, _uinput.ff_rumble_effect_strong_magnitude_set)
    weak_magnitude = _swig_property(_uinput.ff_rumble_effect_weak_magnitude_get, _uinput.ff_rumble_effect_weak_magnitude_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_rumble_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_rumble_effect"""
        return _uinput.ff_rumble_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_rumble_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_rumble_effect"""
        this = _uinput.new_ff_rumble_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_rumble_effect
    __del__ = lambda self : None;
ff_rumble_effect_swigregister = _uinput.ff_rumble_effect_swigregister
ff_rumble_effect_swigregister(ff_rumble_effect)

def ff_rumble_effect_unpack(*args, **kwargs):
  """ff_rumble_effect_unpack(PyObject data) -> struct ff_rumble_effect"""
  return _uinput.ff_rumble_effect_unpack(*args, **kwargs)

def ff_rumble_effect_size(*args):
  """ff_rumble_effect_size() -> size_t"""
  return _uinput.ff_rumble_effect_size(*args)

class ff_effect(object):
    """Proxy of C ff_effect struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_uinput.ff_effect_type_get, _uinput.ff_effect_type_set)
    id = _swig_property(_uinput.ff_effect_id_get, _uinput.ff_effect_id_set)
    direction = _swig_property(_uinput.ff_effect_direction_get, _uinput.ff_effect_direction_set)
    trigger = _swig_property(_uinput.ff_effect_trigger_get, _uinput.ff_effect_trigger_set)
    replay = _swig_property(_uinput.ff_effect_replay_get, _uinput.ff_effect_replay_set)
    u = _swig_property(_uinput.ff_effect_u_get)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.ff_effect_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct ff_effect"""
        return _uinput.ff_effect_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.ff_effect_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_effect"""
        this = _uinput.new_ff_effect(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_effect
    __del__ = lambda self : None;
ff_effect_swigregister = _uinput.ff_effect_swigregister
ff_effect_swigregister(ff_effect)

def ff_effect_unpack(*args, **kwargs):
  """ff_effect_unpack(PyObject data) -> struct ff_effect"""
  return _uinput.ff_effect_unpack(*args, **kwargs)

def ff_effect_size(*args):
  """ff_effect_size() -> size_t"""
  return _uinput.ff_effect_size(*args)

class ff_effect_u(object):
    """Proxy of C ff_effect_u struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    constant = _swig_property(_uinput.ff_effect_u_constant_get, _uinput.ff_effect_u_constant_set)
    ramp = _swig_property(_uinput.ff_effect_u_ramp_get, _uinput.ff_effect_u_ramp_set)
    periodic = _swig_property(_uinput.ff_effect_u_periodic_get, _uinput.ff_effect_u_periodic_set)
    condition = _swig_property(_uinput.ff_effect_u_condition_get, _uinput.ff_effect_u_condition_set)
    rumble = _swig_property(_uinput.ff_effect_u_rumble_get, _uinput.ff_effect_u_rumble_set)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> ff_effect_u"""
        this = _uinput.new_ff_effect_u(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_ff_effect_u
    __del__ = lambda self : None;
ff_effect_u_swigregister = _uinput.ff_effect_u_swigregister
ff_effect_u_swigregister(ff_effect_u)

FF_RUMBLE = _uinput.FF_RUMBLE
FF_PERIODIC = _uinput.FF_PERIODIC
FF_CONSTANT = _uinput.FF_CONSTANT
FF_SPRING = _uinput.FF_SPRING
FF_FRICTION = _uinput.FF_FRICTION
FF_DAMPER = _uinput.FF_DAMPER
FF_INERTIA = _uinput.FF_INERTIA
FF_RAMP = _uinput.FF_RAMP
FF_EFFECT_MIN = _uinput.FF_EFFECT_MIN
FF_EFFECT_MAX = _uinput.FF_EFFECT_MAX
FF_SQUARE = _uinput.FF_SQUARE
FF_TRIANGLE = _uinput.FF_TRIANGLE
FF_SINE = _uinput.FF_SINE
FF_SAW_UP = _uinput.FF_SAW_UP
FF_SAW_DOWN = _uinput.FF_SAW_DOWN
FF_CUSTOM = _uinput.FF_CUSTOM
FF_WAVEFORM_MIN = _uinput.FF_WAVEFORM_MIN
FF_WAVEFORM_MAX = _uinput.FF_WAVEFORM_MAX
FF_GAIN = _uinput.FF_GAIN
FF_AUTOCENTER = _uinput.FF_AUTOCENTER
FF_MAX = _uinput.FF_MAX
FF_CNT = _uinput.FF_CNT
UINPUT_VERSION = _uinput.UINPUT_VERSION
class uinput_ff_upload(object):
    """Proxy of C uinput_ff_upload struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    request_id = _swig_property(_uinput.uinput_ff_upload_request_id_get, _uinput.uinput_ff_upload_request_id_set)
    retval = _swig_property(_uinput.uinput_ff_upload_retval_get, _uinput.uinput_ff_upload_retval_set)
    effect = _swig_property(_uinput.uinput_ff_upload_effect_get, _uinput.uinput_ff_upload_effect_set)
    old = _swig_property(_uinput.uinput_ff_upload_old_get, _uinput.uinput_ff_upload_old_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.uinput_ff_upload_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct uinput_ff_upload"""
        return _uinput.uinput_ff_upload_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.uinput_ff_upload_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> uinput_ff_upload"""
        this = _uinput.new_uinput_ff_upload(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_uinput_ff_upload
    __del__ = lambda self : None;
uinput_ff_upload_swigregister = _uinput.uinput_ff_upload_swigregister
uinput_ff_upload_swigregister(uinput_ff_upload)

def uinput_ff_upload_unpack(*args, **kwargs):
  """uinput_ff_upload_unpack(PyObject data) -> struct uinput_ff_upload"""
  return _uinput.uinput_ff_upload_unpack(*args, **kwargs)

def uinput_ff_upload_size(*args):
  """uinput_ff_upload_size() -> size_t"""
  return _uinput.uinput_ff_upload_size(*args)

class uinput_ff_erase(object):
    """Proxy of C uinput_ff_erase struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    request_id = _swig_property(_uinput.uinput_ff_erase_request_id_get, _uinput.uinput_ff_erase_request_id_set)
    retval = _swig_property(_uinput.uinput_ff_erase_retval_get, _uinput.uinput_ff_erase_retval_set)
    effect_id = _swig_property(_uinput.uinput_ff_erase_effect_id_get, _uinput.uinput_ff_erase_effect_id_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.uinput_ff_erase_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct uinput_ff_erase"""
        return _uinput.uinput_ff_erase_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.uinput_ff_erase_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> uinput_ff_erase"""
        this = _uinput.new_uinput_ff_erase(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_uinput_ff_erase
    __del__ = lambda self : None;
uinput_ff_erase_swigregister = _uinput.uinput_ff_erase_swigregister
uinput_ff_erase_swigregister(uinput_ff_erase)

def uinput_ff_erase_unpack(*args, **kwargs):
  """uinput_ff_erase_unpack(PyObject data) -> struct uinput_ff_erase"""
  return _uinput.uinput_ff_erase_unpack(*args, **kwargs)

def uinput_ff_erase_size(*args):
  """uinput_ff_erase_size() -> size_t"""
  return _uinput.uinput_ff_erase_size(*args)

UINPUT_IOCTL_BASE = _uinput.UINPUT_IOCTL_BASE
EV_UINPUT = _uinput.EV_UINPUT
UI_FF_UPLOAD = _uinput.UI_FF_UPLOAD
UI_FF_ERASE = _uinput.UI_FF_ERASE
UINPUT_MAX_NAME_SIZE = _uinput.UINPUT_MAX_NAME_SIZE
class uinput_user_dev(object):
    """Proxy of C uinput_user_dev struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_uinput.uinput_user_dev_name_get, _uinput.uinput_user_dev_name_set)
    id = _swig_property(_uinput.uinput_user_dev_id_get, _uinput.uinput_user_dev_id_set)
    ff_effects_max = _swig_property(_uinput.uinput_user_dev_ff_effects_max_get, _uinput.uinput_user_dev_ff_effects_max_set)
    absmax = _swig_property(_uinput.uinput_user_dev_absmax_get, _uinput.uinput_user_dev_absmax_set)
    absmin = _swig_property(_uinput.uinput_user_dev_absmin_get, _uinput.uinput_user_dev_absmin_set)
    absfuzz = _swig_property(_uinput.uinput_user_dev_absfuzz_get, _uinput.uinput_user_dev_absfuzz_set)
    absflat = _swig_property(_uinput.uinput_user_dev_absflat_get, _uinput.uinput_user_dev_absflat_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.uinput_user_dev_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct uinput_user_dev"""
        return _uinput.uinput_user_dev_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.uinput_user_dev_size(*args, **kwargs)

    size = staticmethod(size)
    def __init__(self, *args, **kwargs): 
        """__init__(self) -> uinput_user_dev"""
        this = _uinput.new_uinput_user_dev(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_uinput_user_dev
    __del__ = lambda self : None;
uinput_user_dev_swigregister = _uinput.uinput_user_dev_swigregister
uinput_user_dev_swigregister(uinput_user_dev)

def uinput_user_dev_unpack(*args, **kwargs):
  """uinput_user_dev_unpack(PyObject data) -> struct uinput_user_dev"""
  return _uinput.uinput_user_dev_unpack(*args, **kwargs)

def uinput_user_dev_size(*args):
  """uinput_user_dev_size() -> size_t"""
  return _uinput.uinput_user_dev_size(*args)

class timeval(object):
    """Proxy of C timeval struct"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tv_sec = _swig_property(_uinput.timeval_tv_sec_get, _uinput.timeval_tv_sec_set)
    tv_usec = _swig_property(_uinput.timeval_tv_usec_get, _uinput.timeval_tv_usec_set)
    def pack(*args, **kwargs):
        """pack(self) -> PyObject"""
        return _uinput.timeval_pack(*args, **kwargs)

    def unpack(*args, **kwargs):
        """unpack(PyObject data) -> struct timeval"""
        return _uinput.timeval_unpack(*args, **kwargs)

    unpack = staticmethod(unpack)
    def size(*args, **kwargs):
        """size() -> size_t"""
        return _uinput.timeval_size(*args, **kwargs)

    size = staticmethod(size)
    def __float__(*args, **kwargs):
        """__float__(self) -> PyObject"""
        return _uinput.timeval___float__(*args, **kwargs)

    def __init__(self, *args, **kwargs): 
        """__init__(self) -> timeval"""
        this = _uinput.new_timeval(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _uinput.delete_timeval
    __del__ = lambda self : None;
timeval_swigregister = _uinput.timeval_swigregister
timeval_swigregister(timeval)

def timeval_unpack(*args, **kwargs):
  """timeval_unpack(PyObject data) -> struct timeval"""
  return _uinput.timeval_unpack(*args, **kwargs)

def timeval_size(*args):
  """timeval_size() -> size_t"""
  return _uinput.timeval_size(*args)

def _struct_new(theclass):
	def __new__(cls, *args, **kwargs):
		"""
		A generic struct initializer that allows for setting of props during initializartion.
		"""
		self = super(theclass, cls).__new__(cls, *args, **kwargs)
		props = {}
		for k,v in kwargs.copy().iteritems():
			if hasattr(cls, k) and not k.startswith('__') and k not in ('this', 'thisown'):
				props[k] = v
				del kwargs[k]
		self.__init__(*args, **kwargs)
		for k,v in props.iteritems():
			setattr(self, k, v)
		return self
	theclass.__new__ = staticmethod(__new__)

_struct_new(ff_condition_effect)

_struct_new(ff_constant_effect)

_struct_new(ff_effect)

_struct_new(ff_envelope)

_struct_new(ff_periodic_effect)

_struct_new(ff_ramp_effect)

_struct_new(ff_replay)

_struct_new(ff_rumble_effect)

_struct_new(ff_trigger)

_struct_new(input_absinfo)

_struct_new(uinput_ff_erase)

_struct_new(uinput_ff_upload)

_struct_new(input_id)

_struct_new(timeval)

_struct_new(input_event)

_struct_new(uinput_user_dev)

globals()["UI_SET_EVBIT"] = getattr(_uinput, "UI_SET_EVBIT")

globals()["UI_SET_KEYBIT"] = getattr(_uinput, "UI_SET_KEYBIT")

globals()["UI_SET_RELBIT"] = getattr(_uinput, "UI_SET_RELBIT")

globals()["UI_SET_ABSBIT"] = getattr(_uinput, "UI_SET_ABSBIT")

globals()["UI_SET_MSCBIT"] = getattr(_uinput, "UI_SET_MSCBIT")

globals()["UI_SET_LEDBIT"] = getattr(_uinput, "UI_SET_LEDBIT")

globals()["UI_SET_SNDBIT"] = getattr(_uinput, "UI_SET_SNDBIT")

globals()["UI_SET_FFBIT"] = getattr(_uinput, "UI_SET_FFBIT")

globals()["UI_SET_PHYS"] = getattr(_uinput, "UI_SET_PHYS")

globals()["UI_SET_SWBIT"] = getattr(_uinput, "UI_SET_SWBIT")

globals()["UI_DEV_CREATE"] = getattr(_uinput, "UI_DEV_CREATE")

globals()["UI_DEV_DESTROY"] = getattr(_uinput, "UI_DEV_DESTROY")

globals()["EVIOCGID"] = getattr(_uinput, "EVIOCGID")

globals()["EVIOCGVERSION"] = getattr(_uinput, "EVIOCGVERSION")


def _EVIOCGNAME(*args, **kwargs):
  """_EVIOCGNAME(long len) -> long"""
  return _uinput._EVIOCGNAME(*args, **kwargs)
def _EVIOCGNAME (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGNAME (len)
globals()["EVIOCGNAME"] = _EVIOCGNAME


def _EVIOCGPHYS(*args, **kwargs):
  """_EVIOCGPHYS(long len) -> long"""
  return _uinput._EVIOCGPHYS(*args, **kwargs)
def _EVIOCGPHYS (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGPHYS (len)
globals()["EVIOCGPHYS"] = _EVIOCGPHYS


def _EVIOCGUNIQ(*args, **kwargs):
  """_EVIOCGUNIQ(long len) -> long"""
  return _uinput._EVIOCGUNIQ(*args, **kwargs)
def _EVIOCGUNIQ (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGUNIQ (len)
globals()["EVIOCGUNIQ"] = _EVIOCGUNIQ


def _EVIOCGKEY(*args, **kwargs):
  """_EVIOCGKEY(long len) -> long"""
  return _uinput._EVIOCGKEY(*args, **kwargs)
def _EVIOCGKEY (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGKEY (len)
globals()["EVIOCGKEY"] = _EVIOCGKEY


def _EVIOCGLED(*args, **kwargs):
  """_EVIOCGLED(long len) -> long"""
  return _uinput._EVIOCGLED(*args, **kwargs)
def _EVIOCGLED (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGLED (len)
globals()["EVIOCGLED"] = _EVIOCGLED


def _EVIOCGSND(*args, **kwargs):
  """_EVIOCGSND(long len) -> long"""
  return _uinput._EVIOCGSND(*args, **kwargs)
def _EVIOCGSND (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGSND (len)
globals()["EVIOCGSND"] = _EVIOCGSND


def _EVIOCGSW(*args, **kwargs):
  """_EVIOCGSW(long len) -> long"""
  return _uinput._EVIOCGSW(*args, **kwargs)
def _EVIOCGSW (len) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGSW (len)
globals()["EVIOCGSW"] = _EVIOCGSW


def _EVIOCGABS(*args, **kwargs):
  """_EVIOCGABS(long abs) -> long"""
  return _uinput._EVIOCGABS(*args, **kwargs)
def _EVIOCGABS (abs) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGABS (abs)
globals()["EVIOCGABS"] = _EVIOCGABS


def _EVIOCSABS(*args, **kwargs):
  """_EVIOCSABS(long abs) -> long"""
  return _uinput._EVIOCSABS(*args, **kwargs)
def _EVIOCSABS (abs) :
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCSABS (abs)
globals()["EVIOCSABS"] = _EVIOCSABS


def _EVIOCGBIT(*args, **kwargs):
  """_EVIOCGBIT(long ev, long len) -> long"""
  return _uinput._EVIOCGBIT(*args, **kwargs)
def _EVIOCGBIT(ev,len):
	"A C Macro. Really lame, I know."
	return _uinput._EVIOCGBIT(ev,len)
globals()["EVIOCGBIT"] = _EVIOCGBIT

__doc__ = """
Handles quite a bit of the back to uinput.
"""

import sys, os, stat, struct, array
from fcntl import ioctl

UINPUT_DEVICES = ['/dev/uinput', '/dev/misc/uinput', '/dev/input/uinput']

def FindUinput(*others):
	"""FindUinput([string ...]) -> string
	Attempts to locate the uinput devices from the names in UINPUT_DEVICES and 
	what's passed in. Returns None if not found.
	"""
	for dev in UINPUT_DEVICES+list(others):
		if os.path.exists(dev) and stat.S_ISCHR(os.stat(dev).st_mode):
			return dev
	else:
		raise ValueError, "Couldn't find uinput: ran out of devices"

class EvdevStream(object):
	__slots__ = '_fileobj','__weakref__'
	def __init__(self, fn, *pargs):
		if isinstance(fn, int):
			self._fileobj = os.fdopen(fn, *pargs)
		elif isinstance(fn, basestring):
			self._fileobj = open(fn, *pargs)
		else:
			self._fileobj = fn
	
	def write(self, obj):
		if hasattr(obj, 'pack'):
			self._fileobj.write(obj.pack())
			self._fileobj.flush()
		else:
			raise TypeError, "obj must have a pack() method."
	
	def read(self, type):
		if hasattr(type, '__len__'):
			s = type.__len__()
		elif hasattr(type, 'size'):
			s = type.size()
		data = self._fileobj.read(s)
		return type.unpack(data)
	
	def ioctl(self, op, *pargs):
		ioctl(self._fileobj, op, *pargs)
	
	def close(self):
		self._fileobj.close()
	
	def flush(self):
		# Should be redundent
		self._fileobj.flush()
	
	def iter(self,type):
		"""
		Like iter(), but needs an initial type. To change the type, use .send() 
		(PEP 342).
		"""
		while True: # Ends when something raises an error
			ntype = yield self.read(type)
			if ntype is not None: type = ntype
	
	def __enter__(self):
		self._fileobj.__enter__()
		return self
	
	def __exit__(self, exc_type, exc_val, exc_tb):
		self._fileobj.__exit__(exc_type, exc_val, exc_tb)
	
	def __getattr__(self, attr):
		return getattr(self._fileobj, attr)
	
	# Convenience functions to get info on the device
	def dev_id(self):
		"""e.dev_id() -> input_id
		Queries the device for its input_id struct.
		"""
		rv = array.array('H', [0]*4)
		self.ioctl(EVIOCGID, rv, True)
		bits = rv
		return input_id(
				bustype=bits[ID_BUS],
				vendor=bits[ID_VENDOR], 
				product=bits[ID_PRODUCT],
				version=bits[ID_VERSION])
	
	def dev_version(self):
		"""e.dev_version() -> int
		Queries the device for its version.
		"""
		rv = array.array("i", [0])
		self.ioctl(EVIOCGVERSION, rv, True)
		return rv[0]
	
	def dev_name(self):
		"""e.dev_name() -> str
		Queries the device for name.
		"""
		rv = array.array("c", ['\0']*256)
		self.ioctl(EVIOCGNAME(len(rv)), rv, True)
		return "".join(rv).rstrip('\0')
	
	def dev_bits(self):
		"""e.dev_bits() -> {int: [int], ...}
		Queries a device for its event bits. The keys are one of the EV_* 
		constants.
		"""
		import math
		BITS_PER_LONG = int(math.ceil(math.log(sys.maxint) / math.log(2))) + 1
		NBITS = lambda x:  (x-1) // BITS_PER_LONG + 1
		OFF = lambda x: x % BITS_PER_LONG
		BIT = lambda x: 1L << OFF(X)
		LONG = lambda x: x // BITS_PER_LONG
		test_bit = lambda b, array: (array[LONG(b)] >> OFF(b)) & 1
		rvbits = {}
		sfmt = 'L', [0] * NBITS(KEY_MAX)
		bit = [None] * uinput.EV_MAX
		buf = array.array(*sfmt)
		self.ioctl(EVIOCGBIT(0, EV_MAX), buf, True)
		bit[0] = list(buf)
		for i in xrange(1,EV_MAX):
			if test_bit(i, bit[0]):
				buf = array.array(*sfmt)
				try:
					self.ioctl(EVIOCGBIT(i, KEY_MAX), buf, True);
				except: pass
				bit[i] = list(buf)
				rvbits[i] = [j for j in xrange(KEY_MAX) if test_bit(j, bit[i])]
		return rvbits
	
	def dev_ranges(self):
		"""e.dev_ranges() -> {int: (int,int,int,int,int), ...}
		Queries the range of each of the absolute axis.
		
		The keys are one of the ABS_* constants.
		The values are (value, min, max, fuzz, flat).
		"""
		bits = self.dev_bits()
		if EV_ABS not in bits: return {}
		rv = {}
		for j in bits[EV_ABS]:
			abs = array.array("i", [0]*5)
			self.ioctl(EVIOCGABS(j), abs, True)
			rv[j] = list(abs)
		return rv

class _uinput_device_manager(object):
	"""
	Private class to automagically call UinputStream.destroy()
	"""
	__stream = None
	def __init__(self, stream):
		self.__stream = stream
	def __enter__(self):
		if not self.__stream._devcreated:
			self.__stream.create()
		return self
			
	def __exit__(self, exc_type, exc_val, exc_tb):
		self.__stream.destroy()

class UinputStream(EvdevStream):
	"""
	Just like EvdevStream, but with some convenience methods for uinput.
	
	Example:
		with UinputStream() as us:
			us.events = [...]
			with us.create():
				us.event(...)
	"""

	__slots__ = '_devcreated','_devcreatable'
	def __init__(self, fn=None, *pargs):
		if fn is None:
			fn = FindUinput()
		super(UinputStream, self).__init__(fn, *pargs)
		self._devcreated = False
		self._devcreatable = False
	def ioctl(self, op, *pargs):
		rv = super(UinputStream, self).ioctl(op, *pargs)
		if op == UI_DEV_CREATE:
			self._devcreated = True
		elif op == UI_DEV_DESTROY:
			self._devcreated = False
		return rv
	
	def close(self):
		super(UinputStream, self).close()
		self._devcreatable = False
		self._devcreated = False
	
	def write(self, obj):
		super(UinputStream, self).write(obj)
		if isinstance(obj, uinput_user_dev): self._devcreatable = True
	
	def create(self):
		"""u.create() -> contextmanager
		Actually creates the devices, locking events. Returns a context manager 
		which will call destroy() automagically.
		"""
		if not self._devcreatable:
			# Send the events
			pass
		if self._devcreatable and not self._devcreated:
			self.ioctl(UI_DEV_CREATE)
	
	def destroy(self):
		"""u.destroy() -> None
		Destroys the device created by create()
		"""
		if self._devcreated:
			self.ioctl(UI_DEV_DESTROY)
	
	def __enter__(self):
		return super(UinputStream, self).__enter__()
			
	def __exit__(self, exc_type, exc_val, exc_tb):
		return super(UinputStream, self).__exit__(exc_type, exc_val, exc_tb)

if __name__ == '__main__':
	uud = uinput_user_dev(name="Saitek Magic Bus", ff_effects_max=0, absmax=[1]*(ABS_MAX+1))
	print repr(uud)
	print uud.__dict__
	print hex(int(uud.this))
	print dir(uud.this)
	print dir(timeval)
	print uud.absmax
	print uud.absmin
	print repr(input_event().pack())



