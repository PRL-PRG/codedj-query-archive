"""
Constructors for certain modular abelian varieties.

AUTHOR:
    -- William Stein (2007-03)
"""

###########################################################################
#       Copyright (C) 2007 William Stein <wstein@gmail.com>               #
#  Distributed under the terms of the GNU General Public License (GPL)    #
#                  http://www.gnu.org/licenses/                           #
###########################################################################

from sage.modular.congroup import is_CongruenceSubgroup
from sage.modular.modsym.space import is_ModularSymbolsSpace
from sage.misc.misc import prod

def J0(N):
    """
    Return the Jacobian $J_0(N)$ of the modular curve $X_0(N)$.
    
    EXAMPLES:
        sage: J0(389)
        Jacobian of the modular curve associated to the congruence subgroup Gamma0(389)
    """
    from sage.modular.congroup import Gamma0
    return Gamma0(N).modular_abelian_variety()

def J1(N):
    """
    Return the Jacobian $J_1(N)$ of the modular curve $X_1(N)$.
    
    EXAMPLES:
        sage: J1(389)
        Jacobian of the modular curve associated to the congruence subgroup Gamma1(389)    
    """
    from sage.modular.congroup import Gamma1
    return Gamma1(N).modular_abelian_variety()

def JH(N, H):
    """
    Return the Jacobian $J_H(N)$ of the modular curve $X_H(N)$.
    
    EXAMPLES:
        sage: JH(389,[2])
        Jacobian of the modular curve associated to the congruence subgroup Gamma_H(389) with H generated by [2]    
    """
    from sage.modular.congroup import GammaH
    return GammaH(N, H).modular_abelian_variety()

def AbelianVariety(groups=None, lattice=None, modsym=None, base_field=None):
    """
    Create the abelian variety corresponding to the given definining data.
    """

    if is_CongruenceSubgroup(groups):
        groups = [groups]

    if groups is not None and all([is_CongruenceSubgroup(G) for G in groups]):
        return prod([G.modular_abelian_variety() for G in groups])

    if modsym is not None and is_ModularSymbolsSpace(modsym):
        return modsym.modular_abelian_variety()

    raise NotImplementedError, "arguments to AbelianVariety not recognized"
