import gaudimodule as gaudi
import os , string , tempfile 

# job options sevice
def getOptSvc( appMgr = None ) :
    " accessor to job options service " 
    if not appMgr : appMgr = gaudi.AppMgr() 
    svc    = gaudi.Helper.service( appMgr._svcloc , 'JobOptionsSvc' , 1 )
    svc    = gaudi.Interface( gaudi.gbl.IJobOptionsSvc ).cast( svc )
    return svc

def replaceQuatas ( name ) :
    return string.replace( name  , '"' , '')

def getProperty     ( name , ownername ) :
    optSvc = getOptSvc() 
    props  = optSvc.getProperties( ownername )
    for p in props :
        if name == p.name() :  return p.value()
    return None

def extractProperty ( name , ownername ) :
    res = getProperty ( name , ownername )
    if not res : res = [] 
    result = []
    for p in res   : result += [ replaceQuatas ( p )  ]
    return result

def config ( **args ) :
    appMgr = gaudi.AppMgr()
    files = args.get('files',[])
    for file in files :
        sc = appMgr.readOptions( file   )
        if sc.isFailure() :
            raise RuntimeError , ' Unable to read file "' + file +'" '
    # process additional options
    if args.has_key('options') :
        options     = args.get('options')
        if options :
            tmpfilename = tempfile.mktemp()
            tmpfile     = open( tmpfilename, 'w' )
            tmpfile.write ( '#pragma print on  \n' ) 
            tmpfile.write ( '/// File "'+tmpfilename+'" is generated by Python \n\n' ) 
            for opt in options :
                opt = ' \t ' + opt + ' ;  // added by python \n'
                tmpfile.write( opt )
            tmpfile.close() 
            sc = appMgr.readOptions( tmpfilename )
            if sc.isFailure() :
                raise RuntimeError , ' Unable to read file "' + file +'" '
            os.remove( tmpfilename )
    # adjust DLLs 
    DLLs   = extractProperty( 'DLLs' , appMgr.name() )
    if not 'LoKi' in DLLs : DLLs += ['LoKi']
    for DLL in DLLs :
        if not DLL in appMgr.DLLs : appMgr.DLLs += [ DLL ]
    # adjust External Services 
    ExtSvc = extractProperty( 'ExtSvc' , appMgr.name() )
    if not 'DetDataSvc/DetectorDataSvc' in ExtSvc :
        ExtSvc = ['DetDataSvc/DetectorDataSvc'] + ExtSvc 
    if not 'EvtDataSvc/EventDataSvc'    in ExtSvc :
        ExtSvc = ['EvtDataSvc/EventDataSvc'   ] + ExtSvc
    for SVC in ExtSvc :
            if not SVC in appMgr.ExtSvc : appMgr.ExtSvc += [ SVC ]
    # add algorithms 
    TopAlg = extractProperty( 'TopAlg'    , appMgr.name() )
    appMgr.topAlg = TopAlg 
    # add output streams
    OutStr = extractProperty( 'OutStream' , appMgr.name() )
    if OutStr : appMgr.OutStream = OutStr ;
    # histogram persistency
    histos = getProperty ( 'HistogramPersistency' , appMgr.name() )
    if histos : appMgr.HistogramPersistency = replaceQuatas( histos ) ;
    # number of events
    #EvtMax = getProperty ( 'EvtMax' , appMgr.name() )
    #if EvtMax :
    #    print " evt MAx " , EvtMax , " type " , type(EvtMax) 
    #    appMgr.EvtMax = EvtMax
    
    
def getNEvents  ( options ) :
    import getopt, string 
    try:
        opts , args = getopt.getopt ( options , "n:e:" ,
                                      [ 'events=' , 'nevents=' ] )
    except :
        return None 
    for o,a in opts :
        if o in ( '-e' , '-n' , '--events=' , '--nevents' ) : return int( a )  
    return None

def getDVoptions ( options ) :
    import getopt
    try:
        opts , args = getopt.getopt ( options , "d:o:j:" ,
                                      [ 'davinci=' , 'options=' , "job=" ] )
    except :
        return None 
    for o,a in opts :
        if o in ( '-d' , '-o' , '-j' , '--davinci=' , '--options' , '--job' ) : return a 
    return None
    
