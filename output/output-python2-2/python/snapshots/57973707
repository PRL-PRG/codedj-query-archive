#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor

class Iface(object):
  def list_devices(self, ):
    pass

  def get_device(self, name):
    pass

  def add_device(self, name, begin_time, end_time):
    pass

  def update_device(self, name, begin_time, end_time):
    pass

  def list_device_oidsets(self, device):
    pass

  def list_oids(self, ):
    pass

  def get_oid(self, name):
    pass

  def add_oid(self, name, storage, oidtype):
    pass

  def list_oidsets(self, ):
    pass

  def get_oidset(self, name):
    pass

  def get_oidset_devices(self, oidset):
    pass

  def get_vars_by_grouping(self, grouping):
    pass

  def insert_counter32(self, vars, values):
    pass

  def insert_counter64(self, vars, values):
    pass

  def insert_gauge32(self, vars, values):
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def list_devices(self, ):
    self.send_list_devices()
    return self.recv_list_devices()

  def send_list_devices(self, ):
    self._oprot.writeMessageBegin('list_devices', TMessageType.CALL, self._seqid)
    args = list_devices_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_devices(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_devices_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_devices failed: unknown result");

  def get_device(self, name):
    self.send_get_device(name)
    return self.recv_get_device()

  def send_get_device(self, name):
    self._oprot.writeMessageBegin('get_device', TMessageType.CALL, self._seqid)
    args = get_device_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_device(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_device_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_device failed: unknown result");

  def add_device(self, name, begin_time, end_time):
    self.send_add_device(name, begin_time, end_time)
    self.recv_add_device()

  def send_add_device(self, name, begin_time, end_time):
    self._oprot.writeMessageBegin('add_device', TMessageType.CALL, self._seqid)
    args = add_device_args()
    args.name = name
    args.begin_time = begin_time
    args.end_time = end_time
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_device(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_device_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def update_device(self, name, begin_time, end_time):
    self.send_update_device(name, begin_time, end_time)
    self.recv_update_device()

  def send_update_device(self, name, begin_time, end_time):
    self._oprot.writeMessageBegin('update_device', TMessageType.CALL, self._seqid)
    args = update_device_args()
    args.name = name
    args.begin_time = begin_time
    args.end_time = end_time
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_update_device(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = update_device_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def list_device_oidsets(self, device):
    self.send_list_device_oidsets(device)
    return self.recv_list_device_oidsets()

  def send_list_device_oidsets(self, device):
    self._oprot.writeMessageBegin('list_device_oidsets', TMessageType.CALL, self._seqid)
    args = list_device_oidsets_args()
    args.device = device
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_device_oidsets(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_device_oidsets_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_device_oidsets failed: unknown result");

  def list_oids(self, ):
    self.send_list_oids()
    return self.recv_list_oids()

  def send_list_oids(self, ):
    self._oprot.writeMessageBegin('list_oids', TMessageType.CALL, self._seqid)
    args = list_oids_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_oids(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_oids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_oids failed: unknown result");

  def get_oid(self, name):
    self.send_get_oid(name)
    return self.recv_get_oid()

  def send_get_oid(self, name):
    self._oprot.writeMessageBegin('get_oid', TMessageType.CALL, self._seqid)
    args = get_oid_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_oid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_oid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_oid failed: unknown result");

  def add_oid(self, name, storage, oidtype):
    self.send_add_oid(name, storage, oidtype)
    self.recv_add_oid()

  def send_add_oid(self, name, storage, oidtype):
    self._oprot.writeMessageBegin('add_oid', TMessageType.CALL, self._seqid)
    args = add_oid_args()
    args.name = name
    args.storage = storage
    args.oidtype = oidtype
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_oid(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_oid_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def list_oidsets(self, ):
    self.send_list_oidsets()
    return self.recv_list_oidsets()

  def send_list_oidsets(self, ):
    self._oprot.writeMessageBegin('list_oidsets', TMessageType.CALL, self._seqid)
    args = list_oidsets_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_list_oidsets(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = list_oidsets_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "list_oidsets failed: unknown result");

  def get_oidset(self, name):
    self.send_get_oidset(name)
    return self.recv_get_oidset()

  def send_get_oidset(self, name):
    self._oprot.writeMessageBegin('get_oidset', TMessageType.CALL, self._seqid)
    args = get_oidset_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_oidset(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_oidset_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_oidset failed: unknown result");

  def get_oidset_devices(self, oidset):
    self.send_get_oidset_devices(oidset)
    return self.recv_get_oidset_devices()

  def send_get_oidset_devices(self, oidset):
    self._oprot.writeMessageBegin('get_oidset_devices', TMessageType.CALL, self._seqid)
    args = get_oidset_devices_args()
    args.oidset = oidset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_oidset_devices(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_oidset_devices_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_oidset_devices failed: unknown result");

  def get_vars_by_grouping(self, grouping):
    self.send_get_vars_by_grouping(grouping)
    return self.recv_get_vars_by_grouping()

  def send_get_vars_by_grouping(self, grouping):
    self._oprot.writeMessageBegin('get_vars_by_grouping', TMessageType.CALL, self._seqid)
    args = get_vars_by_grouping_args()
    args.grouping = grouping
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_vars_by_grouping(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_vars_by_grouping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_vars_by_grouping failed: unknown result");

  def insert_counter32(self, vars, values):
    self.send_insert_counter32(vars, values)
    self.recv_insert_counter32()

  def send_insert_counter32(self, vars, values):
    self._oprot.writeMessageBegin('insert_counter32', TMessageType.CALL, self._seqid)
    args = insert_counter32_args()
    args.vars = vars
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insert_counter32(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = insert_counter32_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def insert_counter64(self, vars, values):
    self.send_insert_counter64(vars, values)
    self.recv_insert_counter64()

  def send_insert_counter64(self, vars, values):
    self._oprot.writeMessageBegin('insert_counter64', TMessageType.CALL, self._seqid)
    args = insert_counter64_args()
    args.vars = vars
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insert_counter64(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = insert_counter64_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def insert_gauge32(self, vars, values):
    self.send_insert_gauge32(vars, values)
    self.recv_insert_gauge32()

  def send_insert_gauge32(self, vars, values):
    self._oprot.writeMessageBegin('insert_gauge32', TMessageType.CALL, self._seqid)
    args = insert_gauge32_args()
    args.vars = vars
    args.values = values
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insert_gauge32(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = insert_gauge32_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["list_devices"] = Processor.process_list_devices
    self._processMap["get_device"] = Processor.process_get_device
    self._processMap["add_device"] = Processor.process_add_device
    self._processMap["update_device"] = Processor.process_update_device
    self._processMap["list_device_oidsets"] = Processor.process_list_device_oidsets
    self._processMap["list_oids"] = Processor.process_list_oids
    self._processMap["get_oid"] = Processor.process_get_oid
    self._processMap["add_oid"] = Processor.process_add_oid
    self._processMap["list_oidsets"] = Processor.process_list_oidsets
    self._processMap["get_oidset"] = Processor.process_get_oidset
    self._processMap["get_oidset_devices"] = Processor.process_get_oidset_devices
    self._processMap["get_vars_by_grouping"] = Processor.process_get_vars_by_grouping
    self._processMap["insert_counter32"] = Processor.process_insert_counter32
    self._processMap["insert_counter64"] = Processor.process_insert_counter64
    self._processMap["insert_gauge32"] = Processor.process_insert_gauge32

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_list_devices(self, seqid, iprot, oprot):
    args = list_devices_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_devices_result()
    result.success = self._handler.list_devices()
    oprot.writeMessageBegin("list_devices", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_device(self, seqid, iprot, oprot):
    args = get_device_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_device_result()
    result.success = self._handler.get_device(args.name)
    oprot.writeMessageBegin("get_device", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_device(self, seqid, iprot, oprot):
    args = add_device_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_device_result()
    self._handler.add_device(args.name, args.begin_time, args.end_time)
    oprot.writeMessageBegin("add_device", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_update_device(self, seqid, iprot, oprot):
    args = update_device_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = update_device_result()
    self._handler.update_device(args.name, args.begin_time, args.end_time)
    oprot.writeMessageBegin("update_device", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_device_oidsets(self, seqid, iprot, oprot):
    args = list_device_oidsets_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_device_oidsets_result()
    result.success = self._handler.list_device_oidsets(args.device)
    oprot.writeMessageBegin("list_device_oidsets", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_oids(self, seqid, iprot, oprot):
    args = list_oids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_oids_result()
    result.success = self._handler.list_oids()
    oprot.writeMessageBegin("list_oids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_oid(self, seqid, iprot, oprot):
    args = get_oid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_oid_result()
    result.success = self._handler.get_oid(args.name)
    oprot.writeMessageBegin("get_oid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_oid(self, seqid, iprot, oprot):
    args = add_oid_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_oid_result()
    self._handler.add_oid(args.name, args.storage, args.oidtype)
    oprot.writeMessageBegin("add_oid", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_list_oidsets(self, seqid, iprot, oprot):
    args = list_oidsets_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = list_oidsets_result()
    result.success = self._handler.list_oidsets()
    oprot.writeMessageBegin("list_oidsets", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_oidset(self, seqid, iprot, oprot):
    args = get_oidset_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_oidset_result()
    result.success = self._handler.get_oidset(args.name)
    oprot.writeMessageBegin("get_oidset", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_oidset_devices(self, seqid, iprot, oprot):
    args = get_oidset_devices_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_oidset_devices_result()
    result.success = self._handler.get_oidset_devices(args.oidset)
    oprot.writeMessageBegin("get_oidset_devices", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_get_vars_by_grouping(self, seqid, iprot, oprot):
    args = get_vars_by_grouping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_vars_by_grouping_result()
    result.success = self._handler.get_vars_by_grouping(args.grouping)
    oprot.writeMessageBegin("get_vars_by_grouping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insert_counter32(self, seqid, iprot, oprot):
    args = insert_counter32_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insert_counter32_result()
    self._handler.insert_counter32(args.vars, args.values)
    oprot.writeMessageBegin("insert_counter32", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insert_counter64(self, seqid, iprot, oprot):
    args = insert_counter64_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insert_counter64_result()
    self._handler.insert_counter64(args.vars, args.values)
    oprot.writeMessageBegin("insert_counter64", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insert_gauge32(self, seqid, iprot, oprot):
    args = insert_gauge32_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insert_gauge32_result()
    self._handler.insert_gauge32(args.vars, args.values)
    oprot.writeMessageBegin("insert_gauge32", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class list_devices_args(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_devices_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_devices_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString();
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_devices_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter41 in self.success:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_device_args(object):

  def __init__(self, d=None):
    self.name = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_device_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_device_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Device()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_device_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class add_device_args(object):

  def __init__(self, d=None):
    self.name = None
    self.begin_time = None
    self.end_time = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.begin_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('add_device_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.STRING, 2)
      oprot.writeString(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.STRING, 3)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class add_device_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('add_device_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class update_device_args(object):

  def __init__(self, d=None):
    self.name = None
    self.begin_time = None
    self.end_time = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.begin_time = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.end_time = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('update_device_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.STRING, 2)
      oprot.writeString(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.STRING, 3)
      oprot.writeString(self.end_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class update_device_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('update_device_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_device_oidsets_args(object):

  def __init__(self, d=None):
    self.device = None
    if isinstance(d, dict):
      if 'device' in d:
        self.device = d['device']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.device = Device()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_device_oidsets_args')
    if self.device != None:
      oprot.writeFieldBegin('device', TType.STRUCT, 1)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_device_oidsets_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = OIDSet()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_device_oidsets_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_oids_args(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_oids_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_oids_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readString();
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_oids_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter55 in self.success:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oid_args(object):

  def __init__(self, d=None):
    self.name = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oid_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oid_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = OID()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oid_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class add_oid_args(object):

  def __init__(self, d=None):
    self.name = None
    self.storage = None
    self.oidtype = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']
      if 'storage' in d:
        self.storage = d['storage']
      if 'oidtype' in d:
        self.oidtype = d['oidtype']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.storage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.oidtype = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('add_oid_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.storage != None:
      oprot.writeFieldBegin('storage', TType.STRING, 2)
      oprot.writeString(self.storage)
      oprot.writeFieldEnd()
    if self.oidtype != None:
      oprot.writeFieldBegin('oidtype', TType.STRING, 3)
      oprot.writeString(self.oidtype)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class add_oid_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('add_oid_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_oidsets_args(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_oidsets_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class list_oidsets_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readString();
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('list_oidsets_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter62 in self.success:
        oprot.writeString(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oidset_args(object):

  def __init__(self, d=None):
    self.name = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oidset_args')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oidset_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = OIDSet()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oidset_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oidset_devices_args(object):

  def __init__(self, d=None):
    self.oidset = None
    if isinstance(d, dict):
      if 'oidset' in d:
        self.oidset = d['oidset']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.oidset = OIDSet()
          self.oidset.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oidset_devices_args')
    if self.oidset != None:
      oprot.writeFieldBegin('oidset', TType.STRUCT, 1)
      self.oidset.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_oidset_devices_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = Device()
            _elem68.read(iprot)
            self.success.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_oidset_devices_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter69 in self.success:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_vars_by_grouping_args(object):

  def __init__(self, d=None):
    self.grouping = None
    if isinstance(d, dict):
      if 'grouping' in d:
        self.grouping = d['grouping']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.grouping = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_vars_by_grouping_args')
    if self.grouping != None:
      oprot.writeFieldBegin('grouping', TType.I32, 1)
      oprot.writeI32(self.grouping)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class get_vars_by_grouping_result(object):

  def __init__(self, d=None):
    self.success = None
    if isinstance(d, dict):
      if 'success' in d:
        self.success = d['success']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = VarList()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('get_vars_by_grouping_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_counter32_args(object):

  def __init__(self, d=None):
    self.vars = None
    self.values = None
    if isinstance(d, dict):
      if 'vars' in d:
        self.vars = d['vars']
      if 'values' in d:
        self.values = d['values']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.LIST:
          self.vars = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = Var()
            _elem75.read(iprot)
            self.vars.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.LIST:
          self.values = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = Counter32()
            _elem81.read(iprot)
            self.values.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_counter32_args')
    if self.vars != None:
      oprot.writeFieldBegin('vars', TType.LIST, -1)
      oprot.writeListBegin(TType.STRUCT, len(self.vars))
      for iter82 in self.vars:
        iter82.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values != None:
      oprot.writeFieldBegin('values', TType.LIST, -2)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter83 in self.values:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_counter32_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_counter32_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_counter64_args(object):

  def __init__(self, d=None):
    self.vars = None
    self.values = None
    if isinstance(d, dict):
      if 'vars' in d:
        self.vars = d['vars']
      if 'values' in d:
        self.values = d['values']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.LIST:
          self.vars = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = Var()
            _elem89.read(iprot)
            self.vars.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.LIST:
          self.values = []
          (_etype93, _size90) = iprot.readListBegin()
          for _i94 in xrange(_size90):
            _elem95 = Counter64()
            _elem95.read(iprot)
            self.values.append(_elem95)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_counter64_args')
    if self.vars != None:
      oprot.writeFieldBegin('vars', TType.LIST, -1)
      oprot.writeListBegin(TType.STRUCT, len(self.vars))
      for iter96 in self.vars:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values != None:
      oprot.writeFieldBegin('values', TType.LIST, -2)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter97 in self.values:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_counter64_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_counter64_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_gauge32_args(object):

  def __init__(self, d=None):
    self.vars = None
    self.values = None
    if isinstance(d, dict):
      if 'vars' in d:
        self.vars = d['vars']
      if 'values' in d:
        self.values = d['values']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.LIST:
          self.vars = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = Var()
            _elem103.read(iprot)
            self.vars.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.LIST:
          self.values = []
          (_etype107, _size104) = iprot.readListBegin()
          for _i108 in xrange(_size104):
            _elem109 = Gauge32()
            _elem109.read(iprot)
            self.values.append(_elem109)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_gauge32_args')
    if self.vars != None:
      oprot.writeFieldBegin('vars', TType.LIST, -1)
      oprot.writeListBegin(TType.STRUCT, len(self.vars))
      for iter110 in self.vars:
        iter110.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.values != None:
      oprot.writeFieldBegin('values', TType.LIST, -2)
      oprot.writeListBegin(TType.STRUCT, len(self.values))
      for iter111 in self.values:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class insert_gauge32_result(object):

  def __init__(self, d=None):
    pass

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('insert_gauge32_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)


