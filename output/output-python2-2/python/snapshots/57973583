#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Grouping(object):
  Commercial = 1
  Internal = 2
  ResearchEducation = 3
  Education = 4
  Site = 5

class OIDType(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OIDType')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OIDCorrelator(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OIDCorrelator')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OID(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    None, # 3
    (4, TType.I32, 'oidtypeid', None, None, ), # 4
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.oidtypeid = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'oidtypeid' in d:
        self.oidtypeid = d['oidtypeid']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.oidtypeid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OID')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.oidtypeid != None:
      oprot.writeFieldBegin('oidtypeid', TType.I32, 4)
      oprot.writeI32(self.oidtypeid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Poller(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Poller')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class OIDSet(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'frequency', None, None, ), # 3
    (4, TType.LIST, 'oids', (TType.STRUCT,(OID, OID.thrift_spec)), None, ), # 4
    (5, TType.I32, 'pollerid', None, None, ), # 5
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.frequency = None
    self.oids = None
    self.pollerid = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'frequency' in d:
        self.frequency = d['frequency']
      if 'oids' in d:
        self.oids = d['oids']
      if 'pollerid' in d:
        self.pollerid = d['pollerid']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.frequency = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.oids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = OID()
            _elem5.read(iprot)
            self.oids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pollerid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OIDSet')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.frequency != None:
      oprot.writeFieldBegin('frequency', TType.I32, 3)
      oprot.writeI32(self.frequency)
      oprot.writeFieldEnd()
    if self.oids != None:
      oprot.writeFieldBegin('oids', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.oids))
      for iter6 in self.oids:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.pollerid != None:
      oprot.writeFieldBegin('pollerid', TType.I32, 5)
      oprot.writeI32(self.pollerid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DeviceTag(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DeviceTag')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Device(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'begin_time', None, None, ), # 3
    (4, TType.I32, 'end_time', None, None, ), # 4
    (5, TType.STRING, 'community', None, None, ), # 5
    (6, TType.LIST, 'oidsets', (TType.STRUCT,(OIDSet, OIDSet.thrift_spec)), None, ), # 6
  )

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.begin_time = None
    self.end_time = None
    self.community = None
    self.oidsets = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']
      if 'community' in d:
        self.community = d['community']
      if 'oidsets' in d:
        self.oidsets = d['oidsets']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.begin_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.community = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.oidsets = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = OIDSet()
            _elem12.read(iprot)
            self.oidsets.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Device')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.I32, 3)
      oprot.writeI32(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.community != None:
      oprot.writeFieldBegin('community', TType.STRING, 5)
      oprot.writeString(self.community)
      oprot.writeFieldEnd()
    if self.oidsets != None:
      oprot.writeFieldBegin('oidsets', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.oidsets))
      for iter13 in self.oidsets:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class IfRef(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'device', (Device, Device.thrift_spec), None, ), # 2
    (3, TType.I32, 'ifindex', None, None, ), # 3
    (4, TType.STRING, 'ifdescr', None, None, ), # 4
    (5, TType.STRING, 'ifalias', None, None, ), # 5
    (6, TType.STRING, 'ipaddr', None, None, ), # 6
    (7, TType.I32, 'ifspeed', None, None, ), # 7
    (8, TType.I32, 'ifhighspeed', None, None, ), # 8
    (9, TType.STRING, 'connection', None, None, ), # 9
    (10, TType.STRING, 'conntype', None, None, ), # 10
    (11, TType.STRING, 'usage', None, None, ), # 11
    (12, TType.STRING, 'visibility', None, None, ), # 12
    (13, TType.STRING, 'grouping', None, None, ), # 13
  )

  def __init__(self, d=None):
    self.id = None
    self.device = None
    self.ifindex = None
    self.ifdescr = None
    self.ifalias = None
    self.ipaddr = None
    self.ifspeed = None
    self.ifhighspeed = None
    self.connection = None
    self.conntype = None
    self.usage = None
    self.visibility = None
    self.grouping = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'device' in d:
        self.device = d['device']
      if 'ifindex' in d:
        self.ifindex = d['ifindex']
      if 'ifdescr' in d:
        self.ifdescr = d['ifdescr']
      if 'ifalias' in d:
        self.ifalias = d['ifalias']
      if 'ipaddr' in d:
        self.ipaddr = d['ipaddr']
      if 'ifspeed' in d:
        self.ifspeed = d['ifspeed']
      if 'ifhighspeed' in d:
        self.ifhighspeed = d['ifhighspeed']
      if 'connection' in d:
        self.connection = d['connection']
      if 'conntype' in d:
        self.conntype = d['conntype']
      if 'usage' in d:
        self.usage = d['usage']
      if 'visibility' in d:
        self.visibility = d['visibility']
      if 'grouping' in d:
        self.grouping = d['grouping']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.device = Device()
          self.device.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.ifindex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ifdescr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ifalias = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ipaddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.ifspeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.ifhighspeed = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.connection = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.conntype = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.usage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.visibility = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.grouping = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('IfRef')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.device != None:
      oprot.writeFieldBegin('device', TType.STRUCT, 2)
      self.device.write(oprot)
      oprot.writeFieldEnd()
    if self.ifindex != None:
      oprot.writeFieldBegin('ifindex', TType.I32, 3)
      oprot.writeI32(self.ifindex)
      oprot.writeFieldEnd()
    if self.ifdescr != None:
      oprot.writeFieldBegin('ifdescr', TType.STRING, 4)
      oprot.writeString(self.ifdescr)
      oprot.writeFieldEnd()
    if self.ifalias != None:
      oprot.writeFieldBegin('ifalias', TType.STRING, 5)
      oprot.writeString(self.ifalias)
      oprot.writeFieldEnd()
    if self.ipaddr != None:
      oprot.writeFieldBegin('ipaddr', TType.STRING, 6)
      oprot.writeString(self.ipaddr)
      oprot.writeFieldEnd()
    if self.ifspeed != None:
      oprot.writeFieldBegin('ifspeed', TType.I32, 7)
      oprot.writeI32(self.ifspeed)
      oprot.writeFieldEnd()
    if self.ifhighspeed != None:
      oprot.writeFieldBegin('ifhighspeed', TType.I32, 8)
      oprot.writeI32(self.ifhighspeed)
      oprot.writeFieldEnd()
    if self.connection != None:
      oprot.writeFieldBegin('connection', TType.STRING, 9)
      oprot.writeString(self.connection)
      oprot.writeFieldEnd()
    if self.conntype != None:
      oprot.writeFieldBegin('conntype', TType.STRING, 10)
      oprot.writeString(self.conntype)
      oprot.writeFieldEnd()
    if self.usage != None:
      oprot.writeFieldBegin('usage', TType.STRING, 11)
      oprot.writeString(self.usage)
      oprot.writeFieldEnd()
    if self.visibility != None:
      oprot.writeFieldBegin('visibility', TType.STRING, 12)
      oprot.writeString(self.visibility)
      oprot.writeFieldEnd()
    if self.grouping != None:
      oprot.writeFieldBegin('grouping', TType.STRING, 13)
      oprot.writeString(self.grouping)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Counter32(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flags', None, None, ), # 1
    (2, TType.I32, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'value', None, None, ), # 3
    (4, TType.BYTE, 'version', None, None, ), # 4
    (5, TType.BYTE, 'type_id', None, None, ), # 5
  )

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 1
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Counter32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Counter64(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flags', None, None, ), # 1
    (2, TType.I32, 'timestamp', None, None, ), # 2
    (3, TType.I64, 'value', None, None, ), # 3
    (4, TType.BYTE, 'version', None, None, ), # 4
    (5, TType.BYTE, 'type_id', None, None, ), # 5
  )

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 2
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Counter64')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I64, 3)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Gauge32(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'flags', None, None, ), # 1
    (2, TType.I32, 'timestamp', None, None, ), # 2
    (3, TType.I32, 'value', None, None, ), # 3
    (4, TType.BYTE, 'version', None, None, ), # 4
    (5, TType.BYTE, 'type_id', None, None, ), # 5
  )

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 3
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Gauge32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VarList(object):

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'counter32', (TType.STRUCT,(Counter32, Counter32.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'counter64', (TType.STRUCT,(Counter64, Counter64.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'gauge32', (TType.STRUCT,(Gauge32, Gauge32.thrift_spec)), None, ), # 3
  )

  def __init__(self, d=None):
    self.counter32 = None
    self.counter64 = None
    self.gauge32 = None
    if isinstance(d, dict):
      if 'counter32' in d:
        self.counter32 = d['counter32']
      if 'counter64' in d:
        self.counter64 = d['counter64']
      if 'gauge32' in d:
        self.gauge32 = d['gauge32']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.counter32 = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = Counter32()
            _elem19.read(iprot)
            self.counter32.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter64 = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = Counter64()
            _elem25.read(iprot)
            self.counter64.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gauge32 = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = Gauge32()
            _elem31.read(iprot)
            self.gauge32.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VarList')
    if self.counter32 != None:
      oprot.writeFieldBegin('counter32', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.counter32))
      for iter32 in self.counter32:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.counter64 != None:
      oprot.writeFieldBegin('counter64', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.counter64))
      for iter33 in self.counter64:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gauge32 != None:
      oprot.writeFieldBegin('gauge32', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.gauge32))
      for iter34 in self.gauge32:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SNMPPollResultPair(object):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'OIDName', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.OIDName = None
    self.value = None
    if isinstance(d, dict):
      if 'OIDName' in d:
        self.OIDName = d['OIDName']
      if 'value' in d:
        self.value = d['value']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.OIDName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SNMPPollResultPair')
    if self.OIDName != None:
      oprot.writeFieldBegin('OIDName', TType.STRING, 1)
      oprot.writeString(self.OIDName)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SNMPPollResult(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'device_id', None, None, ), # 1
    (2, TType.I32, 'oidset_id', None, None, ), # 2
    (3, TType.I32, 'timestamp', None, None, ), # 3
    (4, TType.LIST, 'vars', (TType.LIST,(TType.STRING,None)), None, ), # 4
  )

  def __init__(self, d=None):
    self.device_id = None
    self.oidset_id = None
    self.timestamp = None
    self.vars = None
    if isinstance(d, dict):
      if 'device_id' in d:
        self.device_id = d['device_id']
      if 'oidset_id' in d:
        self.oidset_id = d['oidset_id']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'vars' in d:
        self.vars = d['vars']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.device_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.oidset_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.vars = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = []
            (_etype44, _size41) = iprot.readListBegin()
            for _i45 in xrange(_size41):
              _elem46 = iprot.readString();
              _elem40.append(_elem46)
            iprot.readListEnd()
            self.vars.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SNMPPollResult')
    if self.device_id != None:
      oprot.writeFieldBegin('device_id', TType.I32, 1)
      oprot.writeI32(self.device_id)
      oprot.writeFieldEnd()
    if self.oidset_id != None:
      oprot.writeFieldBegin('oidset_id', TType.I32, 2)
      oprot.writeI32(self.oidset_id)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 3)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.vars != None:
      oprot.writeFieldBegin('vars', TType.LIST, 4)
      oprot.writeListBegin(TType.LIST, len(self.vars))
      for iter47 in self.vars:
        oprot.writeListBegin(TType.STRING, len(iter47))
        for iter48 in iter47:
          oprot.writeString(iter48)
        oprot.writeListEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rate(object):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'timestamp', None, None, ), # 1
    (2, TType.DOUBLE, 'rate', None, None, ), # 2
  )

  def __init__(self, d=None):
    self.timestamp = None
    self.rate = None
    if isinstance(d, dict):
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'rate' in d:
        self.rate = d['rate']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.rate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rate')
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 1)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.rate != None:
      oprot.writeFieldBegin('rate', TType.DOUBLE, 2)
      oprot.writeDouble(self.rate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESDBError(Exception):

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'what', None, None, ), # 1
  )

  def __init__(self, d=None):
    self.what = None
    if isinstance(d, dict):
      if 'what' in d:
        self.what = d['what']

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.what = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESDBError')
    if self.what != None:
      oprot.writeFieldBegin('what', TType.STRING, 1)
      oprot.writeString(self.what)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

