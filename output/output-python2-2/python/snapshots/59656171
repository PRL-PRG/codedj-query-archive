"""
This script generates the caseConversionMaps.py module.
It references the following Unicode files:
    PropList.txt
    SpecialCasing.txt
    UnicodeData.txt
"""

import os
import pprint
import time
import compositor

# -----
# Tools
# -----

def filterLines(path):
    f = open(path, "r")
    text = f.read()
    f.close()
    lines = []
    for line in text.splitlines():
        line = line.strip()
        if not line or line.startswith("#"):
            continue
        lines.append(line)
    return lines

def convertCodeToInt(code):
    if not code:
        return None
    if " " in code:
        return tuple([convertCodeToInt(i) for i in code.split(" ")])
    return int(code, 16)

# ----------------------
# wordBreakProperties.py
# ----------------------

p = os.path.join(os.path.dirname(__file__), "WordBreakProperty.txt")

wordBreakProperties = {}

for line in filterLines(p):
    data = line.split(";")
    data = [i.split("#")[0].strip() for i in data]
    code, property = data
    if ".." in code:
        start, end = code.split("..")
        start = convertCodeToInt(start)
        end = convertCodeToInt(end)
        codes = range(start, end+1)
    else:
        codes = [convertCodeToInt(code)]
    for code in codes:
        assert code not in wordBreakProperties
        wordBreakProperties[code] = property

# Write the module

text = [
    "# ------------",
    "# DO NOT EDIT!",
    "# ------------",
    "# This was generated by tools/%s" % os.path.basename(__file__),
    "# Generated on: %s" % (time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())),
    "",
]

text.append("%s = %s" % ("wordBreakProperties", pprint.pformat(wordBreakProperties, indent=4)))

text = "\n".join(text)

path = os.path.join(os.path.dirname(compositor.__file__), "wordBreakProperties.py")

f = open(path, "w")
f.write(text)
f.close()

# ---------------------
# caseConversionMaps.py
# ---------------------

# Simple Casing

lowerToSingleUpper = {}
upperToSingleLower = {}

p = os.path.join(os.path.dirname(__file__), "UnicodeData.txt")

for line in filterLines(p):
    data = line.split(";")
    code = convertCodeToInt(data[0])
    upper = data[12]
    lower = data[13]
    name = data[1]
    if upper:
        lowerToSingleUpper[code] = convertCodeToInt(upper)
    if lower:
        upperToSingleLower[code] = convertCodeToInt(lower)

# Special Casing

p = os.path.join(os.path.dirname(__file__),  "SpecialCasing.txt")

languageTags = {
    "lt" : "LTH",
    "tr" : "TRK",
    "az" : "AZE"
}

specialCasing = {}

for line in filterLines(p):
    data = [i.strip() for i in line.split(";")]
    code = convertCodeToInt(data[0])
    lower = convertCodeToInt(data[1])
    upper = convertCodeToInt(data[3])
    language = None
    context = None
    if line.count(";") == 4:
        name = data[4]
    else:
        language = data[4]
        name = data[5]
        if " " in language:
            language, context = language.split(" ")
        if language == "Final_Sigma":
            context = language
            language = None
        else:
            language = languageTags[language]
    if language not in specialCasing:
        specialCasing[language] = {}
    specialCasing[language][code] = dict(context=context, upper=upper, lower=lower)

# Property List

softDotted = {}

p = os.path.join(os.path.dirname(__file__),  "PropList.txt")

for line in filterLines(p):
    code, prop = [i.strip() for i in line.split(";")]
    prop = prop.split("#")[0].strip()
    s = None
    if prop == "Soft_Dotted":
        s = softDotted
    if s is None:
        continue
    if ".." in code:
        start, end = code.split("..")
        start = convertCodeToInt(start)
        end = convertCodeToInt(end)
        codes = range(start, end+1)
    else:
        codes = [convertCodeToInt(code)]
    for code in codes:
        s[code] = None

# Write the module

path = os.path.join(os.path.dirname(compositor.__file__), "caseConversionMaps.py")

text = [
    "# ------------",
    "# DO NOT EDIT!",
    "# ------------",
    "# This was generated by tools/%s" % os.path.basename(__file__),
    "# Generated on: %s" % (time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())),
    "",
]

toWrite = [
    ("lowerToSingleUpper", lowerToSingleUpper),
    ("upperToSingleLower", upperToSingleLower),
    ("specialCasing", specialCasing),
    ("softDotted", softDotted)
]

for name, d in toWrite:
    s = "%s = %s" % (name, pprint.pformat(d, indent=4))
    text.append(s)
    text.append("")

text = "\n".join(text)

f = open(path, "w")
f.write(text)
f.close()
