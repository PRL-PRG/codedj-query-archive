#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

class Grouping(object):
  Commercial = 1
  Internal = 2
  ResearchEducation = 3
  Education = 4
  Site = 5

class Var(object):

  def __init__(self, d=None):
    self.name = None
    self.type_id = None
    self.device_id = None
    if isinstance(d, dict):
      if 'name' in d:
        self.name = d['name']
      if 'type_id' in d:
        self.type_id = d['type_id']
      if 'device_id' in d:
        self.device_id = d['device_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.device_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Var')
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 2)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    if self.device_id != None:
      oprot.writeFieldBegin('device_id', TType.I32, 3)
      oprot.writeI32(self.device_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class OID(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.storage = None
    self.oidtypeid = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'storage' in d:
        self.storage = d['storage']
      if 'oidtypeid' in d:
        self.oidtypeid = d['oidtypeid']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.storage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.oidtypeid = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OID')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.storage != None:
      oprot.writeFieldBegin('storage', TType.STRING, 3)
      oprot.writeString(self.storage)
      oprot.writeFieldEnd()
    if self.oidtypeid != None:
      oprot.writeFieldBegin('oidtypeid', TType.I32, 4)
      oprot.writeI32(self.oidtypeid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class OIDSet(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.frequency = None
    self.oids = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'frequency' in d:
        self.frequency = d['frequency']
      if 'oids' in d:
        self.oids = d['oids']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.frequency = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.oids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = OID()
            _elem5.read(iprot)
            self.oids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('OIDSet')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.frequency != None:
      oprot.writeFieldBegin('frequency', TType.I32, 3)
      oprot.writeI32(self.frequency)
      oprot.writeFieldEnd()
    if self.oids != None:
      oprot.writeFieldBegin('oids', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.oids))
      for iter6 in self.oids:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Device(object):

  def __init__(self, d=None):
    self.id = None
    self.name = None
    self.begin_time = None
    self.end_time = None
    self.community = None
    self.oidsets = None
    if isinstance(d, dict):
      if 'id' in d:
        self.id = d['id']
      if 'name' in d:
        self.name = d['name']
      if 'begin_time' in d:
        self.begin_time = d['begin_time']
      if 'end_time' in d:
        self.end_time = d['end_time']
      if 'community' in d:
        self.community = d['community']
      if 'oidsets' in d:
        self.oidsets = d['oidsets']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.begin_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.community = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.oidsets = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = OIDSet()
            _elem12.read(iprot)
            self.oidsets.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Device')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.begin_time != None:
      oprot.writeFieldBegin('begin_time', TType.I32, 3)
      oprot.writeI32(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time != None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.community != None:
      oprot.writeFieldBegin('community', TType.STRING, 5)
      oprot.writeString(self.community)
      oprot.writeFieldEnd()
    if self.oidsets != None:
      oprot.writeFieldBegin('oidsets', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.oidsets))
      for iter13 in self.oidsets:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Counter32(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 1
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Counter32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Counter64(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 1
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.value = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Counter64')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I64, 3)
      oprot.writeI64(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class Gauge32(object):

  def __init__(self, d=None):
    self.flags = None
    self.timestamp = None
    self.value = None
    self.version = 1
    self.type_id = 1
    if isinstance(d, dict):
      if 'flags' in d:
        self.flags = d['flags']
      if 'timestamp' in d:
        self.timestamp = d['timestamp']
      if 'value' in d:
        self.value = d['value']
      if 'version' in d:
        self.version = d['version']
      if 'type_id' in d:
        self.type_id = d['type_id']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.flags = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.timestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.version = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.type_id = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('Gauge32')
    if self.flags != None:
      oprot.writeFieldBegin('flags', TType.I32, 1)
      oprot.writeI32(self.flags)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.I32, 2)
      oprot.writeI32(self.timestamp)
      oprot.writeFieldEnd()
    if self.value != None:
      oprot.writeFieldBegin('value', TType.I32, 3)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.BYTE, 4)
      oprot.writeByte(self.version)
      oprot.writeFieldEnd()
    if self.type_id != None:
      oprot.writeFieldBegin('type_id', TType.BYTE, 5)
      oprot.writeByte(self.type_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

class VarList(object):

  def __init__(self, d=None):
    self.counter32 = None
    self.counter64 = None
    self.gauge32 = None
    if isinstance(d, dict):
      if 'counter32' in d:
        self.counter32 = d['counter32']
      if 'counter64' in d:
        self.counter64 = d['counter64']
      if 'gauge32' in d:
        self.gauge32 = d['gauge32']

  def read(self, iprot):
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.counter32 = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = Counter32()
            _elem19.read(iprot)
            self.counter32.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter64 = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = Counter64()
            _elem25.read(iprot)
            self.counter64.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.gauge32 = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = Gauge32()
            _elem31.read(iprot)
            self.gauge32.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    oprot.writeStructBegin('VarList')
    if self.counter32 != None:
      oprot.writeFieldBegin('counter32', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.counter32))
      for iter32 in self.counter32:
        iter32.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.counter64 != None:
      oprot.writeFieldBegin('counter64', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.counter64))
      for iter33 in self.counter64:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.gauge32 != None:
      oprot.writeFieldBegin('gauge32', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.gauge32))
      for iter34 in self.gauge32:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __str__(self): 
    return str(self.__dict__)

  def __repr__(self): 
    return repr(self.__dict__)

