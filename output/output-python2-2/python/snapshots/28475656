from numpy import arange, array, sin, cos, atleast_1d, transpose, dot

curfit_test = {
#inputs:
'y' : array([1.0,1.0,1.4,1.1,1.0,1.0,4.0,9.0,13.0,
         13.4,12.8,13.1,13.0,14.0,13.0,13.5,10.0,
         2.0,3.0,2.5,2.5,2.5,3.0,4.0,3.5]),
'x' : arange(25.0)}

curfit_test_smth = {
#inputs:
'k' : [3, 3, 3, 5, 5, 5],
's' : [1000, 60, 0, 60, 10, 0],
'iopt' : [0, 1, 1, 0, 1, 1],
# results:
'fp' : array([0.265483E+03, 0.600380E+02, 0.000000E+00, 0.600201E+02,
              0.100002E+02, 0.000000E+00]),
'ier' : array([-2, 0, -1, 0, 0, -1]),
'n' : array([8, 11, 29, 13, 21, 31]),
't' : [array([0.0,    0.0,    0.0,    0.0,   24.0,   24.0,   24.0,   24.0]),
     array([0.0,    0.0,    0.0,    0.0,   12.0,   15.0,   18.0,   24.0,
            24.0,   24.0,   24.0]),
     array([0.0,    0.0,    0.0,    0.0,    2.0,    3.0,    4.0,    5.0,
            6.0,    7.0,    8.0,    9.0,   10.0,   11.0,   12.0,   13.0,
            14.0,   15.0,   16.0,   17.0,   18.0,   19.0,   20.0,   21.0,
            22.0,   24.0,   24.0,   24.0,   24.0]),
     array([0.0,    0.0,    0.0,    0.0,    0.0,    0.0,   12.0,   24.0,
            24.0,   24.0,   24.0,   24.0,   24.0]),
     array([0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    6.0,    8.0,
            9.0,   12.0,   14.0,   15.0,   16.0,   17.0,   18.0,   24.0,
            24.0,   24.0,   24.0,   24.0,   24.0]),
     array([0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    3.0,    4.0,
            5.0,    6.0,    7.0,    8.0,    9.0,   10.0,   11.0,   12.0,
            13.0,   14.0,   15.0,   16.0,   17.0,   18.0,   19.0,   20.0,
            21.0,   24.0,   24.0,   24.0,   24.0,   24.0,   24.0])],
'c' : [array([-3.5307,   19.6679,   10.0310,    0.5226]),
      array([1.7450,   -6.1367,   21.0990,   11.1564,   -0.1060,    2.0998,
             4.3288]),
      array([1.0000,    0.4704,    1.8592,    0.9446,    1.1911,    0.2910,
             3.6448,    9.1297,   13.8362,   13.5254,   12.4622,   13.4258,
             12.4346,   14.8358,   12.2222,   14.2755,   11.6757,   -0.9783,
             4.2375,    2.0285,    2.6486,    2.3770,    2.9986,    4.8757,
             3.5000]),
      array([1.9049,   -2.6240,    0.5773,   45.0508,  -10.0998,    2.7788,
             4.2385]),
      array([1.0179,   -1.2191,    9.2752,  -12.6640,   17.3909,   13.0655,
             11.7046,   14.2824,   14.9330,    8.7780,   -2.6436,    5.4611,
             0.5460,    4.9279,    3.5774]),
      array([1.0000,   -0.7624,    3.5842,   -0.4712,    2.4346,   -0.3988,
             3.6292,    9.0283,   14.4832,   13.6084,   11.9251,   14.2042,
             11.3359,   16.1291,   11.2375,   14.3636,  14.1766,   -4.8942,
             6.9048,    0.5376,    4.5146,    0.4259,    4.7049,    4.4036,
             3.5000])],
'sp' : [array([-3.5, -0.8,  1.6,  3.7,  5.5,  7.0,  8.2,  9.2,  9.9, 10.5,
            10.8, 10.8, 10.8, 10.5, 10.1,  9.5,  8.9,  8.1,  7.2,  6.2,
             5.1,  4.0,  2.9,  1.7,  0.5]),
      array([1.7,  0.4,  0.0,  0.6,  1.8,  3.6,  5.6,  7.8, 10.0, 12.0,
             13.5, 14.5, 14.7, 14.0, 12.6, 10.6,  8.2,  5.9,  3.9,  2.6,
             2.1,  2.1,  2.5,  3.3,  4.3]),
      array([1.0,  1.0,  1.4,  1.1,  1.0,  1.0,  4.0,  9.0, 13.0, 13.4,
             12.8, 13.1, 13.0, 14.0, 13.0, 13.5, 10.0,  2.0,  3.0,  2.5,
             2.5,  2.5,  3.0,  4.0,  3.5]),
      array([1.9,  0.5, -0.1,  0.3,  1.5,  3.4,  5.6,  8.0, 10.3, 12.3,
             13.8, 14.5, 14.5, 13.7, 12.3, 10.3,  8.2,  6.0,  4.1,  2.8,
             2.0,  2.0,  2.5,  3.4,  4.2]),
      array([1.0,  0.9,  1.5,  1.2,  0.6,  1.2,  4.2,  8.9, 12.6, 13.6,
             13.2, 12.7, 12.9, 13.7, 14.2, 12.9,  8.6,  4.1,  2.3,  2.2,
             2.4,  2.7,  3.2,  3.7,  3.6]),
      array([1.0,  1.0,  1.4,  1.1,  1.0,  1.0,  4.0,  9.0, 13.0, 13.4,
             12.8, 13.1, 13.0, 14.0, 13.0, 13.5, 10.0,  2.0,  3.0,  2.5,
             2.5,  2.5,  3.0,  4.0,  3.5])]
}

curfit_test_lsq = {
#inputs:
'k' : [3, 5],
# results:
'fp' : array([0.234182E+02, 0.155243E+02]),
'ier' : array([0, 0]),
't' : [array([3.0,    6.0,    9.0,   12.0,   15.0,   18.0,   21.0]),
       array([3.0,    6.0,    9.0,   12.0,   15.0,   18.0,   21.0])],
'c' : [array([0.8505,    2.4795,   -0.9480,    2.8341,   17.4216,   10.3854,
              17.1927,   -2.9343,    5.6395,    2.4292,    3.7180]),
       array([1.0199,   -1.6630,    6.3167,   -4.5892,    1.6163,   22.6478,
              3.5130,   27.5439,  -16.2085,   15.0884,   -5.3102,    8.6487,
              3.4724])], 
'sp' : [array([0.9,  1.5,  1.1,  0.5,  0.8,  2.2,  4.6,  8.1, 11.6, 13.8,
               14.1, 13.3, 12.7, 13.2, 13.7, 12.7,  9.3,  5.0,  1.8,  1.3,
               2.3,  3.4,  3.5,  3.2,  3.7]),
        array([1.0,  0.8,  1.8,  0.9,  0.3,  1.6,  4.7,  8.6, 12.0, 13.7, 
               13.7, 12.8, 12.7, 13.5, 14.2, 12.8,  8.9,  4.4,  1.8,  1.9,
               3.0,  3.0,  2.4,  4.2,  3.5])]
}

def f1(x,d=0):
    if d is None: return "sin"
    if x is None: return "sin(x)"
    if d%4 == 0: return sin(x)
    if d%4 == 1: return cos(x)
    if d%4 == 2: return -sin(x)
    if d%4 == 3: return -cos(x)

def f2(x,y=0,dx=0,dy=0):
        if x is None: return "sin(x+y)"
        d=dx+dy
        if d%4 == 0: return sin(x+y)
        if d%4 == 1: return cos(x+y)
        if d%4 == 2: return -sin(x+y)
        if d%4 == 3: return -cos(x+y)

myasarray = atleast_1d

def norm2(x):
    return dot(transpose(x),x)
def makepairs(x,y):
    x,y=map(myasarray,[x,y])
    xy=array(map(lambda x,y:map(None,len(y)*[x],y),x,len(x)*[y]))
    sh=xy.shape
    xy.shape=sh[0]*sh[1],sh[2]
    return transpose(xy)

# very simple script to test interpolation with regrid and surfit
# based on example data from netlib->dierckx->regrid
 
#from numpy import *
#from scipy.interpolate.fitpack2 import SmoothBivariateSpline, \
                                       #RectBivariateSpline
#import matplotlib
#matplotlib.use('Agg')
#import pylab

## x,y coordinates
#x = linspace(-1.5,1.5,11)
#y = x                        
## data taken from daregr
#z = array([
#[-0.0325, 0.0784, 0.0432, 0.0092, 0.1523, 0.0802, 0.0925, -0.0098, \
                                                    #0.0810, -0.0146, -0.0019],  
#[0.1276, 0.0223, 0.0357, 0.1858, 0.2818, 0.1675, 0.2239, 0.1671, \
                                                    #0.0843, 0.0151, 0.0427],  
#[0.0860, 0.1267, 0.1839, 0.3010, 0.5002, 0.4683, 0.4562, 0.2688, \
                                                    #0.1276, 0.1244, 0.0377],  
#[0.0802, 0.1803, 0.3055, 0.4403, 0.6116, 0.7178, 0.6797, 0.5218, \
                                                    #0.2624, 0.1341, -0.0233],  
#[0.1321, 0.2023, 0.4446, 0.7123, 0.7944, 0.9871, 0.8430, 0.6440, \
                                                    #0.4682, 0.1319, 0.1075],  
#[0.2561, 0.1900, 0.4614, 0.7322, 0.9777, 1.0463, 0.9481, 0.6649, \
                                                    #0.4491, 0.2442, 0.1341],  
#[0.0981, 0.2009, 0.4616, 0.5514, 0.7692, 0.9831, 0.7972, 0.5937, \
                                                    #0.4190, 0.1436, 0.0995], 
#[0.0991, 0.1545, 0.3399, 0.4940, 0.6328, 0.7168, 0.6886, 0.3925, \
                                                    #0.3015, 0.1758, 0.0928],  
#[-0.0197, 0.1479, 0.1225, 0.3254, 0.3847, 0.4767, 0.4324, 0.2827, \
                                                    #0.2287, 0.0999, 0.0785],  
#[0.0032, 0.0917, 0.0246, 0.1780, 0.2394, 0.1765, 0.1642, 0.2081, \
                                                    #0.1049, 0.0493, -0.0502],  
#[0.0101, 0.0297, 0.0468, 0.0221, 0.1074, 0.0433, 0.0626, 0.1436, \
                                                    #0.1092, -0.0232, 0.0132]])

## plot original data
#pylab.subplot(1,3,1)
#pylab.imshow(z)
#pylab.title('orig')

## check regrid
#mrs = RectBivariateSpline(x,y,z)
#zr = mrs(x,y)
#print sum(abs(zr-z))
#pylab.subplot(1,3,2)
#pylab.imshow(zr)
#pylab.title('regrid')

## check surfit
## x increases in columns, y increases along rows
#ym,xm = meshgrid(y,x) # deal with meshgrid badness
#mrs = SmoothBivariateSpline(ravel(xm),ravel(ym),ravel(z),kx=3,ky=3,s=0)
#zr = mrs(x,y)
#print sum(abs(zr-z))
#pylab.subplot(1,3,3)
#pylab.imshow(zr)
#pylab.title('surfit')

#pylab.savefig('intplot.png')
#pylab.close()
