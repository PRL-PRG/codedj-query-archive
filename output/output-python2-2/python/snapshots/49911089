# models.py

# All standard Django fields as well as GeoDjango geometry fields and the GeoManager() can be
# imported from django.contrib.gis.db after adding django.contrib.gis to INSTALLED_APPS
from django.contrib.gis.db import models

# Used to display html 'help text' links within Admin App
from django.utils.safestring import mark_safe

class WorldBorders(models.Model):
    """
    
    A geographic model based on the v3 of the simplified world borders multipolygon shapefile
    from http://thematicmapping.org/downloads/world_borders.php.
    
    Field names, Django types, and max_lengths were autogenerated using the ogrinspect utility with hand
    edits to add alternative field names and help_text.
    
    Imported using the LayerMapping Utility (requires GDAL) called within the load_data.py script provided
    within this sample project.
    
    All fields match the source dataset, an ESRI format shapefile made up of several related files:
    .shp - spatial column that is mapped to the GeoDjango geometry field
    .shx - spatial index
    .dbf. - attribute data containing all data mapped to non-GeoDjango fields (can also be opened in excel and open office)
    .prj -  spatial reference information (see www.spatialreference.org for more info), mapped to the geometry_columns table
      created during syncdb of a model with GeoDjango fields
      
    Recommended: play around with GeoDjango api
    $ python manage.py shell
    >>> from world.models import WorldBorders as W
    >>> aruba = W.objects.get(name__icontains='aruba')
    >>> dir(aruba.geometry)
    ['area', 'boundary', 'buffer', 'centroid', 'clone', 'contains', 'convex_hull', 'coord_seq', 'coords', 'crosses', 'crs', 'difference', 'dims', 'disjoint', 'distance', 'empty', 'envelope', 'equals', 'equals_exact', 'ewkt', 'extent', 'geojson', 'geom_type', 'geom_typeid', 'get_srid', 'has_cs', 'hasz', 'hex', 'intersection', 'intersects', 'json', 'kml', 'length', 'normalize', 'num_coords', 'num_geom', 'num_points', 'ogr', 'overlaps', 'point_on_surface', 'ptr', 'relate', 'relate_pattern', 'ring', 'set_srid', 'simple', 'simplify', 'srid', 'srs', 'sym_difference', 'touches', 'transform', 'tuple', 'union', 'valid', 'within', 'wkb', 'wkt']
    >>> aruba.geometry.geojson
'{ "type": "MultiPolygon", "coordinates": [ [ [ [ -69.882233, 12.411110 ], [ -70.059448, 12.538055 ], [ -70.063065, 12.628611 ], [ -69.882233, 12.411110 ] ] ] ] }'

    """
    name = models.CharField(max_length=50, )
    area = models.IntegerField(help_text="Area of Country in SQ meters",)
    pop2005 = models.IntegerField('Population',help_text="Country wide population in 2005",)
    fips = models.CharField('FIPS Code',max_length=2, help_text=mark_safe('<a href="http://www.census.gov/geo/www/fips/fips.html">Federal Information Processing Standard Code</a>'))
    iso2 = models.CharField('2 Digit ISO', max_length=2, help_text=mark_safe('<a href="http://www.iso.org/">International Organization for Standardization</a>' ))
    iso3 = models.CharField('3 Digit ISO', max_length=3, help_text=mark_safe('<a href="http://www.iso.org/">International Organization for Standardization</a>' ))
    un = models.IntegerField('United Nations Code')
    region = models.IntegerField('Region Code')
    subregion = models.IntegerField('Sub-Region Code')
    
    # These are imported from the source shapefile and are not explicitly GeoDjango Fields
    # They represent the rough middle point of countries and only exist for reference
    lon = models.DecimalField('Longitude',max_digits=8, decimal_places=3, help_text="Longitude stored as decimal", )
    lat = models.DecimalField('Latitude',max_digits=7, decimal_places=3, help_text="Latitude stored as decimal", )
    
    # GeoDjango specific Polygon Field and GeoManager
    geometry = models.MultiPolygonField(srid=4326)
    # GeoManager, a subclass that adds a rich set of geospatial queryset methods
    objects = models.GeoManager()

    class Meta:
        verbose_name_plural = "World Borders"
        
    def __unicode__(self): return self.name



