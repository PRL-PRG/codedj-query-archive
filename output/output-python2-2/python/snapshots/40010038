import os
import re
from socket import *

class Network:
	def __init__(self):
		self.ifaces = {}
		self.nameservers = []
		self.getInterfaces()
		
	def getInterfaces(self):
		devicesPattern = re.compile('[a-z]+[0-9]+')
		
		fp = file('/proc/net/dev', 'r')
		result = fp.readlines()
		fp.close()
		for line in result:
			try:
				device = devicesPattern.search(line).group()
				self.ifaces[device] = self.getDataForInterface(device)
			except AttributeError:
				pass
		
		print "self.ifaces:", self.ifaces
		self.loadNetworkConfig()
		#self.writeNetworkConfig()
		#print ord(' ')
		#for line in result:
#			print ord(line[0])

	# helper function
	def regExpMatch(self, pattern, string):
		if string is None:
			return None
		try:
			return pattern.search(string).group()
		except AttributeError:
			None
	
	# helper function to convert ips from a sring to a list of ints
	def convertIP(self, ip):
		strIP = ip.split('.')
		ip = []
		for x in strIP:
			ip.append(int(x))
		return ip

	def getDataForInterface(self, iface):
		#ipRegexp = '[0-9]{1,2,3}\.[0-9]{1,2,3}\.[0-9]{1,2,3}\.[0-9]{1,2,3}'
		ipRegexp = '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
		ipLinePattern = re.compile('inet addr:' + ipRegexp)
		netmaskLinePattern = re.compile('Mask:' + ipRegexp)
		bcastLinePattern = re.compile('Bcast:' + ipRegexp)
		ipPattern = re.compile(ipRegexp)
		upPattern = re.compile('UP ')
		macPattern = re.compile('[0-9]{2}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2}')
		
		fp = os.popen("ifconfig " + iface)
		result = fp.readlines()
		fp.close()
		data = { 'up': False, 'dhcp': False }
		for line in result:
			ip = self.regExpMatch(ipPattern, self.regExpMatch(ipLinePattern, line))
			netmask = self.regExpMatch(ipPattern, self.regExpMatch(netmaskLinePattern, line))
			bcast = self.regExpMatch(ipPattern, self.regExpMatch(bcastLinePattern, line))
			up = self.regExpMatch(upPattern, line)
			mac = self.regExpMatch(macPattern, line)
			if ip is not None:
				data['ip'] = self.convertIP(ip)
			if netmask is not None:
				data['netmask'] = self.convertIP(netmask)
			if bcast is not None:
				data['bcast'] = self.convertIP(bcast)
			if up is not None:
				data['up'] = True
			if mac is not None:
				data['mac'] = mac
		if not data.has_key('ip'):
			data['dhcp'] = True
			data['ip'] = [192, 168, 1, 2]
			data['netmask'] = [255, 255, 255, 0]
			data['gateway'] = [192, 168, 1, 1]
		
		fp = os.popen("route -n | grep  " + iface)
		result = fp.readlines()
		fp.close()				
		for line in result:
			print line[0:7]
			if line[0:7] == "0.0.0.0":
				gateway = self.regExpMatch(ipPattern, line[16:31])
				if gateway is not None:
					data['gateway'] = self.convertIP(gateway)
		return data

	def writeNetworkConfig(self):
		fp = file('/etc/network/interfaces', 'w')
		fp.write("# automatically generated by enigma 2\n# do NOT change manually!\n\n")
		fp.write("auto lo\n")
		fp.write("iface lo inet loopback\n\n")
		
		for ifacename, iface in self.ifaces.items():
			if iface['up'] == True:
				fp.write("auto " + ifacename + "\n")
			if iface['dhcp'] == True:
				fp.write("iface "+ ifacename +" inet dhcp\n")
			else:
				fp.write("iface "+ ifacename +" inet static\n")
				if iface.has_key('ip'):
					print tuple(iface['ip'])
					fp.write("	address %d.%d.%d.%d\n" % tuple(iface['ip']))
					fp.write("	netmask %d.%d.%d.%d\n" % tuple(iface['netmask']))
					if iface.has_key('gateway'):
						fp.write("	gateway %d.%d.%d.%d\n" % tuple(iface['gateway']))
						
			if iface.has_key("configStrings"):
				fp.write("\n" + iface["configStrings"] + "\n")
			fp.write("\n")
		fp.close()
		self.writeNameserverConfig()

		
	def writeNameserverConfig(self):
		fp = file('/etc/resolv.conf', 'w')
		for nameserver in self.nameservers:
			fp.write("nameserver %d.%d.%d.%d\n" % tuple(nameserver))
		fp.close()
		

	def loadNetworkConfig(self):
		self.loadNameserverConfig()
		
		interfaces = []
		# parse the interfaces-file
		try:
			fp = file('/etc/network/interfaces', 'r')
			interfaces = fp.readlines()
			fp.close()
		except:
			print "[Network.py] interfaces - opening failed"
			
		ifaces = {}
		currif = ""
		for i in interfaces:
			split = i.strip().split(' ')
			if (split[0] == "iface"):
				currif = split[1]
				ifaces[currif] = {}
				if (len(split) == 4 and split[3] == "dhcp"):
					ifaces[currif]["dhcp"] = True
				else:
					ifaces[currif]["dhcp"] = False
			if (currif != ""):
				if (split[0] == "address"):
					ifaces[currif]["address"] = map(int, split[1].split('.'))
				if (split[0] == "netmask"):
					ifaces[currif]["netmask"] = map(int, split[1].split('.'))
				if (split[0] == "gateway"):
					ifaces[currif]["gateway"] = map(int, split[1].split('.'))									
		
		print "read interfaces:", ifaces
		for ifacename, iface in ifaces.items():
			if self.ifaces.has_key(ifacename):
				self.ifaces[ifacename]["dhcp"] = iface["dhcp"]
		
		print "self.ifaces after loading:", self.ifaces

	def loadNameserverConfig(self):
		ipRegexp = "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
		nameserverPattern = re.compile("nameserver +" + ipRegexp)
		ipPattern = re.compile(ipRegexp)
		
		resolv = []
		try:
			fp = file('/etc/resolv.conf', 'r')
			resolv = fp.readlines()
			fp.close()
			self.nameservers = []
		except:
			print "[Network.py] resolv.conf - opening failed"
		
		for line in resolv:
			if self.regExpMatch(nameserverPattern, line) is not None:
				ip = self.regExpMatch(ipPattern, line)
				if ip is not None:
					self.nameservers.append(self.convertIP(ip))
					
		print "nameservers:", self.nameservers		

	def deactivateNetworkConfig(self):
		for iface in self.ifaces.keys():
			os.system("ip addr flush " + iface)
		os.system("/etc/init.d/networking stop")
		os.system("killall -9 udhcpc")
		os.system("rm /var/run/udhcpc*")

	def activateNetworkConfig(self):
		os.system("/etc/init.d/networking start")
		
	def getNumberOfAdapters(self):
		return len(self.ifaces)

	def getFriendlyAdapterName(self, x):
		# maybe this needs to be replaced by an external list.
		friendlyNames = {
			"eth0": _("Integrated Ethernet"),
			"wlan0": _("Wireless")
		}
		return friendlyNames.get(x, x) # when we have no friendly name, use adapter name

	def getAdapterName(self, iface):
		return iface
	
	def getAdapterList(self):
		return self.ifaces.keys()
	
	def getAdapterAttribute(self, iface, attribute):
		if self.ifaces.has_key(iface):
			if self.ifaces[iface].has_key(attribute):
				return self.ifaces[iface][attribute]
		return None
	
	def setAdapterAttribute(self, iface, attribute, value):
		print "setting for adapter", iface, "attribute", attribute, " to value", value
		if self.ifaces.has_key(iface):
			self.ifaces[iface][attribute] = value

	def removeAdapterAttribute(self, iface, attribute):
		if self.ifaces.has_key(iface):
			if self.ifaces[iface].has_key(attribute):
				del self.ifaces[iface][attribute]
				
	def getNameserverList(self):
		return self.nameservers
	
	def clearNameservers(self):
		self.nameservers = []
	
	def addNameserver(self, nameserver):
		if nameserver not in self.nameservers:
			self.nameservers.append(nameserver)
		
	def removeNameserver(self, nameserver):
		if nameserver in self.nameservers:
			self.nameservers.remove(nameserver)
			
	def changeNameserver(self, oldnameserver, newnameserver):
		if oldnameserver in self.nameservers:
			for i in range(len(self.nameservers)):
				if self.nameservers[i] == oldnameserver:
					self.nameservers[i] = newnameserver

iNetwork = Network()

def InitNetwork():
	pass
