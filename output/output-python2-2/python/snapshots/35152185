'''
          THIS IS A GENERATED FILE DO NOT EDIT

This file tests method calling to and from Objective-C. See testbndl.m for
the Objective-C helper classes used in theses tests.

'''
import unittest
import objc
from objc import YES, NO, nil
import sys

NSArray = objc.runtime.NSArray

# First make sure that the pass-by-reference methods have the correct signature
set_signature = objc.set_signature_for_selector
set_signature("PyObjC_TestClass1", "BOOLInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass1", "BOOLOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass1", "BOOLInArg:", "@@:n^c")
set_signature("PyObjC_TestClass2", "callBOOLInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass2", "callBOOLOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass2", "callBOOLInArg:", "@@:n^c")
set_signature("PyObjC_TestClass2", "invokeBOOLInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass2", "invokeBOOLOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass2", "invokeBOOLInArg:", "@@:n^c")
set_signature("PyObjC_TestClass1", "charInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass1", "charOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass1", "charInArg:", "@@:n^c")
set_signature("PyObjC_TestClass2", "callcharInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass2", "callcharOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass2", "callcharInArg:", "@@:n^c")
set_signature("PyObjC_TestClass2", "invokecharInOutArg:", "@@:N^c")
set_signature("PyObjC_TestClass2", "invokecharOutArg:", "v@:o^c")
set_signature("PyObjC_TestClass2", "invokecharInArg:", "@@:n^c")
set_signature("PyObjC_TestClass1", "signedshortInOutArg:", "@@:N^s")
set_signature("PyObjC_TestClass1", "signedshortOutArg:", "v@:o^s")
set_signature("PyObjC_TestClass1", "signedshortInArg:", "@@:n^s")
set_signature("PyObjC_TestClass2", "callsignedshortInOutArg:", "@@:N^s")
set_signature("PyObjC_TestClass2", "callsignedshortOutArg:", "v@:o^s")
set_signature("PyObjC_TestClass2", "callsignedshortInArg:", "@@:n^s")
set_signature("PyObjC_TestClass2", "invokesignedshortInOutArg:", "@@:N^s")
set_signature("PyObjC_TestClass2", "invokesignedshortOutArg:", "v@:o^s")
set_signature("PyObjC_TestClass2", "invokesignedshortInArg:", "@@:n^s")
set_signature("PyObjC_TestClass1", "signedintInOutArg:", "@@:N^i")
set_signature("PyObjC_TestClass1", "signedintOutArg:", "v@:o^i")
set_signature("PyObjC_TestClass1", "signedintInArg:", "@@:n^i")
set_signature("PyObjC_TestClass2", "callsignedintInOutArg:", "@@:N^i")
set_signature("PyObjC_TestClass2", "callsignedintOutArg:", "v@:o^i")
set_signature("PyObjC_TestClass2", "callsignedintInArg:", "@@:n^i")
set_signature("PyObjC_TestClass2", "invokesignedintInOutArg:", "@@:N^i")
set_signature("PyObjC_TestClass2", "invokesignedintOutArg:", "v@:o^i")
set_signature("PyObjC_TestClass2", "invokesignedintInArg:", "@@:n^i")
set_signature("PyObjC_TestClass1", "signedlongInOutArg:", "@@:N^l")
set_signature("PyObjC_TestClass1", "signedlongOutArg:", "v@:o^l")
set_signature("PyObjC_TestClass1", "signedlongInArg:", "@@:n^l")
set_signature("PyObjC_TestClass2", "callsignedlongInOutArg:", "@@:N^l")
set_signature("PyObjC_TestClass2", "callsignedlongOutArg:", "v@:o^l")
set_signature("PyObjC_TestClass2", "callsignedlongInArg:", "@@:n^l")
set_signature("PyObjC_TestClass2", "invokesignedlongInOutArg:", "@@:N^l")
set_signature("PyObjC_TestClass2", "invokesignedlongOutArg:", "v@:o^l")
set_signature("PyObjC_TestClass2", "invokesignedlongInArg:", "@@:n^l")
set_signature("PyObjC_TestClass1", "signedlonglongInOutArg:", "@@:N^q")
set_signature("PyObjC_TestClass1", "signedlonglongOutArg:", "v@:o^q")
set_signature("PyObjC_TestClass1", "signedlonglongInArg:", "@@:n^q")
set_signature("PyObjC_TestClass2", "callsignedlonglongInOutArg:", "@@:N^q")
set_signature("PyObjC_TestClass2", "callsignedlonglongOutArg:", "v@:o^q")
set_signature("PyObjC_TestClass2", "callsignedlonglongInArg:", "@@:n^q")
set_signature("PyObjC_TestClass2", "invokesignedlonglongInOutArg:", "@@:N^q")
set_signature("PyObjC_TestClass2", "invokesignedlonglongOutArg:", "v@:o^q")
set_signature("PyObjC_TestClass2", "invokesignedlonglongInArg:", "@@:n^q")
set_signature("PyObjC_TestClass1", "unsignedcharInOutArg:", "@@:N^C")
set_signature("PyObjC_TestClass1", "unsignedcharOutArg:", "v@:o^C")
set_signature("PyObjC_TestClass1", "unsignedcharInArg:", "@@:n^C")
set_signature("PyObjC_TestClass2", "callunsignedcharInOutArg:", "@@:N^C")
set_signature("PyObjC_TestClass2", "callunsignedcharOutArg:", "v@:o^C")
set_signature("PyObjC_TestClass2", "callunsignedcharInArg:", "@@:n^C")
set_signature("PyObjC_TestClass2", "invokeunsignedcharInOutArg:", "@@:N^C")
set_signature("PyObjC_TestClass2", "invokeunsignedcharOutArg:", "v@:o^C")
set_signature("PyObjC_TestClass2", "invokeunsignedcharInArg:", "@@:n^C")
set_signature("PyObjC_TestClass1", "unsignedshortInOutArg:", "@@:N^S")
set_signature("PyObjC_TestClass1", "unsignedshortOutArg:", "v@:o^S")
set_signature("PyObjC_TestClass1", "unsignedshortInArg:", "@@:n^S")
set_signature("PyObjC_TestClass2", "callunsignedshortInOutArg:", "@@:N^S")
set_signature("PyObjC_TestClass2", "callunsignedshortOutArg:", "v@:o^S")
set_signature("PyObjC_TestClass2", "callunsignedshortInArg:", "@@:n^S")
set_signature("PyObjC_TestClass2", "invokeunsignedshortInOutArg:", "@@:N^S")
set_signature("PyObjC_TestClass2", "invokeunsignedshortOutArg:", "v@:o^S")
set_signature("PyObjC_TestClass2", "invokeunsignedshortInArg:", "@@:n^S")
set_signature("PyObjC_TestClass1", "unsignedintInOutArg:", "@@:N^I")
set_signature("PyObjC_TestClass1", "unsignedintOutArg:", "v@:o^I")
set_signature("PyObjC_TestClass1", "unsignedintInArg:", "@@:n^I")
set_signature("PyObjC_TestClass2", "callunsignedintInOutArg:", "@@:N^I")
set_signature("PyObjC_TestClass2", "callunsignedintOutArg:", "v@:o^I")
set_signature("PyObjC_TestClass2", "callunsignedintInArg:", "@@:n^I")
set_signature("PyObjC_TestClass2", "invokeunsignedintInOutArg:", "@@:N^I")
set_signature("PyObjC_TestClass2", "invokeunsignedintOutArg:", "v@:o^I")
set_signature("PyObjC_TestClass2", "invokeunsignedintInArg:", "@@:n^I")
set_signature("PyObjC_TestClass1", "unsignedlongInOutArg:", "@@:N^L")
set_signature("PyObjC_TestClass1", "unsignedlongOutArg:", "v@:o^L")
set_signature("PyObjC_TestClass1", "unsignedlongInArg:", "@@:n^L")
set_signature("PyObjC_TestClass2", "callunsignedlongInOutArg:", "@@:N^L")
set_signature("PyObjC_TestClass2", "callunsignedlongOutArg:", "v@:o^L")
set_signature("PyObjC_TestClass2", "callunsignedlongInArg:", "@@:n^L")
set_signature("PyObjC_TestClass2", "invokeunsignedlongInOutArg:", "@@:N^L")
set_signature("PyObjC_TestClass2", "invokeunsignedlongOutArg:", "v@:o^L")
set_signature("PyObjC_TestClass2", "invokeunsignedlongInArg:", "@@:n^L")
set_signature("PyObjC_TestClass1", "unsignedlonglongInOutArg:", "@@:N^Q")
set_signature("PyObjC_TestClass1", "unsignedlonglongOutArg:", "v@:o^Q")
set_signature("PyObjC_TestClass1", "unsignedlonglongInArg:", "@@:n^Q")
set_signature("PyObjC_TestClass2", "callunsignedlonglongInOutArg:", "@@:N^Q")
set_signature("PyObjC_TestClass2", "callunsignedlonglongOutArg:", "v@:o^Q")
set_signature("PyObjC_TestClass2", "callunsignedlonglongInArg:", "@@:n^Q")
set_signature("PyObjC_TestClass2", "invokeunsignedlonglongInOutArg:", "@@:N^Q")
set_signature("PyObjC_TestClass2", "invokeunsignedlonglongOutArg:", "v@:o^Q")
set_signature("PyObjC_TestClass2", "invokeunsignedlonglongInArg:", "@@:n^Q")
set_signature("PyObjC_TestClass1", "floatInOutArg:", "@@:N^f")
set_signature("PyObjC_TestClass1", "floatOutArg:", "v@:o^f")
set_signature("PyObjC_TestClass1", "floatInArg:", "@@:n^f")
set_signature("PyObjC_TestClass2", "callfloatInOutArg:", "@@:N^f")
set_signature("PyObjC_TestClass2", "callfloatOutArg:", "v@:o^f")
set_signature("PyObjC_TestClass2", "callfloatInArg:", "@@:n^f")
set_signature("PyObjC_TestClass2", "invokefloatInOutArg:", "@@:N^f")
set_signature("PyObjC_TestClass2", "invokefloatOutArg:", "v@:o^f")
set_signature("PyObjC_TestClass2", "invokefloatInArg:", "@@:n^f")
set_signature("PyObjC_TestClass1", "doubleInOutArg:", "@@:N^d")
set_signature("PyObjC_TestClass1", "doubleOutArg:", "v@:o^d")
set_signature("PyObjC_TestClass1", "doubleInArg:", "@@:n^d")
set_signature("PyObjC_TestClass2", "calldoubleInOutArg:", "@@:N^d")
set_signature("PyObjC_TestClass2", "calldoubleOutArg:", "v@:o^d")
set_signature("PyObjC_TestClass2", "calldoubleInArg:", "@@:n^d")
set_signature("PyObjC_TestClass2", "invokedoubleInOutArg:", "@@:N^d")
set_signature("PyObjC_TestClass2", "invokedoubleOutArg:", "v@:o^d")
set_signature("PyObjC_TestClass2", "invokedoubleInArg:", "@@:n^d")
set_signature("PyObjC_TestClass1", "idInOutArg:", "@@:N^@")
set_signature("PyObjC_TestClass1", "idOutArg:", "v@:o^@")
set_signature("PyObjC_TestClass1", "idInArg:", "@@:n^@")
set_signature("PyObjC_TestClass2", "callidInOutArg:", "@@:N^@")
set_signature("PyObjC_TestClass2", "callidOutArg:", "v@:o^@")
set_signature("PyObjC_TestClass2", "callidInArg:", "@@:n^@")
set_signature("PyObjC_TestClass2", "invokeidInOutArg:", "@@:N^@")
set_signature("PyObjC_TestClass2", "invokeidOutArg:", "v@:o^@")
set_signature("PyObjC_TestClass2", "invokeidInArg:", "@@:n^@")
set_signature("PyObjC_TestClass1", "charPtrInOutArg:", "@@:N^*")
set_signature("PyObjC_TestClass1", "charPtrOutArg:", "v@:o^*")
set_signature("PyObjC_TestClass1", "charPtrInArg:", "@@:n^*")
set_signature("PyObjC_TestClass2", "callcharPtrInOutArg:", "@@:N^*")
set_signature("PyObjC_TestClass2", "callcharPtrOutArg:", "v@:o^*")
set_signature("PyObjC_TestClass2", "callcharPtrInArg:", "@@:n^*")
set_signature("PyObjC_TestClass2", "invokecharPtrInOutArg:", "@@:N^*")
set_signature("PyObjC_TestClass2", "invokecharPtrOutArg:", "v@:o^*")
set_signature("PyObjC_TestClass2", "invokecharPtrInArg:", "@@:n^*")
set_signature("PyObjC_TestClass1", "NSPointInOutArg:", "@@:N^{_NSPoint=ff}")
set_signature("PyObjC_TestClass1", "NSPointOutArg:", "v@:o^{_NSPoint=ff}")
set_signature("PyObjC_TestClass1", "NSPointInArg:", "@@:n^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "callNSPointInOutArg:", "@@:N^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "callNSPointOutArg:", "v@:o^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "callNSPointInArg:", "@@:n^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "invokeNSPointInOutArg:", "@@:N^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "invokeNSPointOutArg:", "v@:o^{_NSPoint=ff}")
set_signature("PyObjC_TestClass2", "invokeNSPointInArg:", "@@:n^{_NSPoint=ff}")
set_signature("PyObjC_TestClass1", "NSRectInOutArg:", "@@:N^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass1", "NSRectOutArg:", "v@:o^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass1", "NSRectInArg:", "@@:n^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "callNSRectInOutArg:", "@@:N^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "callNSRectOutArg:", "v@:o^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "callNSRectInArg:", "@@:n^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "invokeNSRectInOutArg:", "@@:N^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "invokeNSRectOutArg:", "v@:o^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")
set_signature("PyObjC_TestClass2", "invokeNSRectInArg:", "@@:n^{_NSRect={_NSPoint=ff}{_NSSize=ff}}")

from objc.test.testbndl2 import *

if hasattr(unittest.TestCase, 'assertAlmostEquals'):
    TestCase = unittest.TestCase
else:
    # We use assertAlmostEquals for comparing floats, python 2.2 doesn't
    # have this method in unittest.TestCase.

    class TestCase (unittest.TestCase):
        def assertAlmostEqual(self, val1, val2, message=None):
            self.assert_ (abs (val1 - val2) < 0.00001, message)

class PyToObjC (unittest.TestCase):
	# Test calling Objective-C from Python
	# Simple returns from class methods

	def testClsBOOLResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.BOOLClsMethod(), YES)
		self.assertEquals(PyObjC_TestClass1.BOOLClsMethod(), NO)


	def testClscharResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.charClsMethod(), -128)
		self.assertEquals(PyObjC_TestClass1.charClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.charClsMethod(), 127)


	def testClssignedshortResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.signedshortClsMethod(), -(1<<14))
		self.assertEquals(PyObjC_TestClass1.signedshortClsMethod(), -42)
		self.assertEquals(PyObjC_TestClass1.signedshortClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.signedshortClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.signedshortClsMethod(), 1 << 14)


	def testClssignedintResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.signedintClsMethod(), -(1<<30))
		self.assertEquals(PyObjC_TestClass1.signedintClsMethod(), -42)
		self.assertEquals(PyObjC_TestClass1.signedintClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.signedintClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.signedintClsMethod(), 1 << 30)


	def testClssignedlongResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.signedlongClsMethod(), -(1<<30))
		self.assertEquals(PyObjC_TestClass1.signedlongClsMethod(), -42)
		self.assertEquals(PyObjC_TestClass1.signedlongClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.signedlongClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.signedlongClsMethod(), 1 << 30)


	def testClssignedlonglongResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.signedlonglongClsMethod(), -(1L << 60))
		self.assertEquals(PyObjC_TestClass1.signedlonglongClsMethod(), -42)
		self.assertEquals(PyObjC_TestClass1.signedlonglongClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.signedlonglongClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.signedlonglongClsMethod(), 1L << 60)


	def testClsunsignedcharResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.unsignedcharClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.unsignedcharClsMethod(), 128)
		self.assertEquals(PyObjC_TestClass1.unsignedcharClsMethod(), 255)


	def testClsunsignedshortResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.unsignedshortClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.unsignedshortClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.unsignedshortClsMethod(), 1<<14)


	def testClsunsignedintResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.unsignedintClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.unsignedintClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.unsignedintClsMethod(), 1 << 30)


	def testClsunsignedlongResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.unsignedlongClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.unsignedlongClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.unsignedlongClsMethod(), 1L << 30)


	def testClsunsignedlonglongResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.unsignedlonglongClsMethod(), 0)
		self.assertEquals(PyObjC_TestClass1.unsignedlonglongClsMethod(), 42)
		self.assertEquals(PyObjC_TestClass1.unsignedlonglongClsMethod(), 1L << 62)


	def testClsfloatResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertAlmostEquals(PyObjC_TestClass1.floatClsMethod(), 0.128)
		self.assertAlmostEquals(PyObjC_TestClass1.floatClsMethod(), 1.0)
		self.assertAlmostEquals(PyObjC_TestClass1.floatClsMethod(), 42.0)
		self.assertAlmostEquals(PyObjC_TestClass1.floatClsMethod(), 1e10)


	def testClsdoubleResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertAlmostEquals(PyObjC_TestClass1.doubleClsMethod(), 0.128)
		self.assertAlmostEquals(PyObjC_TestClass1.doubleClsMethod(), 1.0)
		self.assertAlmostEquals(PyObjC_TestClass1.doubleClsMethod(), 42.0)
		self.assertAlmostEquals(PyObjC_TestClass1.doubleClsMethod(), 1e10)


	def testClsidResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.idClsMethod(), nil)


	def testClscharPtrResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.charPtrClsMethod(), "hello")
		self.assertEquals(PyObjC_TestClass1.charPtrClsMethod(), "world")
		self.assertEquals(PyObjC_TestClass1.charPtrClsMethod(), "foobar")


	def testClsNSPointResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.NSPointClsMethod(), (1, 2))
		self.assertEquals(PyObjC_TestClass1.NSPointClsMethod(), (3, 4))


	def testClsNSRectResult(self):
		PyObjC_TestClass1.clsReset()
		self.assertEquals(PyObjC_TestClass1.NSRectClsMethod(), ((1, 2), (3, 4)))
		self.assertEquals(PyObjC_TestClass1.NSRectClsMethod(), ((7, 8), (9, 10)))


	# Simple returns from instance methods

	def testBOOLResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.BOOLMethod(), YES)
		self.assertEquals(o.BOOLMethod(), NO)


	def testcharResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.charMethod(), -128)
		self.assertEquals(o.charMethod(), 0)
		self.assertEquals(o.charMethod(), 127)


	def testsignedshortResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.signedshortMethod(), -(1<<14))
		self.assertEquals(o.signedshortMethod(), -42)
		self.assertEquals(o.signedshortMethod(), 0)
		self.assertEquals(o.signedshortMethod(), 42)
		self.assertEquals(o.signedshortMethod(), 1 << 14)


	def testsignedintResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.signedintMethod(), -(1<<30))
		self.assertEquals(o.signedintMethod(), -42)
		self.assertEquals(o.signedintMethod(), 0)
		self.assertEquals(o.signedintMethod(), 42)
		self.assertEquals(o.signedintMethod(), 1 << 30)


	def testsignedlongResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.signedlongMethod(), -(1<<30))
		self.assertEquals(o.signedlongMethod(), -42)
		self.assertEquals(o.signedlongMethod(), 0)
		self.assertEquals(o.signedlongMethod(), 42)
		self.assertEquals(o.signedlongMethod(), 1 << 30)


	def testsignedlonglongResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.signedlonglongMethod(), -(1L << 60))
		self.assertEquals(o.signedlonglongMethod(), -42)
		self.assertEquals(o.signedlonglongMethod(), 0)
		self.assertEquals(o.signedlonglongMethod(), 42)
		self.assertEquals(o.signedlonglongMethod(), 1L << 60)


	def testunsignedcharResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.unsignedcharMethod(), 0)
		self.assertEquals(o.unsignedcharMethod(), 128)
		self.assertEquals(o.unsignedcharMethod(), 255)


	def testunsignedshortResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.unsignedshortMethod(), 0)
		self.assertEquals(o.unsignedshortMethod(), 42)
		self.assertEquals(o.unsignedshortMethod(), 1<<14)


	def testunsignedintResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.unsignedintMethod(), 0)
		self.assertEquals(o.unsignedintMethod(), 42)
		self.assertEquals(o.unsignedintMethod(), 1 << 30)


	def testunsignedlongResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.unsignedlongMethod(), 0)
		self.assertEquals(o.unsignedlongMethod(), 42)
		self.assertEquals(o.unsignedlongMethod(), 1L << 30)


	def testunsignedlonglongResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.unsignedlonglongMethod(), 0)
		self.assertEquals(o.unsignedlonglongMethod(), 42)
		self.assertEquals(o.unsignedlonglongMethod(), 1L << 62)


	def testfloatResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertAlmostEquals(o.floatMethod(), 0.128)
		self.assertAlmostEquals(o.floatMethod(), 1.0)
		self.assertAlmostEquals(o.floatMethod(), 42.0)
		self.assertAlmostEquals(o.floatMethod(), 1e10)


	def testdoubleResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertAlmostEquals(o.doubleMethod(), 0.128)
		self.assertAlmostEquals(o.doubleMethod(), 1.0)
		self.assertAlmostEquals(o.doubleMethod(), 42.0)
		self.assertAlmostEquals(o.doubleMethod(), 1e10)


	def testidResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.idMethod(), nil)


	def testcharPtrResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.charPtrMethod(), "hello")
		self.assertEquals(o.charPtrMethod(), "world")
		self.assertEquals(o.charPtrMethod(), "foobar")


	def testNSPointResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.NSPointMethod(), (1, 2))
		self.assertEquals(o.NSPointMethod(), (3, 4))


	def testNSRectResult(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		self.assertEquals(o.NSRectMethod(), ((1, 2), (3, 4)))
		self.assertEquals(o.NSRectMethod(), ((7, 8), (9, 10)))


	# One argument

	def testBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_(YES)
		self.assertEquals(r, YES)
		r = o.BOOLArg_(NO)
		self.assertEquals(r, NO)


	def testcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_(-128)
		self.assertEquals(r, -128)
		r = o.charArg_(0)
		self.assertEquals(r, 0)
		r = o.charArg_(127)
		self.assertEquals(r, 127)


	def testsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_(-(1<<14))
		self.assertEquals(r, -(1<<14))
		r = o.signedshortArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedshortArg_(0)
		self.assertEquals(r, 0)
		r = o.signedshortArg_(42)
		self.assertEquals(r, 42)
		r = o.signedshortArg_(1 << 14)
		self.assertEquals(r, 1 << 14)


	def testsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_(-(1<<30))
		self.assertEquals(r, -(1<<30))
		r = o.signedintArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedintArg_(0)
		self.assertEquals(r, 0)
		r = o.signedintArg_(42)
		self.assertEquals(r, 42)
		r = o.signedintArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_(-(1<<30))
		self.assertEquals(r, -(1<<30))
		r = o.signedlongArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedlongArg_(0)
		self.assertEquals(r, 0)
		r = o.signedlongArg_(42)
		self.assertEquals(r, 42)
		r = o.signedlongArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_(-(1L << 60))
		self.assertEquals(r, -(1L << 60))
		r = o.signedlonglongArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedlonglongArg_(0)
		self.assertEquals(r, 0)
		r = o.signedlonglongArg_(42)
		self.assertEquals(r, 42)
		r = o.signedlonglongArg_(1L << 60)
		self.assertEquals(r, 1L << 60)


	def testunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedcharArg_(128)
		self.assertEquals(r, 128)
		r = o.unsignedcharArg_(255)
		self.assertEquals(r, 255)


	def testunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedshortArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedshortArg_(1<<14)
		self.assertEquals(r, 1<<14)


	def testunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedintArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedintArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedlongArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedlongArg_(1L << 30)
		self.assertEquals(r, 1L << 30)


	def testunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedlonglongArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedlonglongArg_(1L << 62)
		self.assertEquals(r, 1L << 62)


	def testfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_(0.128)
		self.assertAlmostEquals(r, 0.128)
		r = o.floatArg_(1.0)
		self.assertAlmostEquals(r, 1.0)
		r = o.floatArg_(42.0)
		self.assertAlmostEquals(r, 42.0)
		r = o.floatArg_(1e10)
		self.assertAlmostEquals(r, 1e10)


	def testdoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_(0.128)
		self.assertAlmostEquals(r, 0.128)
		r = o.doubleArg_(1.0)
		self.assertAlmostEquals(r, 1.0)
		r = o.doubleArg_(42.0)
		self.assertAlmostEquals(r, 42.0)
		r = o.doubleArg_(1e10)
		self.assertAlmostEquals(r, 1e10)


	def testidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_(nil)
		self.assertEquals(r, nil)


	def testcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_("hello")
		self.assertEquals(r, "hello")
		r = o.charPtrArg_("world")
		self.assertEquals(r, "world")
		r = o.charPtrArg_("foobar")
		self.assertEquals(r, "foobar")


	def testNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_((1, 2))
		self.assertEquals(r, (1, 2))
		r = o.NSPointArg_((3, 4))
		self.assertEquals(r, (3, 4))


	def testNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_(((1, 2), (3, 4)))
		self.assertEquals(r, ((1, 2), (3, 4)))
		r = o.NSRectArg_(((7, 8), (9, 10)))
		self.assertEquals(r, ((7, 8), (9, 10)))


	# Two arguments

	def testBOOLAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andBOOLArg_(YES, YES)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], YES)
		r = o.BOOLArg_andBOOLArg_(YES, NO)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], NO)
		r = o.BOOLArg_andBOOLArg_(NO, YES)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], YES)
		r = o.BOOLArg_andBOOLArg_(NO, NO)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], NO)


	def testBOOLAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andcharArg_(YES, -128)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -128)
		r = o.BOOLArg_andcharArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andcharArg_(YES, 127)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 127)
		r = o.BOOLArg_andcharArg_(NO, -128)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -128)
		r = o.BOOLArg_andcharArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andcharArg_(NO, 127)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 127)


	def testBOOLAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andsignedshortArg_(YES, -(1<<14))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -(1<<14))
		r = o.BOOLArg_andsignedshortArg_(YES, -42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedshortArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedshortArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedshortArg_(YES, 1 << 14)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1 << 14)
		r = o.BOOLArg_andsignedshortArg_(NO, -(1<<14))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -(1<<14))
		r = o.BOOLArg_andsignedshortArg_(NO, -42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedshortArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedshortArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedshortArg_(NO, 1 << 14)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1 << 14)


	def testBOOLAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andsignedintArg_(YES, -(1<<30))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -(1<<30))
		r = o.BOOLArg_andsignedintArg_(YES, -42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedintArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedintArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedintArg_(YES, 1 << 30)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1 << 30)
		r = o.BOOLArg_andsignedintArg_(NO, -(1<<30))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -(1<<30))
		r = o.BOOLArg_andsignedintArg_(NO, -42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedintArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedintArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedintArg_(NO, 1 << 30)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1 << 30)


	def testBOOLAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andsignedlongArg_(YES, -(1<<30))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -(1<<30))
		r = o.BOOLArg_andsignedlongArg_(YES, -42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedlongArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedlongArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedlongArg_(YES, 1 << 30)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1 << 30)
		r = o.BOOLArg_andsignedlongArg_(NO, -(1<<30))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -(1<<30))
		r = o.BOOLArg_andsignedlongArg_(NO, -42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedlongArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedlongArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedlongArg_(NO, 1 << 30)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1 << 30)


	def testBOOLAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andsignedlonglongArg_(YES, -(1L << 60))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -(1L << 60))
		r = o.BOOLArg_andsignedlonglongArg_(YES, -42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedlonglongArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedlonglongArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedlonglongArg_(YES, 1L << 60)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1L << 60)
		r = o.BOOLArg_andsignedlonglongArg_(NO, -(1L << 60))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -(1L << 60))
		r = o.BOOLArg_andsignedlonglongArg_(NO, -42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], -42)
		r = o.BOOLArg_andsignedlonglongArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andsignedlonglongArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andsignedlonglongArg_(NO, 1L << 60)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1L << 60)


	def testBOOLAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andunsignedcharArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedcharArg_(YES, 128)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 128)
		r = o.BOOLArg_andunsignedcharArg_(YES, 255)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 255)
		r = o.BOOLArg_andunsignedcharArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedcharArg_(NO, 128)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 128)
		r = o.BOOLArg_andunsignedcharArg_(NO, 255)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 255)


	def testBOOLAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andunsignedshortArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedshortArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedshortArg_(YES, 1<<14)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1<<14)
		r = o.BOOLArg_andunsignedshortArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedshortArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedshortArg_(NO, 1<<14)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1<<14)


	def testBOOLAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andunsignedintArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedintArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedintArg_(YES, 1 << 30)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1 << 30)
		r = o.BOOLArg_andunsignedintArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedintArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedintArg_(NO, 1 << 30)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1 << 30)


	def testBOOLAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andunsignedlongArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedlongArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedlongArg_(YES, 1L << 30)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1L << 30)
		r = o.BOOLArg_andunsignedlongArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedlongArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedlongArg_(NO, 1L << 30)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1L << 30)


	def testBOOLAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andunsignedlonglongArg_(YES, 0)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedlonglongArg_(YES, 42)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedlonglongArg_(YES, 1L << 62)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], 1L << 62)
		r = o.BOOLArg_andunsignedlonglongArg_(NO, 0)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 0)
		r = o.BOOLArg_andunsignedlonglongArg_(NO, 42)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 42)
		r = o.BOOLArg_andunsignedlonglongArg_(NO, 1L << 62)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], 1L << 62)


	def testBOOLAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andfloatArg_(YES, 0.128)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.BOOLArg_andfloatArg_(YES, 1.0)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.BOOLArg_andfloatArg_(YES, 42.0)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.BOOLArg_andfloatArg_(YES, 1e10)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.BOOLArg_andfloatArg_(NO, 0.128)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.BOOLArg_andfloatArg_(NO, 1.0)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.BOOLArg_andfloatArg_(NO, 42.0)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.BOOLArg_andfloatArg_(NO, 1e10)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 1e10)


	def testBOOLAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_anddoubleArg_(YES, 0.128)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.BOOLArg_anddoubleArg_(YES, 1.0)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.BOOLArg_anddoubleArg_(YES, 42.0)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.BOOLArg_anddoubleArg_(YES, 1e10)
		self.assertEquals(r[0], YES)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.BOOLArg_anddoubleArg_(NO, 0.128)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.BOOLArg_anddoubleArg_(NO, 1.0)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.BOOLArg_anddoubleArg_(NO, 42.0)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.BOOLArg_anddoubleArg_(NO, 1e10)
		self.assertEquals(r[0], NO)
		self.assertAlmostEquals(r[2], 1e10)


	def testBOOLAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andidArg_(YES, nil)
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], nil)
		r = o.BOOLArg_andidArg_(NO, nil)
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], nil)


	def testBOOLAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andcharPtrArg_(YES, "hello")
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], "hello")
		r = o.BOOLArg_andcharPtrArg_(YES, "world")
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], "world")
		r = o.BOOLArg_andcharPtrArg_(YES, "foobar")
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], "foobar")
		r = o.BOOLArg_andcharPtrArg_(NO, "hello")
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], "hello")
		r = o.BOOLArg_andcharPtrArg_(NO, "world")
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], "world")
		r = o.BOOLArg_andcharPtrArg_(NO, "foobar")
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], "foobar")


	def testBOOLAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andNSPointArg_(YES, (1, 2))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], (1, 2))
		r = o.BOOLArg_andNSPointArg_(YES, (3, 4))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], (3, 4))
		r = o.BOOLArg_andNSPointArg_(NO, (1, 2))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], (1, 2))
		r = o.BOOLArg_andNSPointArg_(NO, (3, 4))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], (3, 4))


	def testBOOLAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLArg_andNSRectArg_(YES, ((1, 2), (3, 4)))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.BOOLArg_andNSRectArg_(YES, ((7, 8), (9, 10)))
		self.assertEquals(r[0], YES)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.BOOLArg_andNSRectArg_(NO, ((1, 2), (3, 4)))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.BOOLArg_andNSRectArg_(NO, ((7, 8), (9, 10)))
		self.assertEquals(r[0], NO)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testcharAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andBOOLArg_(-128, YES)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], YES)
		r = o.charArg_andBOOLArg_(-128, NO)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], NO)
		r = o.charArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.charArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.charArg_andBOOLArg_(127, YES)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], YES)
		r = o.charArg_andBOOLArg_(127, NO)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], NO)


	def testcharAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andcharArg_(-128, -128)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -128)
		r = o.charArg_andcharArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andcharArg_(-128, 127)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 127)
		r = o.charArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.charArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.charArg_andcharArg_(127, -128)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -128)
		r = o.charArg_andcharArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andcharArg_(127, 127)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 127)


	def testcharAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andsignedshortArg_(-128, -(1<<14))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -(1<<14))
		r = o.charArg_andsignedshortArg_(-128, -42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedshortArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedshortArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedshortArg_(-128, 1 << 14)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1 << 14)
		r = o.charArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.charArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.charArg_andsignedshortArg_(127, -(1<<14))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -(1<<14))
		r = o.charArg_andsignedshortArg_(127, -42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedshortArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedshortArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedshortArg_(127, 1 << 14)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1 << 14)


	def testcharAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andsignedintArg_(-128, -(1<<30))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedintArg_(-128, -42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedintArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedintArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedintArg_(-128, 1 << 30)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andsignedintArg_(127, -(1<<30))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedintArg_(127, -42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedintArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedintArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedintArg_(127, 1 << 30)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1 << 30)


	def testcharAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andsignedlongArg_(-128, -(1<<30))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedlongArg_(-128, -42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlongArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlongArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlongArg_(-128, 1 << 30)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andsignedlongArg_(127, -(1<<30))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -(1<<30))
		r = o.charArg_andsignedlongArg_(127, -42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlongArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlongArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlongArg_(127, 1 << 30)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1 << 30)


	def testcharAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andsignedlonglongArg_(-128, -(1L << 60))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -(1L << 60))
		r = o.charArg_andsignedlonglongArg_(-128, -42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlonglongArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlonglongArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlonglongArg_(-128, 1L << 60)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1L << 60)
		r = o.charArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.charArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.charArg_andsignedlonglongArg_(127, -(1L << 60))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -(1L << 60))
		r = o.charArg_andsignedlonglongArg_(127, -42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], -42)
		r = o.charArg_andsignedlonglongArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andsignedlonglongArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andsignedlonglongArg_(127, 1L << 60)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1L << 60)


	def testcharAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andunsignedcharArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedcharArg_(-128, 128)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 128)
		r = o.charArg_andunsignedcharArg_(-128, 255)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 255)
		r = o.charArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.charArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.charArg_andunsignedcharArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedcharArg_(127, 128)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 128)
		r = o.charArg_andunsignedcharArg_(127, 255)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 255)


	def testcharAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andunsignedshortArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedshortArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedshortArg_(-128, 1<<14)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1<<14)
		r = o.charArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.charArg_andunsignedshortArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedshortArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedshortArg_(127, 1<<14)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1<<14)


	def testcharAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andunsignedintArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedintArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedintArg_(-128, 1 << 30)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.charArg_andunsignedintArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedintArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedintArg_(127, 1 << 30)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1 << 30)


	def testcharAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andunsignedlongArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlongArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlongArg_(-128, 1L << 30)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1L << 30)
		r = o.charArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.charArg_andunsignedlongArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlongArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlongArg_(127, 1L << 30)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1L << 30)


	def testcharAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andunsignedlonglongArg_(-128, 0)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlonglongArg_(-128, 42)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlonglongArg_(-128, 1L << 62)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], 1L << 62)
		r = o.charArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.charArg_andunsignedlonglongArg_(127, 0)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 0)
		r = o.charArg_andunsignedlonglongArg_(127, 42)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 42)
		r = o.charArg_andunsignedlonglongArg_(127, 1L << 62)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], 1L << 62)


	def testcharAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andfloatArg_(-128, 0.128)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_andfloatArg_(-128, 1.0)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_andfloatArg_(-128, 42.0)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_andfloatArg_(-128, 1e10)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charArg_andfloatArg_(127, 0.128)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_andfloatArg_(127, 1.0)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_andfloatArg_(127, 42.0)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_andfloatArg_(127, 1e10)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 1e10)


	def testcharAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_anddoubleArg_(-128, 0.128)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_anddoubleArg_(-128, 1.0)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_anddoubleArg_(-128, 42.0)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_anddoubleArg_(-128, 1e10)
		self.assertEquals(r[0], -128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charArg_anddoubleArg_(127, 0.128)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charArg_anddoubleArg_(127, 1.0)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charArg_anddoubleArg_(127, 42.0)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charArg_anddoubleArg_(127, 1e10)
		self.assertEquals(r[0], 127)
		self.assertAlmostEquals(r[2], 1e10)


	def testcharAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andidArg_(-128, nil)
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], nil)
		r = o.charArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.charArg_andidArg_(127, nil)
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], nil)


	def testcharAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andcharPtrArg_(-128, "hello")
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], "hello")
		r = o.charArg_andcharPtrArg_(-128, "world")
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], "world")
		r = o.charArg_andcharPtrArg_(-128, "foobar")
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], "foobar")
		r = o.charArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.charArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.charArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.charArg_andcharPtrArg_(127, "hello")
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], "hello")
		r = o.charArg_andcharPtrArg_(127, "world")
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], "world")
		r = o.charArg_andcharPtrArg_(127, "foobar")
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], "foobar")


	def testcharAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andNSPointArg_(-128, (1, 2))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], (1, 2))
		r = o.charArg_andNSPointArg_(-128, (3, 4))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], (3, 4))
		r = o.charArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.charArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.charArg_andNSPointArg_(127, (1, 2))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], (1, 2))
		r = o.charArg_andNSPointArg_(127, (3, 4))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], (3, 4))


	def testcharAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charArg_andNSRectArg_(-128, ((1, 2), (3, 4)))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charArg_andNSRectArg_(-128, ((7, 8), (9, 10)))
		self.assertEquals(r[0], -128)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.charArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.charArg_andNSRectArg_(127, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charArg_andNSRectArg_(127, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 127)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testsignedshortAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andBOOLArg_(-(1<<14), YES)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], YES)
		r = o.signedshortArg_andBOOLArg_(-(1<<14), NO)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], NO)
		r = o.signedshortArg_andBOOLArg_(-42, YES)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], YES)
		r = o.signedshortArg_andBOOLArg_(-42, NO)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], NO)
		r = o.signedshortArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.signedshortArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.signedshortArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.signedshortArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.signedshortArg_andBOOLArg_(1 << 14, YES)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], YES)
		r = o.signedshortArg_andBOOLArg_(1 << 14, NO)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], NO)


	def testsignedshortAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andcharArg_(-(1<<14), -128)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -128)
		r = o.signedshortArg_andcharArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andcharArg_(-(1<<14), 127)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 127)
		r = o.signedshortArg_andcharArg_(-42, -128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -128)
		r = o.signedshortArg_andcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andcharArg_(-42, 127)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 127)
		r = o.signedshortArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.signedshortArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.signedshortArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.signedshortArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.signedshortArg_andcharArg_(1 << 14, -128)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -128)
		r = o.signedshortArg_andcharArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andcharArg_(1 << 14, 127)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 127)


	def testsignedshortAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andsignedshortArg_(-(1<<14), -(1<<14))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -(1<<14))
		r = o.signedshortArg_andsignedshortArg_(-(1<<14), -42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedshortArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedshortArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedshortArg_(-(1<<14), 1 << 14)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1 << 14)
		r = o.signedshortArg_andsignedshortArg_(-42, -(1<<14))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedshortArg_andsignedshortArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedshortArg_(-42, 1 << 14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedshortArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedshortArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedshortArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedshortArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedshortArg_andsignedshortArg_(1 << 14, -(1<<14))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedshortArg_andsignedshortArg_(1 << 14, -42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedshortArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedshortArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedshortArg_(1 << 14, 1 << 14)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1 << 14)


	def testsignedshortAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andsignedintArg_(-(1<<14), -(1<<30))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedintArg_(-(1<<14), -42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedintArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedintArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedintArg_(-(1<<14), 1 << 30)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedintArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedintArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedintArg_(1 << 14, -(1<<30))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedintArg_(1 << 14, -42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedintArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedintArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedintArg_(1 << 14, 1 << 30)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1 << 30)


	def testsignedshortAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andsignedlongArg_(-(1<<14), -(1<<30))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedlongArg_(-(1<<14), -42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlongArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlongArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlongArg_(-(1<<14), 1 << 30)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedlongArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedlongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlongArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andsignedlongArg_(1 << 14, -(1<<30))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedshortArg_andsignedlongArg_(1 << 14, -42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlongArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlongArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlongArg_(1 << 14, 1 << 30)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1 << 30)


	def testsignedshortAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andsignedlonglongArg_(-(1<<14), -(1L << 60))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedshortArg_andsignedlonglongArg_(-(1<<14), -42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlonglongArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlonglongArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlonglongArg_(-(1<<14), 1L << 60)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1L << 60)
		r = o.signedshortArg_andsignedlonglongArg_(-42, -(1L << 60))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedshortArg_andsignedlonglongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlonglongArg_(-42, 1L << 60)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedshortArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedshortArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedshortArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedshortArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedshortArg_andsignedlonglongArg_(1 << 14, -(1L << 60))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedshortArg_andsignedlonglongArg_(1 << 14, -42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], -42)
		r = o.signedshortArg_andsignedlonglongArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andsignedlonglongArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andsignedlonglongArg_(1 << 14, 1L << 60)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1L << 60)


	def testsignedshortAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andunsignedcharArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedcharArg_(-(1<<14), 128)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 128)
		r = o.signedshortArg_andunsignedcharArg_(-(1<<14), 255)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 255)
		r = o.signedshortArg_andunsignedcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedcharArg_(-42, 128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 128)
		r = o.signedshortArg_andunsignedcharArg_(-42, 255)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 255)
		r = o.signedshortArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.signedshortArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.signedshortArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.signedshortArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.signedshortArg_andunsignedcharArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedcharArg_(1 << 14, 128)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 128)
		r = o.signedshortArg_andunsignedcharArg_(1 << 14, 255)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 255)


	def testsignedshortAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andunsignedshortArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedshortArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedshortArg_(-(1<<14), 1<<14)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1<<14)
		r = o.signedshortArg_andunsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedshortArg_(-42, 1<<14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedshortArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.signedshortArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedshortArg_andunsignedshortArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedshortArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedshortArg_(1 << 14, 1<<14)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1<<14)


	def testsignedshortAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andunsignedintArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedintArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedintArg_(-(1<<14), 1 << 30)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andunsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedshortArg_andunsignedintArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedintArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedintArg_(1 << 14, 1 << 30)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1 << 30)


	def testsignedshortAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andunsignedlongArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlongArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlongArg_(-(1<<14), 1L << 30)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1L << 30)
		r = o.signedshortArg_andunsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlongArg_(-42, 1L << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedshortArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedshortArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedshortArg_andunsignedlongArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlongArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlongArg_(1 << 14, 1L << 30)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1L << 30)


	def testsignedshortAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andunsignedlonglongArg_(-(1<<14), 0)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlonglongArg_(-(1<<14), 42)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlonglongArg_(-(1<<14), 1L << 62)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], 1L << 62)
		r = o.signedshortArg_andunsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlonglongArg_(-42, 1L << 62)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedshortArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedshortArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedshortArg_andunsignedlonglongArg_(1 << 14, 0)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 0)
		r = o.signedshortArg_andunsignedlonglongArg_(1 << 14, 42)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 42)
		r = o.signedshortArg_andunsignedlonglongArg_(1 << 14, 1L << 62)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], 1L << 62)


	def testsignedshortAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andfloatArg_(-(1<<14), 0.128)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_andfloatArg_(-(1<<14), 1.0)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_andfloatArg_(-(1<<14), 42.0)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_andfloatArg_(-(1<<14), 1e10)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_andfloatArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_andfloatArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_andfloatArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_andfloatArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_andfloatArg_(1 << 14, 0.128)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_andfloatArg_(1 << 14, 1.0)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_andfloatArg_(1 << 14, 42.0)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_andfloatArg_(1 << 14, 1e10)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedshortAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_anddoubleArg_(-(1<<14), 0.128)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_anddoubleArg_(-(1<<14), 1.0)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_anddoubleArg_(-(1<<14), 42.0)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_anddoubleArg_(-(1<<14), 1e10)
		self.assertEquals(r[0], -(1<<14))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_anddoubleArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_anddoubleArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_anddoubleArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_anddoubleArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedshortArg_anddoubleArg_(1 << 14, 0.128)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedshortArg_anddoubleArg_(1 << 14, 1.0)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedshortArg_anddoubleArg_(1 << 14, 42.0)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedshortArg_anddoubleArg_(1 << 14, 1e10)
		self.assertEquals(r[0], 1 << 14)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedshortAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andidArg_(-(1<<14), nil)
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], nil)
		r = o.signedshortArg_andidArg_(-42, nil)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], nil)
		r = o.signedshortArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.signedshortArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.signedshortArg_andidArg_(1 << 14, nil)
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], nil)


	def testsignedshortAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andcharPtrArg_(-(1<<14), "hello")
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], "hello")
		r = o.signedshortArg_andcharPtrArg_(-(1<<14), "world")
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], "world")
		r = o.signedshortArg_andcharPtrArg_(-(1<<14), "foobar")
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], "foobar")
		r = o.signedshortArg_andcharPtrArg_(-42, "hello")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "hello")
		r = o.signedshortArg_andcharPtrArg_(-42, "world")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "world")
		r = o.signedshortArg_andcharPtrArg_(-42, "foobar")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "foobar")
		r = o.signedshortArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.signedshortArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.signedshortArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.signedshortArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.signedshortArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.signedshortArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.signedshortArg_andcharPtrArg_(1 << 14, "hello")
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], "hello")
		r = o.signedshortArg_andcharPtrArg_(1 << 14, "world")
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], "world")
		r = o.signedshortArg_andcharPtrArg_(1 << 14, "foobar")
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], "foobar")


	def testsignedshortAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andNSPointArg_(-(1<<14), (1, 2))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], (1, 2))
		r = o.signedshortArg_andNSPointArg_(-(1<<14), (3, 4))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], (3, 4))
		r = o.signedshortArg_andNSPointArg_(-42, (1, 2))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedshortArg_andNSPointArg_(-42, (3, 4))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedshortArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.signedshortArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.signedshortArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedshortArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedshortArg_andNSPointArg_(1 << 14, (1, 2))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], (1, 2))
		r = o.signedshortArg_andNSPointArg_(1 << 14, (3, 4))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], (3, 4))


	def testsignedshortAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortArg_andNSRectArg_(-(1<<14), ((1, 2), (3, 4)))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedshortArg_andNSRectArg_(-(1<<14), ((7, 8), (9, 10)))
		self.assertEquals(r[0], -(1<<14))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedshortArg_andNSRectArg_(-42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedshortArg_andNSRectArg_(-42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedshortArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedshortArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedshortArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedshortArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedshortArg_andNSRectArg_(1 << 14, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedshortArg_andNSRectArg_(1 << 14, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1 << 14)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testsignedintAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andBOOLArg_(-(1<<30), YES)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], YES)
		r = o.signedintArg_andBOOLArg_(-(1<<30), NO)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], NO)
		r = o.signedintArg_andBOOLArg_(-42, YES)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], YES)
		r = o.signedintArg_andBOOLArg_(-42, NO)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], NO)
		r = o.signedintArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.signedintArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.signedintArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.signedintArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.signedintArg_andBOOLArg_(1 << 30, YES)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], YES)
		r = o.signedintArg_andBOOLArg_(1 << 30, NO)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], NO)


	def testsignedintAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andcharArg_(-(1<<30), -128)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -128)
		r = o.signedintArg_andcharArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andcharArg_(-(1<<30), 127)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 127)
		r = o.signedintArg_andcharArg_(-42, -128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -128)
		r = o.signedintArg_andcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andcharArg_(-42, 127)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 127)
		r = o.signedintArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.signedintArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.signedintArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.signedintArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.signedintArg_andcharArg_(1 << 30, -128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -128)
		r = o.signedintArg_andcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andcharArg_(1 << 30, 127)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 127)


	def testsignedintAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andsignedshortArg_(-(1<<30), -(1<<14))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<14))
		r = o.signedintArg_andsignedshortArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedshortArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedshortArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedshortArg_(-(1<<30), 1 << 14)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 14)
		r = o.signedintArg_andsignedshortArg_(-42, -(1<<14))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedintArg_andsignedshortArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedshortArg_(-42, 1 << 14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedintArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedintArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedintArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedintArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedintArg_andsignedshortArg_(1 << 30, -(1<<14))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedintArg_andsignedshortArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedshortArg_(1 << 30, 1 << 14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 14)


	def testsignedintAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andsignedintArg_(-(1<<30), -(1<<30))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedintArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedintArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedintArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedintArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedintArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedintArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedintArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedintArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedintAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andsignedlongArg_(-(1<<30), -(1<<30))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedlongArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlongArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedlongArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedlongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlongArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andsignedlongArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedintArg_andsignedlongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlongArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedintAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andsignedlonglongArg_(-(1<<30), -(1L << 60))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedintArg_andsignedlonglongArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlonglongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlonglongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlonglongArg_(-(1<<30), 1L << 60)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 60)
		r = o.signedintArg_andsignedlonglongArg_(-42, -(1L << 60))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedintArg_andsignedlonglongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlonglongArg_(-42, 1L << 60)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedintArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedintArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedintArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedintArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedintArg_andsignedlonglongArg_(1 << 30, -(1L << 60))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedintArg_andsignedlonglongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedintArg_andsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andsignedlonglongArg_(1 << 30, 1L << 60)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 60)


	def testsignedintAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andunsignedcharArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedcharArg_(-(1<<30), 128)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 128)
		r = o.signedintArg_andunsignedcharArg_(-(1<<30), 255)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 255)
		r = o.signedintArg_andunsignedcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedcharArg_(-42, 128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 128)
		r = o.signedintArg_andunsignedcharArg_(-42, 255)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 255)
		r = o.signedintArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.signedintArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.signedintArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.signedintArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.signedintArg_andunsignedcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedcharArg_(1 << 30, 128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 128)
		r = o.signedintArg_andunsignedcharArg_(1 << 30, 255)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 255)


	def testsignedintAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andunsignedshortArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedshortArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedshortArg_(-(1<<30), 1<<14)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1<<14)
		r = o.signedintArg_andunsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedshortArg_(-42, 1<<14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedintArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.signedintArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedintArg_andunsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedshortArg_(1 << 30, 1<<14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1<<14)


	def testsignedintAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andunsignedintArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedintArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedintArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andunsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedintArg_andunsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedintAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andunsignedlongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlongArg_(-(1<<30), 1L << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 30)
		r = o.signedintArg_andunsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlongArg_(-42, 1L << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedintArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedintArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedintArg_andunsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlongArg_(1 << 30, 1L << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 30)


	def testsignedintAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andunsignedlonglongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlonglongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlonglongArg_(-(1<<30), 1L << 62)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 62)
		r = o.signedintArg_andunsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlonglongArg_(-42, 1L << 62)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedintArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedintArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedintArg_andunsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedintArg_andunsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedintArg_andunsignedlonglongArg_(1 << 30, 1L << 62)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 62)


	def testsignedintAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andfloatArg_(-(1<<30), 0.128)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_andfloatArg_(-(1<<30), 1.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_andfloatArg_(-(1<<30), 42.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_andfloatArg_(-(1<<30), 1e10)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_andfloatArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_andfloatArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_andfloatArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_andfloatArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_andfloatArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_andfloatArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_andfloatArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_andfloatArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedintAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_anddoubleArg_(-(1<<30), 0.128)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_anddoubleArg_(-(1<<30), 1.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_anddoubleArg_(-(1<<30), 42.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_anddoubleArg_(-(1<<30), 1e10)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_anddoubleArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_anddoubleArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_anddoubleArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_anddoubleArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedintArg_anddoubleArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedintArg_anddoubleArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedintArg_anddoubleArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedintArg_anddoubleArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedintAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andidArg_(-(1<<30), nil)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], nil)
		r = o.signedintArg_andidArg_(-42, nil)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], nil)
		r = o.signedintArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.signedintArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.signedintArg_andidArg_(1 << 30, nil)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], nil)


	def testsignedintAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andcharPtrArg_(-(1<<30), "hello")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "hello")
		r = o.signedintArg_andcharPtrArg_(-(1<<30), "world")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "world")
		r = o.signedintArg_andcharPtrArg_(-(1<<30), "foobar")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "foobar")
		r = o.signedintArg_andcharPtrArg_(-42, "hello")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "hello")
		r = o.signedintArg_andcharPtrArg_(-42, "world")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "world")
		r = o.signedintArg_andcharPtrArg_(-42, "foobar")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "foobar")
		r = o.signedintArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.signedintArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.signedintArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.signedintArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.signedintArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.signedintArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.signedintArg_andcharPtrArg_(1 << 30, "hello")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "hello")
		r = o.signedintArg_andcharPtrArg_(1 << 30, "world")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "world")
		r = o.signedintArg_andcharPtrArg_(1 << 30, "foobar")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "foobar")


	def testsignedintAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andNSPointArg_(-(1<<30), (1, 2))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], (1, 2))
		r = o.signedintArg_andNSPointArg_(-(1<<30), (3, 4))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], (3, 4))
		r = o.signedintArg_andNSPointArg_(-42, (1, 2))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedintArg_andNSPointArg_(-42, (3, 4))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedintArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.signedintArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.signedintArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedintArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedintArg_andNSPointArg_(1 << 30, (1, 2))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (1, 2))
		r = o.signedintArg_andNSPointArg_(1 << 30, (3, 4))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (3, 4))


	def testsignedintAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintArg_andNSRectArg_(-(1<<30), ((1, 2), (3, 4)))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedintArg_andNSRectArg_(-(1<<30), ((7, 8), (9, 10)))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedintArg_andNSRectArg_(-42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedintArg_andNSRectArg_(-42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedintArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedintArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedintArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedintArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedintArg_andNSRectArg_(1 << 30, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedintArg_andNSRectArg_(1 << 30, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testsignedlongAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andBOOLArg_(-(1<<30), YES)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], YES)
		r = o.signedlongArg_andBOOLArg_(-(1<<30), NO)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], NO)
		r = o.signedlongArg_andBOOLArg_(-42, YES)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], YES)
		r = o.signedlongArg_andBOOLArg_(-42, NO)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], NO)
		r = o.signedlongArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.signedlongArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.signedlongArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.signedlongArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.signedlongArg_andBOOLArg_(1 << 30, YES)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], YES)
		r = o.signedlongArg_andBOOLArg_(1 << 30, NO)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], NO)


	def testsignedlongAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andcharArg_(-(1<<30), -128)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -128)
		r = o.signedlongArg_andcharArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andcharArg_(-(1<<30), 127)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 127)
		r = o.signedlongArg_andcharArg_(-42, -128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -128)
		r = o.signedlongArg_andcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andcharArg_(-42, 127)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 127)
		r = o.signedlongArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.signedlongArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.signedlongArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.signedlongArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.signedlongArg_andcharArg_(1 << 30, -128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -128)
		r = o.signedlongArg_andcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andcharArg_(1 << 30, 127)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 127)


	def testsignedlongAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andsignedshortArg_(-(1<<30), -(1<<14))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlongArg_andsignedshortArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedshortArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedshortArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedshortArg_(-(1<<30), 1 << 14)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlongArg_andsignedshortArg_(-42, -(1<<14))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlongArg_andsignedshortArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedshortArg_(-42, 1 << 14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlongArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlongArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlongArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlongArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlongArg_andsignedshortArg_(1 << 30, -(1<<14))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlongArg_andsignedshortArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedshortArg_(1 << 30, 1 << 14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 14)


	def testsignedlongAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andsignedintArg_(-(1<<30), -(1<<30))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedintArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedintArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedintArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedintArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedintArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedintArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedintArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedintArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlongAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andsignedlongArg_(-(1<<30), -(1<<30))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedlongArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlongArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedlongArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedlongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlongArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andsignedlongArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlongArg_andsignedlongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlongArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlongAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andsignedlonglongArg_(-(1<<30), -(1L << 60))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlongArg_andsignedlonglongArg_(-(1<<30), -42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlonglongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlonglongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlonglongArg_(-(1<<30), 1L << 60)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlongArg_andsignedlonglongArg_(-42, -(1L << 60))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlongArg_andsignedlonglongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlonglongArg_(-42, 1L << 60)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlongArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlongArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlongArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlongArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlongArg_andsignedlonglongArg_(1 << 30, -(1L << 60))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlongArg_andsignedlonglongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.signedlongArg_andsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andsignedlonglongArg_(1 << 30, 1L << 60)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 60)


	def testsignedlongAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andunsignedcharArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedcharArg_(-(1<<30), 128)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 128)
		r = o.signedlongArg_andunsignedcharArg_(-(1<<30), 255)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 255)
		r = o.signedlongArg_andunsignedcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedcharArg_(-42, 128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 128)
		r = o.signedlongArg_andunsignedcharArg_(-42, 255)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 255)
		r = o.signedlongArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.signedlongArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.signedlongArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.signedlongArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.signedlongArg_andunsignedcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedcharArg_(1 << 30, 128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 128)
		r = o.signedlongArg_andunsignedcharArg_(1 << 30, 255)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 255)


	def testsignedlongAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andunsignedshortArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedshortArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedshortArg_(-(1<<30), 1<<14)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1<<14)
		r = o.signedlongArg_andunsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedshortArg_(-42, 1<<14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlongArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlongArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlongArg_andunsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedshortArg_(1 << 30, 1<<14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1<<14)


	def testsignedlongAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andunsignedintArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedintArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedintArg_(-(1<<30), 1 << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andunsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlongArg_andunsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlongAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andunsignedlongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlongArg_(-(1<<30), 1L << 30)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlongArg_andunsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlongArg_(-42, 1L << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlongArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlongArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlongArg_andunsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlongArg_(1 << 30, 1L << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 30)


	def testsignedlongAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andunsignedlonglongArg_(-(1<<30), 0)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlonglongArg_(-(1<<30), 42)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlonglongArg_(-(1<<30), 1L << 62)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlongArg_andunsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlonglongArg_(-42, 1L << 62)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlongArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlongArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlongArg_andunsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.signedlongArg_andunsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.signedlongArg_andunsignedlonglongArg_(1 << 30, 1L << 62)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 62)


	def testsignedlongAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andfloatArg_(-(1<<30), 0.128)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_andfloatArg_(-(1<<30), 1.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_andfloatArg_(-(1<<30), 42.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_andfloatArg_(-(1<<30), 1e10)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_andfloatArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_andfloatArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_andfloatArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_andfloatArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_andfloatArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_andfloatArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_andfloatArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_andfloatArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedlongAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_anddoubleArg_(-(1<<30), 0.128)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_anddoubleArg_(-(1<<30), 1.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_anddoubleArg_(-(1<<30), 42.0)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_anddoubleArg_(-(1<<30), 1e10)
		self.assertEquals(r[0], -(1<<30))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_anddoubleArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_anddoubleArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_anddoubleArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_anddoubleArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlongArg_anddoubleArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlongArg_anddoubleArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlongArg_anddoubleArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlongArg_anddoubleArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedlongAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andidArg_(-(1<<30), nil)
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], nil)
		r = o.signedlongArg_andidArg_(-42, nil)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], nil)
		r = o.signedlongArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.signedlongArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.signedlongArg_andidArg_(1 << 30, nil)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], nil)


	def testsignedlongAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andcharPtrArg_(-(1<<30), "hello")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "hello")
		r = o.signedlongArg_andcharPtrArg_(-(1<<30), "world")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "world")
		r = o.signedlongArg_andcharPtrArg_(-(1<<30), "foobar")
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], "foobar")
		r = o.signedlongArg_andcharPtrArg_(-42, "hello")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "hello")
		r = o.signedlongArg_andcharPtrArg_(-42, "world")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "world")
		r = o.signedlongArg_andcharPtrArg_(-42, "foobar")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "foobar")
		r = o.signedlongArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.signedlongArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.signedlongArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.signedlongArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.signedlongArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.signedlongArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.signedlongArg_andcharPtrArg_(1 << 30, "hello")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "hello")
		r = o.signedlongArg_andcharPtrArg_(1 << 30, "world")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "world")
		r = o.signedlongArg_andcharPtrArg_(1 << 30, "foobar")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "foobar")


	def testsignedlongAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andNSPointArg_(-(1<<30), (1, 2))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], (1, 2))
		r = o.signedlongArg_andNSPointArg_(-(1<<30), (3, 4))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], (3, 4))
		r = o.signedlongArg_andNSPointArg_(-42, (1, 2))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlongArg_andNSPointArg_(-42, (3, 4))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlongArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlongArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlongArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlongArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlongArg_andNSPointArg_(1 << 30, (1, 2))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlongArg_andNSPointArg_(1 << 30, (3, 4))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (3, 4))


	def testsignedlongAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongArg_andNSRectArg_(-(1<<30), ((1, 2), (3, 4)))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlongArg_andNSRectArg_(-(1<<30), ((7, 8), (9, 10)))
		self.assertEquals(r[0], -(1<<30))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlongArg_andNSRectArg_(-42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlongArg_andNSRectArg_(-42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlongArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlongArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlongArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlongArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlongArg_andNSRectArg_(1 << 30, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlongArg_andNSRectArg_(1 << 30, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testsignedlonglongAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andBOOLArg_(-(1L << 60), YES)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], YES)
		r = o.signedlonglongArg_andBOOLArg_(-(1L << 60), NO)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], NO)
		r = o.signedlonglongArg_andBOOLArg_(-42, YES)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], YES)
		r = o.signedlonglongArg_andBOOLArg_(-42, NO)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], NO)
		r = o.signedlonglongArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.signedlonglongArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.signedlonglongArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.signedlonglongArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.signedlonglongArg_andBOOLArg_(1L << 60, YES)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], YES)
		r = o.signedlonglongArg_andBOOLArg_(1L << 60, NO)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], NO)


	def testsignedlonglongAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andcharArg_(-(1L << 60), -128)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -128)
		r = o.signedlonglongArg_andcharArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andcharArg_(-(1L << 60), 127)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 127)
		r = o.signedlonglongArg_andcharArg_(-42, -128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -128)
		r = o.signedlonglongArg_andcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andcharArg_(-42, 127)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 127)
		r = o.signedlonglongArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.signedlonglongArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.signedlonglongArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.signedlonglongArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.signedlonglongArg_andcharArg_(1L << 60, -128)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -128)
		r = o.signedlonglongArg_andcharArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andcharArg_(1L << 60, 127)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 127)


	def testsignedlonglongAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andsignedshortArg_(-(1L << 60), -(1<<14))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlonglongArg_andsignedshortArg_(-(1L << 60), -42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedshortArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedshortArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedshortArg_(-(1L << 60), 1 << 14)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlonglongArg_andsignedshortArg_(-42, -(1<<14))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlonglongArg_andsignedshortArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedshortArg_(-42, 1 << 14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlonglongArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlonglongArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlonglongArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlonglongArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.signedlonglongArg_andsignedshortArg_(1L << 60, -(1<<14))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -(1<<14))
		r = o.signedlonglongArg_andsignedshortArg_(1L << 60, -42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedshortArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedshortArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedshortArg_(1L << 60, 1 << 14)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1 << 14)


	def testsignedlonglongAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andsignedintArg_(-(1L << 60), -(1<<30))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedintArg_(-(1L << 60), -42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedintArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedintArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedintArg_(-(1L << 60), 1 << 30)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedintArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedintArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedintArg_(1L << 60, -(1<<30))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedintArg_(1L << 60, -42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedintArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedintArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedintArg_(1L << 60, 1 << 30)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlonglongAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andsignedlongArg_(-(1L << 60), -(1<<30))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedlongArg_(-(1L << 60), -42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlongArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlongArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlongArg_(-(1L << 60), 1 << 30)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedlongArg_(-42, -(1<<30))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedlongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlongArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andsignedlongArg_(1L << 60, -(1<<30))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -(1<<30))
		r = o.signedlonglongArg_andsignedlongArg_(1L << 60, -42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlongArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlongArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlongArg_(1L << 60, 1 << 30)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlonglongAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andsignedlonglongArg_(-(1L << 60), -(1L << 60))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlonglongArg_andsignedlonglongArg_(-(1L << 60), -42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlonglongArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlonglongArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlonglongArg_(-(1L << 60), 1L << 60)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlonglongArg_andsignedlonglongArg_(-42, -(1L << 60))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlonglongArg_andsignedlonglongArg_(-42, -42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlonglongArg_(-42, 1L << 60)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlonglongArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlonglongArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlonglongArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlonglongArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.signedlonglongArg_andsignedlonglongArg_(1L << 60, -(1L << 60))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -(1L << 60))
		r = o.signedlonglongArg_andsignedlonglongArg_(1L << 60, -42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], -42)
		r = o.signedlonglongArg_andsignedlonglongArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andsignedlonglongArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andsignedlonglongArg_(1L << 60, 1L << 60)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1L << 60)


	def testsignedlonglongAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andunsignedcharArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedcharArg_(-(1L << 60), 128)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 128)
		r = o.signedlonglongArg_andunsignedcharArg_(-(1L << 60), 255)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 255)
		r = o.signedlonglongArg_andunsignedcharArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedcharArg_(-42, 128)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 128)
		r = o.signedlonglongArg_andunsignedcharArg_(-42, 255)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 255)
		r = o.signedlonglongArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.signedlonglongArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.signedlonglongArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.signedlonglongArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.signedlonglongArg_andunsignedcharArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedcharArg_(1L << 60, 128)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 128)
		r = o.signedlonglongArg_andunsignedcharArg_(1L << 60, 255)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 255)


	def testsignedlonglongAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andunsignedshortArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedshortArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedshortArg_(-(1L << 60), 1<<14)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1<<14)
		r = o.signedlonglongArg_andunsignedshortArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedshortArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedshortArg_(-42, 1<<14)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlonglongArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlonglongArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.signedlonglongArg_andunsignedshortArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedshortArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedshortArg_(1L << 60, 1<<14)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1<<14)


	def testsignedlonglongAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andunsignedintArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedintArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedintArg_(-(1L << 60), 1 << 30)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andunsignedintArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedintArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedintArg_(-42, 1 << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.signedlonglongArg_andunsignedintArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedintArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedintArg_(1L << 60, 1 << 30)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1 << 30)


	def testsignedlonglongAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andunsignedlongArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlongArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlongArg_(-(1L << 60), 1L << 30)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlonglongArg_andunsignedlongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlongArg_(-42, 1L << 30)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlonglongArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlonglongArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.signedlonglongArg_andunsignedlongArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlongArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlongArg_(1L << 60, 1L << 30)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1L << 30)


	def testsignedlonglongAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-(1L << 60), 0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-(1L << 60), 42)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-(1L << 60), 1L << 62)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-42, 0)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-42, 42)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlonglongArg_(-42, 1L << 62)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlonglongArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlonglongArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.signedlonglongArg_andunsignedlonglongArg_(1L << 60, 0)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 0)
		r = o.signedlonglongArg_andunsignedlonglongArg_(1L << 60, 42)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 42)
		r = o.signedlonglongArg_andunsignedlonglongArg_(1L << 60, 1L << 62)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], 1L << 62)


	def testsignedlonglongAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andfloatArg_(-(1L << 60), 0.128)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_andfloatArg_(-(1L << 60), 1.0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_andfloatArg_(-(1L << 60), 42.0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_andfloatArg_(-(1L << 60), 1e10)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_andfloatArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_andfloatArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_andfloatArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_andfloatArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_andfloatArg_(1L << 60, 0.128)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_andfloatArg_(1L << 60, 1.0)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_andfloatArg_(1L << 60, 42.0)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_andfloatArg_(1L << 60, 1e10)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedlonglongAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_anddoubleArg_(-(1L << 60), 0.128)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_anddoubleArg_(-(1L << 60), 1.0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_anddoubleArg_(-(1L << 60), 42.0)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_anddoubleArg_(-(1L << 60), 1e10)
		self.assertEquals(r[0], -(1L << 60))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_anddoubleArg_(-42, 0.128)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_anddoubleArg_(-42, 1.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_anddoubleArg_(-42, 42.0)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_anddoubleArg_(-42, 1e10)
		self.assertEquals(r[0], -42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.signedlonglongArg_anddoubleArg_(1L << 60, 0.128)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.signedlonglongArg_anddoubleArg_(1L << 60, 1.0)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.signedlonglongArg_anddoubleArg_(1L << 60, 42.0)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.signedlonglongArg_anddoubleArg_(1L << 60, 1e10)
		self.assertEquals(r[0], 1L << 60)
		self.assertAlmostEquals(r[2], 1e10)


	def testsignedlonglongAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andidArg_(-(1L << 60), nil)
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], nil)
		r = o.signedlonglongArg_andidArg_(-42, nil)
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], nil)
		r = o.signedlonglongArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.signedlonglongArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.signedlonglongArg_andidArg_(1L << 60, nil)
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], nil)


	def testsignedlonglongAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andcharPtrArg_(-(1L << 60), "hello")
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], "hello")
		r = o.signedlonglongArg_andcharPtrArg_(-(1L << 60), "world")
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], "world")
		r = o.signedlonglongArg_andcharPtrArg_(-(1L << 60), "foobar")
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], "foobar")
		r = o.signedlonglongArg_andcharPtrArg_(-42, "hello")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "hello")
		r = o.signedlonglongArg_andcharPtrArg_(-42, "world")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "world")
		r = o.signedlonglongArg_andcharPtrArg_(-42, "foobar")
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], "foobar")
		r = o.signedlonglongArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.signedlonglongArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.signedlonglongArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.signedlonglongArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.signedlonglongArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.signedlonglongArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.signedlonglongArg_andcharPtrArg_(1L << 60, "hello")
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], "hello")
		r = o.signedlonglongArg_andcharPtrArg_(1L << 60, "world")
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], "world")
		r = o.signedlonglongArg_andcharPtrArg_(1L << 60, "foobar")
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], "foobar")


	def testsignedlonglongAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andNSPointArg_(-(1L << 60), (1, 2))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], (1, 2))
		r = o.signedlonglongArg_andNSPointArg_(-(1L << 60), (3, 4))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], (3, 4))
		r = o.signedlonglongArg_andNSPointArg_(-42, (1, 2))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlonglongArg_andNSPointArg_(-42, (3, 4))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlonglongArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlonglongArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlonglongArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlonglongArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.signedlonglongArg_andNSPointArg_(1L << 60, (1, 2))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], (1, 2))
		r = o.signedlonglongArg_andNSPointArg_(1L << 60, (3, 4))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], (3, 4))


	def testsignedlonglongAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongArg_andNSRectArg_(-(1L << 60), ((1, 2), (3, 4)))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlonglongArg_andNSRectArg_(-(1L << 60), ((7, 8), (9, 10)))
		self.assertEquals(r[0], -(1L << 60))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlonglongArg_andNSRectArg_(-42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlonglongArg_andNSRectArg_(-42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], -42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlonglongArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlonglongArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlonglongArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlonglongArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.signedlonglongArg_andNSRectArg_(1L << 60, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.signedlonglongArg_andNSRectArg_(1L << 60, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1L << 60)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testunsignedcharAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.unsignedcharArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.unsignedcharArg_andBOOLArg_(128, YES)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], YES)
		r = o.unsignedcharArg_andBOOLArg_(128, NO)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], NO)
		r = o.unsignedcharArg_andBOOLArg_(255, YES)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], YES)
		r = o.unsignedcharArg_andBOOLArg_(255, NO)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], NO)


	def testunsignedcharAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.unsignedcharArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.unsignedcharArg_andcharArg_(128, -128)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -128)
		r = o.unsignedcharArg_andcharArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andcharArg_(128, 127)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 127)
		r = o.unsignedcharArg_andcharArg_(255, -128)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -128)
		r = o.unsignedcharArg_andcharArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andcharArg_(255, 127)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 127)


	def testunsignedcharAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedcharArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedcharArg_andsignedshortArg_(128, -(1<<14))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedcharArg_andsignedshortArg_(128, -42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedshortArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedshortArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedshortArg_(128, 1 << 14)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedcharArg_andsignedshortArg_(255, -(1<<14))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedcharArg_andsignedshortArg_(255, -42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedshortArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedshortArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedshortArg_(255, 1 << 14)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1 << 14)


	def testunsignedcharAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andsignedintArg_(128, -(1<<30))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedintArg_(128, -42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedintArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedintArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedintArg_(128, 1 << 30)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andsignedintArg_(255, -(1<<30))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedintArg_(255, -42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedintArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedintArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedintArg_(255, 1 << 30)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedcharAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andsignedlongArg_(128, -(1<<30))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedlongArg_(128, -42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlongArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlongArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlongArg_(128, 1 << 30)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andsignedlongArg_(255, -(1<<30))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedcharArg_andsignedlongArg_(255, -42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlongArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlongArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlongArg_(255, 1 << 30)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedcharAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedcharArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedcharArg_andsignedlonglongArg_(128, -(1L << 60))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedcharArg_andsignedlonglongArg_(128, -42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlonglongArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlonglongArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlonglongArg_(128, 1L << 60)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedcharArg_andsignedlonglongArg_(255, -(1L << 60))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedcharArg_andsignedlonglongArg_(255, -42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], -42)
		r = o.unsignedcharArg_andsignedlonglongArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andsignedlonglongArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andsignedlonglongArg_(255, 1L << 60)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1L << 60)


	def testunsignedcharAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.unsignedcharArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.unsignedcharArg_andunsignedcharArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedcharArg_(128, 128)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 128)
		r = o.unsignedcharArg_andunsignedcharArg_(128, 255)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 255)
		r = o.unsignedcharArg_andunsignedcharArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedcharArg_(255, 128)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 128)
		r = o.unsignedcharArg_andunsignedcharArg_(255, 255)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 255)


	def testunsignedcharAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedcharArg_andunsignedshortArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedshortArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedshortArg_(128, 1<<14)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedcharArg_andunsignedshortArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedshortArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedshortArg_(255, 1<<14)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1<<14)


	def testunsignedcharAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andunsignedintArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedintArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedintArg_(128, 1 << 30)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedcharArg_andunsignedintArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedintArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedintArg_(255, 1 << 30)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedcharAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedcharArg_andunsignedlongArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlongArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlongArg_(128, 1L << 30)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedcharArg_andunsignedlongArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlongArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlongArg_(255, 1L << 30)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1L << 30)


	def testunsignedcharAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedcharArg_andunsignedlonglongArg_(128, 0)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlonglongArg_(128, 42)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlonglongArg_(128, 1L << 62)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedcharArg_andunsignedlonglongArg_(255, 0)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 0)
		r = o.unsignedcharArg_andunsignedlonglongArg_(255, 42)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 42)
		r = o.unsignedcharArg_andunsignedlonglongArg_(255, 1L << 62)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], 1L << 62)


	def testunsignedcharAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedcharArg_andfloatArg_(128, 0.128)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_andfloatArg_(128, 1.0)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_andfloatArg_(128, 42.0)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_andfloatArg_(128, 1e10)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedcharArg_andfloatArg_(255, 0.128)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_andfloatArg_(255, 1.0)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_andfloatArg_(255, 42.0)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_andfloatArg_(255, 1e10)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedcharAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedcharArg_anddoubleArg_(128, 0.128)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_anddoubleArg_(128, 1.0)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_anddoubleArg_(128, 42.0)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_anddoubleArg_(128, 1e10)
		self.assertEquals(r[0], 128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedcharArg_anddoubleArg_(255, 0.128)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedcharArg_anddoubleArg_(255, 1.0)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedcharArg_anddoubleArg_(255, 42.0)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedcharArg_anddoubleArg_(255, 1e10)
		self.assertEquals(r[0], 255)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedcharAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.unsignedcharArg_andidArg_(128, nil)
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], nil)
		r = o.unsignedcharArg_andidArg_(255, nil)
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], nil)


	def testunsignedcharAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.unsignedcharArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.unsignedcharArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedcharArg_andcharPtrArg_(128, "hello")
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], "hello")
		r = o.unsignedcharArg_andcharPtrArg_(128, "world")
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], "world")
		r = o.unsignedcharArg_andcharPtrArg_(128, "foobar")
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedcharArg_andcharPtrArg_(255, "hello")
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], "hello")
		r = o.unsignedcharArg_andcharPtrArg_(255, "world")
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], "world")
		r = o.unsignedcharArg_andcharPtrArg_(255, "foobar")
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], "foobar")


	def testunsignedcharAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedcharArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedcharArg_andNSPointArg_(128, (1, 2))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedcharArg_andNSPointArg_(128, (3, 4))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedcharArg_andNSPointArg_(255, (1, 2))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedcharArg_andNSPointArg_(255, (3, 4))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], (3, 4))


	def testunsignedcharAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedcharArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedcharArg_andNSRectArg_(128, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedcharArg_andNSRectArg_(128, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 128)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedcharArg_andNSRectArg_(255, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedcharArg_andNSRectArg_(255, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 255)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testunsignedshortAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.unsignedshortArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.unsignedshortArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.unsignedshortArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.unsignedshortArg_andBOOLArg_(1<<14, YES)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], YES)
		r = o.unsignedshortArg_andBOOLArg_(1<<14, NO)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], NO)


	def testunsignedshortAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.unsignedshortArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.unsignedshortArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.unsignedshortArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.unsignedshortArg_andcharArg_(1<<14, -128)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -128)
		r = o.unsignedshortArg_andcharArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andcharArg_(1<<14, 127)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 127)


	def testunsignedshortAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedshortArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedshortArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedshortArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedshortArg_andsignedshortArg_(1<<14, -(1<<14))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedshortArg_andsignedshortArg_(1<<14, -42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedshortArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedshortArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedshortArg_(1<<14, 1 << 14)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1 << 14)


	def testunsignedshortAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andsignedintArg_(1<<14, -(1<<30))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedintArg_(1<<14, -42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedintArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedintArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedintArg_(1<<14, 1 << 30)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedshortAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andsignedlongArg_(1<<14, -(1<<30))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedshortArg_andsignedlongArg_(1<<14, -42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlongArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlongArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlongArg_(1<<14, 1 << 30)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedshortAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedshortArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedshortArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedshortArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedshortArg_andsignedlonglongArg_(1<<14, -(1L << 60))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedshortArg_andsignedlonglongArg_(1<<14, -42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], -42)
		r = o.unsignedshortArg_andsignedlonglongArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andsignedlonglongArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andsignedlonglongArg_(1<<14, 1L << 60)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1L << 60)


	def testunsignedshortAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.unsignedshortArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.unsignedshortArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.unsignedshortArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.unsignedshortArg_andunsignedcharArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedcharArg_(1<<14, 128)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 128)
		r = o.unsignedshortArg_andunsignedcharArg_(1<<14, 255)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 255)


	def testunsignedshortAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedshortArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedshortArg_andunsignedshortArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedshortArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedshortArg_(1<<14, 1<<14)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1<<14)


	def testunsignedshortAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedshortArg_andunsignedintArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedintArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedintArg_(1<<14, 1 << 30)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedshortAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedshortArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedshortArg_andunsignedlongArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlongArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlongArg_(1<<14, 1L << 30)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1L << 30)


	def testunsignedshortAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedshortArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedshortArg_andunsignedlonglongArg_(1<<14, 0)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 0)
		r = o.unsignedshortArg_andunsignedlonglongArg_(1<<14, 42)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 42)
		r = o.unsignedshortArg_andunsignedlonglongArg_(1<<14, 1L << 62)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], 1L << 62)


	def testunsignedshortAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedshortArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedshortArg_andfloatArg_(1<<14, 0.128)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_andfloatArg_(1<<14, 1.0)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_andfloatArg_(1<<14, 42.0)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_andfloatArg_(1<<14, 1e10)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedshortAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedshortArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedshortArg_anddoubleArg_(1<<14, 0.128)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedshortArg_anddoubleArg_(1<<14, 1.0)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedshortArg_anddoubleArg_(1<<14, 42.0)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedshortArg_anddoubleArg_(1<<14, 1e10)
		self.assertEquals(r[0], 1<<14)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedshortAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.unsignedshortArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.unsignedshortArg_andidArg_(1<<14, nil)
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], nil)


	def testunsignedshortAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.unsignedshortArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.unsignedshortArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedshortArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.unsignedshortArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.unsignedshortArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedshortArg_andcharPtrArg_(1<<14, "hello")
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], "hello")
		r = o.unsignedshortArg_andcharPtrArg_(1<<14, "world")
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], "world")
		r = o.unsignedshortArg_andcharPtrArg_(1<<14, "foobar")
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], "foobar")


	def testunsignedshortAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedshortArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedshortArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedshortArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedshortArg_andNSPointArg_(1<<14, (1, 2))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedshortArg_andNSPointArg_(1<<14, (3, 4))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], (3, 4))


	def testunsignedshortAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedshortArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedshortArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedshortArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedshortArg_andNSRectArg_(1<<14, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedshortArg_andNSRectArg_(1<<14, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1<<14)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testunsignedintAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.unsignedintArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.unsignedintArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.unsignedintArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.unsignedintArg_andBOOLArg_(1 << 30, YES)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], YES)
		r = o.unsignedintArg_andBOOLArg_(1 << 30, NO)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], NO)


	def testunsignedintAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.unsignedintArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.unsignedintArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.unsignedintArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.unsignedintArg_andcharArg_(1 << 30, -128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -128)
		r = o.unsignedintArg_andcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andcharArg_(1 << 30, 127)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 127)


	def testunsignedintAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedintArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedintArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedintArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedintArg_andsignedshortArg_(1 << 30, -(1<<14))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedintArg_andsignedshortArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedshortArg_(1 << 30, 1 << 14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 14)


	def testunsignedintAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andsignedintArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedintArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedintAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andsignedlongArg_(1 << 30, -(1<<30))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedintArg_andsignedlongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlongArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedintAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedintArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedintArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedintArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedintArg_andsignedlonglongArg_(1 << 30, -(1L << 60))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedintArg_andsignedlonglongArg_(1 << 30, -42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedintArg_andsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andsignedlonglongArg_(1 << 30, 1L << 60)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 60)


	def testunsignedintAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.unsignedintArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.unsignedintArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.unsignedintArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.unsignedintArg_andunsignedcharArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedcharArg_(1 << 30, 128)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 128)
		r = o.unsignedintArg_andunsignedcharArg_(1 << 30, 255)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 255)


	def testunsignedintAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedintArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedintArg_andunsignedshortArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedshortArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedshortArg_(1 << 30, 1<<14)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1<<14)


	def testunsignedintAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedintArg_andunsignedintArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedintArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedintArg_(1 << 30, 1 << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedintAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedintArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedintArg_andunsignedlongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlongArg_(1 << 30, 1L << 30)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 30)


	def testunsignedintAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedintArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedintArg_andunsignedlonglongArg_(1 << 30, 0)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedintArg_andunsignedlonglongArg_(1 << 30, 42)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedintArg_andunsignedlonglongArg_(1 << 30, 1L << 62)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], 1L << 62)


	def testunsignedintAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedintArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedintArg_andfloatArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_andfloatArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_andfloatArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_andfloatArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedintAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedintArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedintArg_anddoubleArg_(1 << 30, 0.128)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedintArg_anddoubleArg_(1 << 30, 1.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedintArg_anddoubleArg_(1 << 30, 42.0)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedintArg_anddoubleArg_(1 << 30, 1e10)
		self.assertEquals(r[0], 1 << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedintAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.unsignedintArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.unsignedintArg_andidArg_(1 << 30, nil)
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], nil)


	def testunsignedintAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.unsignedintArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.unsignedintArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedintArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.unsignedintArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.unsignedintArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedintArg_andcharPtrArg_(1 << 30, "hello")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "hello")
		r = o.unsignedintArg_andcharPtrArg_(1 << 30, "world")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "world")
		r = o.unsignedintArg_andcharPtrArg_(1 << 30, "foobar")
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], "foobar")


	def testunsignedintAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedintArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedintArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedintArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedintArg_andNSPointArg_(1 << 30, (1, 2))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedintArg_andNSPointArg_(1 << 30, (3, 4))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], (3, 4))


	def testunsignedintAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedintArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedintArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedintArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedintArg_andNSRectArg_(1 << 30, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedintArg_andNSRectArg_(1 << 30, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1 << 30)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testunsignedlongAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.unsignedlongArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.unsignedlongArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.unsignedlongArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.unsignedlongArg_andBOOLArg_(1L << 30, YES)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], YES)
		r = o.unsignedlongArg_andBOOLArg_(1L << 30, NO)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], NO)


	def testunsignedlongAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.unsignedlongArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.unsignedlongArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.unsignedlongArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.unsignedlongArg_andcharArg_(1L << 30, -128)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -128)
		r = o.unsignedlongArg_andcharArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andcharArg_(1L << 30, 127)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 127)


	def testunsignedlongAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlongArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedlongArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlongArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedlongArg_andsignedshortArg_(1L << 30, -(1<<14))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlongArg_andsignedshortArg_(1L << 30, -42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedshortArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedshortArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedshortArg_(1L << 30, 1 << 14)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1 << 14)


	def testunsignedlongAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andsignedintArg_(1L << 30, -(1<<30))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedintArg_(1L << 30, -42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedintArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedintArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedintArg_(1L << 30, 1 << 30)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlongAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andsignedlongArg_(1L << 30, -(1<<30))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlongArg_andsignedlongArg_(1L << 30, -42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlongArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlongArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlongArg_(1L << 30, 1 << 30)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlongAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlongArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedlongArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlongArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedlongArg_andsignedlonglongArg_(1L << 30, -(1L << 60))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlongArg_andsignedlonglongArg_(1L << 30, -42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], -42)
		r = o.unsignedlongArg_andsignedlonglongArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andsignedlonglongArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andsignedlonglongArg_(1L << 30, 1L << 60)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1L << 60)


	def testunsignedlongAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.unsignedlongArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.unsignedlongArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.unsignedlongArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.unsignedlongArg_andunsignedcharArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedcharArg_(1L << 30, 128)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 128)
		r = o.unsignedlongArg_andunsignedcharArg_(1L << 30, 255)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 255)


	def testunsignedlongAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedlongArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedlongArg_andunsignedshortArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedshortArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedshortArg_(1L << 30, 1<<14)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1<<14)


	def testunsignedlongAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlongArg_andunsignedintArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedintArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedintArg_(1L << 30, 1 << 30)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlongAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedlongArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedlongArg_andunsignedlongArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlongArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlongArg_(1L << 30, 1L << 30)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1L << 30)


	def testunsignedlongAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedlongArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedlongArg_andunsignedlonglongArg_(1L << 30, 0)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 0)
		r = o.unsignedlongArg_andunsignedlonglongArg_(1L << 30, 42)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 42)
		r = o.unsignedlongArg_andunsignedlonglongArg_(1L << 30, 1L << 62)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], 1L << 62)


	def testunsignedlongAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlongArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlongArg_andfloatArg_(1L << 30, 0.128)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_andfloatArg_(1L << 30, 1.0)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_andfloatArg_(1L << 30, 42.0)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_andfloatArg_(1L << 30, 1e10)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedlongAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlongArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlongArg_anddoubleArg_(1L << 30, 0.128)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlongArg_anddoubleArg_(1L << 30, 1.0)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlongArg_anddoubleArg_(1L << 30, 42.0)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlongArg_anddoubleArg_(1L << 30, 1e10)
		self.assertEquals(r[0], 1L << 30)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedlongAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.unsignedlongArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.unsignedlongArg_andidArg_(1L << 30, nil)
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], nil)


	def testunsignedlongAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlongArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.unsignedlongArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedlongArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlongArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.unsignedlongArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedlongArg_andcharPtrArg_(1L << 30, "hello")
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlongArg_andcharPtrArg_(1L << 30, "world")
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], "world")
		r = o.unsignedlongArg_andcharPtrArg_(1L << 30, "foobar")
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], "foobar")


	def testunsignedlongAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlongArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedlongArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlongArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedlongArg_andNSPointArg_(1L << 30, (1, 2))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlongArg_andNSPointArg_(1L << 30, (3, 4))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], (3, 4))


	def testunsignedlongAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlongArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedlongArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlongArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedlongArg_andNSRectArg_(1L << 30, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlongArg_andNSRectArg_(1L << 30, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1L << 30)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testunsignedlonglongAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andBOOLArg_(0, YES)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], YES)
		r = o.unsignedlonglongArg_andBOOLArg_(0, NO)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], NO)
		r = o.unsignedlonglongArg_andBOOLArg_(42, YES)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], YES)
		r = o.unsignedlonglongArg_andBOOLArg_(42, NO)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], NO)
		r = o.unsignedlonglongArg_andBOOLArg_(1L << 62, YES)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], YES)
		r = o.unsignedlonglongArg_andBOOLArg_(1L << 62, NO)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], NO)


	def testunsignedlonglongAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andcharArg_(0, -128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -128)
		r = o.unsignedlonglongArg_andcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andcharArg_(0, 127)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 127)
		r = o.unsignedlonglongArg_andcharArg_(42, -128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -128)
		r = o.unsignedlonglongArg_andcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andcharArg_(42, 127)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 127)
		r = o.unsignedlonglongArg_andcharArg_(1L << 62, -128)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -128)
		r = o.unsignedlonglongArg_andcharArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andcharArg_(1L << 62, 127)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 127)


	def testunsignedlonglongAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andsignedshortArg_(0, -(1<<14))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlonglongArg_andsignedshortArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedshortArg_(0, 1 << 14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedlonglongArg_andsignedshortArg_(42, -(1<<14))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlonglongArg_andsignedshortArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedshortArg_(42, 1 << 14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 14)
		r = o.unsignedlonglongArg_andsignedshortArg_(1L << 62, -(1<<14))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -(1<<14))
		r = o.unsignedlonglongArg_andsignedshortArg_(1L << 62, -42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedshortArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedshortArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedshortArg_(1L << 62, 1 << 14)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1 << 14)


	def testunsignedlonglongAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andsignedintArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedintArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andsignedintArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedintArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andsignedintArg_(1L << 62, -(1<<30))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedintArg_(1L << 62, -42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedintArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedintArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedintArg_(1L << 62, 1 << 30)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlonglongAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andsignedlongArg_(0, -(1<<30))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedlongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlongArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andsignedlongArg_(42, -(1<<30))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedlongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlongArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andsignedlongArg_(1L << 62, -(1<<30))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -(1<<30))
		r = o.unsignedlonglongArg_andsignedlongArg_(1L << 62, -42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlongArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlongArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlongArg_(1L << 62, 1 << 30)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlonglongAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(0, -(1L << 60))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlonglongArg_andsignedlonglongArg_(0, -42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(0, 1L << 60)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(42, -(1L << 60))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlonglongArg_andsignedlonglongArg_(42, -42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(42, 1L << 60)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 60)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(1L << 62, -(1L << 60))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -(1L << 60))
		r = o.unsignedlonglongArg_andsignedlonglongArg_(1L << 62, -42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], -42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andsignedlonglongArg_(1L << 62, 1L << 60)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1L << 60)


	def testunsignedlonglongAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andunsignedcharArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedcharArg_(0, 128)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 128)
		r = o.unsignedlonglongArg_andunsignedcharArg_(0, 255)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 255)
		r = o.unsignedlonglongArg_andunsignedcharArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedcharArg_(42, 128)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 128)
		r = o.unsignedlonglongArg_andunsignedcharArg_(42, 255)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 255)
		r = o.unsignedlonglongArg_andunsignedcharArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedcharArg_(1L << 62, 128)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 128)
		r = o.unsignedlonglongArg_andunsignedcharArg_(1L << 62, 255)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 255)


	def testunsignedlonglongAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andunsignedshortArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedshortArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedshortArg_(0, 1<<14)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedlonglongArg_andunsignedshortArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedshortArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedshortArg_(42, 1<<14)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1<<14)
		r = o.unsignedlonglongArg_andunsignedshortArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedshortArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedshortArg_(1L << 62, 1<<14)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1<<14)


	def testunsignedlonglongAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andunsignedintArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedintArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedintArg_(0, 1 << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andunsignedintArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedintArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedintArg_(42, 1 << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1 << 30)
		r = o.unsignedlonglongArg_andunsignedintArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedintArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedintArg_(1L << 62, 1 << 30)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1 << 30)


	def testunsignedlonglongAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andunsignedlongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlongArg_(0, 1L << 30)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedlonglongArg_andunsignedlongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlongArg_(42, 1L << 30)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 30)
		r = o.unsignedlonglongArg_andunsignedlongArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlongArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlongArg_(1L << 62, 1L << 30)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1L << 30)


	def testunsignedlonglongAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(0, 0)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(0, 42)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(0, 1L << 62)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(42, 0)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(42, 42)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(42, 1L << 62)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], 1L << 62)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(1L << 62, 0)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 0)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(1L << 62, 42)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 42)
		r = o.unsignedlonglongArg_andunsignedlonglongArg_(1L << 62, 1L << 62)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], 1L << 62)


	def testunsignedlonglongAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andfloatArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_andfloatArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_andfloatArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_andfloatArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlonglongArg_andfloatArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_andfloatArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_andfloatArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_andfloatArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlonglongArg_andfloatArg_(1L << 62, 0.128)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_andfloatArg_(1L << 62, 1.0)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_andfloatArg_(1L << 62, 42.0)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_andfloatArg_(1L << 62, 1e10)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedlonglongAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_anddoubleArg_(0, 0.128)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_anddoubleArg_(0, 1.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_anddoubleArg_(0, 42.0)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_anddoubleArg_(0, 1e10)
		self.assertEquals(r[0], 0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlonglongArg_anddoubleArg_(42, 0.128)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_anddoubleArg_(42, 1.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_anddoubleArg_(42, 42.0)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_anddoubleArg_(42, 1e10)
		self.assertEquals(r[0], 42)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.unsignedlonglongArg_anddoubleArg_(1L << 62, 0.128)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.unsignedlonglongArg_anddoubleArg_(1L << 62, 1.0)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.unsignedlonglongArg_anddoubleArg_(1L << 62, 42.0)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.unsignedlonglongArg_anddoubleArg_(1L << 62, 1e10)
		self.assertEquals(r[0], 1L << 62)
		self.assertAlmostEquals(r[2], 1e10)


	def testunsignedlonglongAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andidArg_(0, nil)
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], nil)
		r = o.unsignedlonglongArg_andidArg_(42, nil)
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], nil)
		r = o.unsignedlonglongArg_andidArg_(1L << 62, nil)
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], nil)


	def testunsignedlonglongAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andcharPtrArg_(0, "hello")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlonglongArg_andcharPtrArg_(0, "world")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "world")
		r = o.unsignedlonglongArg_andcharPtrArg_(0, "foobar")
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedlonglongArg_andcharPtrArg_(42, "hello")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlonglongArg_andcharPtrArg_(42, "world")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "world")
		r = o.unsignedlonglongArg_andcharPtrArg_(42, "foobar")
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], "foobar")
		r = o.unsignedlonglongArg_andcharPtrArg_(1L << 62, "hello")
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], "hello")
		r = o.unsignedlonglongArg_andcharPtrArg_(1L << 62, "world")
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], "world")
		r = o.unsignedlonglongArg_andcharPtrArg_(1L << 62, "foobar")
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], "foobar")


	def testunsignedlonglongAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andNSPointArg_(0, (1, 2))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlonglongArg_andNSPointArg_(0, (3, 4))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedlonglongArg_andNSPointArg_(42, (1, 2))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlonglongArg_andNSPointArg_(42, (3, 4))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], (3, 4))
		r = o.unsignedlonglongArg_andNSPointArg_(1L << 62, (1, 2))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], (1, 2))
		r = o.unsignedlonglongArg_andNSPointArg_(1L << 62, (3, 4))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], (3, 4))


	def testunsignedlonglongAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongArg_andNSRectArg_(0, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlonglongArg_andNSRectArg_(0, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedlonglongArg_andNSRectArg_(42, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlonglongArg_andNSRectArg_(42, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 42)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.unsignedlonglongArg_andNSRectArg_(1L << 62, ((1, 2), (3, 4)))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.unsignedlonglongArg_andNSRectArg_(1L << 62, ((7, 8), (9, 10)))
		self.assertEquals(r[0], 1L << 62)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testfloatAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andBOOLArg_(0.128, YES)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], YES)
		r = o.floatArg_andBOOLArg_(0.128, NO)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], NO)
		r = o.floatArg_andBOOLArg_(1.0, YES)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], YES)
		r = o.floatArg_andBOOLArg_(1.0, NO)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], NO)
		r = o.floatArg_andBOOLArg_(42.0, YES)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], YES)
		r = o.floatArg_andBOOLArg_(42.0, NO)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], NO)
		r = o.floatArg_andBOOLArg_(1e10, YES)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], YES)
		r = o.floatArg_andBOOLArg_(1e10, NO)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], NO)


	def testfloatAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andcharArg_(0.128, -128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -128)
		r = o.floatArg_andcharArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andcharArg_(0.128, 127)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 127)
		r = o.floatArg_andcharArg_(1.0, -128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -128)
		r = o.floatArg_andcharArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andcharArg_(1.0, 127)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 127)
		r = o.floatArg_andcharArg_(42.0, -128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -128)
		r = o.floatArg_andcharArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andcharArg_(42.0, 127)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 127)
		r = o.floatArg_andcharArg_(1e10, -128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -128)
		r = o.floatArg_andcharArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andcharArg_(1e10, 127)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 127)


	def testfloatAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andsignedshortArg_(0.128, -(1<<14))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<14))
		r = o.floatArg_andsignedshortArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedshortArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedshortArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedshortArg_(0.128, 1 << 14)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 14)
		r = o.floatArg_andsignedshortArg_(1.0, -(1<<14))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<14))
		r = o.floatArg_andsignedshortArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedshortArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedshortArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedshortArg_(1.0, 1 << 14)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 14)
		r = o.floatArg_andsignedshortArg_(42.0, -(1<<14))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<14))
		r = o.floatArg_andsignedshortArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedshortArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedshortArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedshortArg_(42.0, 1 << 14)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 14)
		r = o.floatArg_andsignedshortArg_(1e10, -(1<<14))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<14))
		r = o.floatArg_andsignedshortArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedshortArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedshortArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedshortArg_(1e10, 1 << 14)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 14)


	def testfloatAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andsignedintArg_(0.128, -(1<<30))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedintArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedintArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedintArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedintArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedintArg_(1.0, -(1<<30))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedintArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedintArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedintArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedintArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedintArg_(42.0, -(1<<30))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedintArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedintArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedintArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedintArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedintArg_(1e10, -(1<<30))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedintArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedintArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedintArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedintArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testfloatAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andsignedlongArg_(0.128, -(1<<30))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedlongArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlongArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedlongArg_(1.0, -(1<<30))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedlongArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlongArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedlongArg_(42.0, -(1<<30))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedlongArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlongArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andsignedlongArg_(1e10, -(1<<30))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<30))
		r = o.floatArg_andsignedlongArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlongArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testfloatAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andsignedlonglongArg_(0.128, -(1L << 60))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1L << 60))
		r = o.floatArg_andsignedlonglongArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlonglongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlonglongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlonglongArg_(0.128, 1L << 60)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 60)
		r = o.floatArg_andsignedlonglongArg_(1.0, -(1L << 60))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.floatArg_andsignedlonglongArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlonglongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlonglongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlonglongArg_(1.0, 1L << 60)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 60)
		r = o.floatArg_andsignedlonglongArg_(42.0, -(1L << 60))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.floatArg_andsignedlonglongArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlonglongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlonglongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlonglongArg_(42.0, 1L << 60)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 60)
		r = o.floatArg_andsignedlonglongArg_(1e10, -(1L << 60))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1L << 60))
		r = o.floatArg_andsignedlonglongArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.floatArg_andsignedlonglongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andsignedlonglongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andsignedlonglongArg_(1e10, 1L << 60)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 60)


	def testfloatAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andunsignedcharArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedcharArg_(0.128, 128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 128)
		r = o.floatArg_andunsignedcharArg_(0.128, 255)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 255)
		r = o.floatArg_andunsignedcharArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedcharArg_(1.0, 128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 128)
		r = o.floatArg_andunsignedcharArg_(1.0, 255)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 255)
		r = o.floatArg_andunsignedcharArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedcharArg_(42.0, 128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 128)
		r = o.floatArg_andunsignedcharArg_(42.0, 255)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 255)
		r = o.floatArg_andunsignedcharArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedcharArg_(1e10, 128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 128)
		r = o.floatArg_andunsignedcharArg_(1e10, 255)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 255)


	def testfloatAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andunsignedshortArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedshortArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedshortArg_(0.128, 1<<14)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1<<14)
		r = o.floatArg_andunsignedshortArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedshortArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedshortArg_(1.0, 1<<14)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1<<14)
		r = o.floatArg_andunsignedshortArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedshortArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedshortArg_(42.0, 1<<14)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1<<14)
		r = o.floatArg_andunsignedshortArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedshortArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedshortArg_(1e10, 1<<14)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1<<14)


	def testfloatAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andunsignedintArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedintArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedintArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andunsignedintArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedintArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedintArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andunsignedintArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedintArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedintArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.floatArg_andunsignedintArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedintArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedintArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testfloatAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andunsignedlongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlongArg_(0.128, 1L << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 30)
		r = o.floatArg_andunsignedlongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlongArg_(1.0, 1L << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 30)
		r = o.floatArg_andunsignedlongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlongArg_(42.0, 1L << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 30)
		r = o.floatArg_andunsignedlongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlongArg_(1e10, 1L << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 30)


	def testfloatAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andunsignedlonglongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlonglongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlonglongArg_(0.128, 1L << 62)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 62)
		r = o.floatArg_andunsignedlonglongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlonglongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlonglongArg_(1.0, 1L << 62)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 62)
		r = o.floatArg_andunsignedlonglongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlonglongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlonglongArg_(42.0, 1L << 62)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 62)
		r = o.floatArg_andunsignedlonglongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.floatArg_andunsignedlonglongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.floatArg_andunsignedlonglongArg_(1e10, 1L << 62)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 62)


	def testfloatAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andfloatArg_(0.128, 0.128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_andfloatArg_(0.128, 1.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_andfloatArg_(0.128, 42.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_andfloatArg_(0.128, 1e10)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_andfloatArg_(1.0, 0.128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_andfloatArg_(1.0, 1.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_andfloatArg_(1.0, 42.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_andfloatArg_(1.0, 1e10)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_andfloatArg_(42.0, 0.128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_andfloatArg_(42.0, 1.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_andfloatArg_(42.0, 42.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_andfloatArg_(42.0, 1e10)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_andfloatArg_(1e10, 0.128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_andfloatArg_(1e10, 1.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_andfloatArg_(1e10, 42.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_andfloatArg_(1e10, 1e10)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1e10)


	def testfloatAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_anddoubleArg_(0.128, 0.128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_anddoubleArg_(0.128, 1.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_anddoubleArg_(0.128, 42.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_anddoubleArg_(0.128, 1e10)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_anddoubleArg_(1.0, 0.128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_anddoubleArg_(1.0, 1.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_anddoubleArg_(1.0, 42.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_anddoubleArg_(1.0, 1e10)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_anddoubleArg_(42.0, 0.128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_anddoubleArg_(42.0, 1.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_anddoubleArg_(42.0, 42.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_anddoubleArg_(42.0, 1e10)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.floatArg_anddoubleArg_(1e10, 0.128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.floatArg_anddoubleArg_(1e10, 1.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.floatArg_anddoubleArg_(1e10, 42.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.floatArg_anddoubleArg_(1e10, 1e10)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1e10)


	def testfloatAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andidArg_(0.128, nil)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], nil)
		r = o.floatArg_andidArg_(1.0, nil)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], nil)
		r = o.floatArg_andidArg_(42.0, nil)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], nil)
		r = o.floatArg_andidArg_(1e10, nil)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], nil)


	def testfloatAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andcharPtrArg_(0.128, "hello")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "hello")
		r = o.floatArg_andcharPtrArg_(0.128, "world")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "world")
		r = o.floatArg_andcharPtrArg_(0.128, "foobar")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "foobar")
		r = o.floatArg_andcharPtrArg_(1.0, "hello")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "hello")
		r = o.floatArg_andcharPtrArg_(1.0, "world")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "world")
		r = o.floatArg_andcharPtrArg_(1.0, "foobar")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "foobar")
		r = o.floatArg_andcharPtrArg_(42.0, "hello")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "hello")
		r = o.floatArg_andcharPtrArg_(42.0, "world")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "world")
		r = o.floatArg_andcharPtrArg_(42.0, "foobar")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "foobar")
		r = o.floatArg_andcharPtrArg_(1e10, "hello")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "hello")
		r = o.floatArg_andcharPtrArg_(1e10, "world")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "world")
		r = o.floatArg_andcharPtrArg_(1e10, "foobar")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "foobar")


	def testfloatAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andNSPointArg_(0.128, (1, 2))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], (1, 2))
		r = o.floatArg_andNSPointArg_(0.128, (3, 4))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], (3, 4))
		r = o.floatArg_andNSPointArg_(1.0, (1, 2))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], (1, 2))
		r = o.floatArg_andNSPointArg_(1.0, (3, 4))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], (3, 4))
		r = o.floatArg_andNSPointArg_(42.0, (1, 2))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], (1, 2))
		r = o.floatArg_andNSPointArg_(42.0, (3, 4))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], (3, 4))
		r = o.floatArg_andNSPointArg_(1e10, (1, 2))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], (1, 2))
		r = o.floatArg_andNSPointArg_(1e10, (3, 4))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], (3, 4))


	def testfloatAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatArg_andNSRectArg_(0.128, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.floatArg_andNSRectArg_(0.128, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.floatArg_andNSRectArg_(1.0, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.floatArg_andNSRectArg_(1.0, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.floatArg_andNSRectArg_(42.0, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.floatArg_andNSRectArg_(42.0, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.floatArg_andNSRectArg_(1e10, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.floatArg_andNSRectArg_(1e10, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testdoubleAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andBOOLArg_(0.128, YES)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], YES)
		r = o.doubleArg_andBOOLArg_(0.128, NO)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], NO)
		r = o.doubleArg_andBOOLArg_(1.0, YES)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], YES)
		r = o.doubleArg_andBOOLArg_(1.0, NO)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], NO)
		r = o.doubleArg_andBOOLArg_(42.0, YES)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], YES)
		r = o.doubleArg_andBOOLArg_(42.0, NO)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], NO)
		r = o.doubleArg_andBOOLArg_(1e10, YES)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], YES)
		r = o.doubleArg_andBOOLArg_(1e10, NO)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], NO)


	def testdoubleAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andcharArg_(0.128, -128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -128)
		r = o.doubleArg_andcharArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andcharArg_(0.128, 127)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 127)
		r = o.doubleArg_andcharArg_(1.0, -128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -128)
		r = o.doubleArg_andcharArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andcharArg_(1.0, 127)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 127)
		r = o.doubleArg_andcharArg_(42.0, -128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -128)
		r = o.doubleArg_andcharArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andcharArg_(42.0, 127)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 127)
		r = o.doubleArg_andcharArg_(1e10, -128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -128)
		r = o.doubleArg_andcharArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andcharArg_(1e10, 127)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 127)


	def testdoubleAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andsignedshortArg_(0.128, -(1<<14))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<14))
		r = o.doubleArg_andsignedshortArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedshortArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedshortArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedshortArg_(0.128, 1 << 14)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 14)
		r = o.doubleArg_andsignedshortArg_(1.0, -(1<<14))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<14))
		r = o.doubleArg_andsignedshortArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedshortArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedshortArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedshortArg_(1.0, 1 << 14)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 14)
		r = o.doubleArg_andsignedshortArg_(42.0, -(1<<14))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<14))
		r = o.doubleArg_andsignedshortArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedshortArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedshortArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedshortArg_(42.0, 1 << 14)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 14)
		r = o.doubleArg_andsignedshortArg_(1e10, -(1<<14))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<14))
		r = o.doubleArg_andsignedshortArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedshortArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedshortArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedshortArg_(1e10, 1 << 14)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 14)


	def testdoubleAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andsignedintArg_(0.128, -(1<<30))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedintArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedintArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedintArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedintArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedintArg_(1.0, -(1<<30))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedintArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedintArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedintArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedintArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedintArg_(42.0, -(1<<30))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedintArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedintArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedintArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedintArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedintArg_(1e10, -(1<<30))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedintArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedintArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedintArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedintArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testdoubleAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andsignedlongArg_(0.128, -(1<<30))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedlongArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlongArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedlongArg_(1.0, -(1<<30))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedlongArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlongArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedlongArg_(42.0, -(1<<30))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedlongArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlongArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andsignedlongArg_(1e10, -(1<<30))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1<<30))
		r = o.doubleArg_andsignedlongArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlongArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testdoubleAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andsignedlonglongArg_(0.128, -(1L << 60))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -(1L << 60))
		r = o.doubleArg_andsignedlonglongArg_(0.128, -42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlonglongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlonglongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlonglongArg_(0.128, 1L << 60)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 60)
		r = o.doubleArg_andsignedlonglongArg_(1.0, -(1L << 60))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.doubleArg_andsignedlonglongArg_(1.0, -42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlonglongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlonglongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlonglongArg_(1.0, 1L << 60)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 60)
		r = o.doubleArg_andsignedlonglongArg_(42.0, -(1L << 60))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -(1L << 60))
		r = o.doubleArg_andsignedlonglongArg_(42.0, -42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlonglongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlonglongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlonglongArg_(42.0, 1L << 60)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 60)
		r = o.doubleArg_andsignedlonglongArg_(1e10, -(1L << 60))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -(1L << 60))
		r = o.doubleArg_andsignedlonglongArg_(1e10, -42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], -42)
		r = o.doubleArg_andsignedlonglongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andsignedlonglongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andsignedlonglongArg_(1e10, 1L << 60)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 60)


	def testdoubleAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andunsignedcharArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedcharArg_(0.128, 128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 128)
		r = o.doubleArg_andunsignedcharArg_(0.128, 255)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 255)
		r = o.doubleArg_andunsignedcharArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedcharArg_(1.0, 128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 128)
		r = o.doubleArg_andunsignedcharArg_(1.0, 255)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 255)
		r = o.doubleArg_andunsignedcharArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedcharArg_(42.0, 128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 128)
		r = o.doubleArg_andunsignedcharArg_(42.0, 255)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 255)
		r = o.doubleArg_andunsignedcharArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedcharArg_(1e10, 128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 128)
		r = o.doubleArg_andunsignedcharArg_(1e10, 255)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 255)


	def testdoubleAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andunsignedshortArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedshortArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedshortArg_(0.128, 1<<14)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1<<14)
		r = o.doubleArg_andunsignedshortArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedshortArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedshortArg_(1.0, 1<<14)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1<<14)
		r = o.doubleArg_andunsignedshortArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedshortArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedshortArg_(42.0, 1<<14)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1<<14)
		r = o.doubleArg_andunsignedshortArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedshortArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedshortArg_(1e10, 1<<14)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1<<14)


	def testdoubleAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andunsignedintArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedintArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedintArg_(0.128, 1 << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andunsignedintArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedintArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedintArg_(1.0, 1 << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andunsignedintArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedintArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedintArg_(42.0, 1 << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1 << 30)
		r = o.doubleArg_andunsignedintArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedintArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedintArg_(1e10, 1 << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1 << 30)


	def testdoubleAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andunsignedlongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlongArg_(0.128, 1L << 30)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 30)
		r = o.doubleArg_andunsignedlongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlongArg_(1.0, 1L << 30)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 30)
		r = o.doubleArg_andunsignedlongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlongArg_(42.0, 1L << 30)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 30)
		r = o.doubleArg_andunsignedlongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlongArg_(1e10, 1L << 30)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 30)


	def testdoubleAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andunsignedlonglongArg_(0.128, 0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlonglongArg_(0.128, 42)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlonglongArg_(0.128, 1L << 62)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], 1L << 62)
		r = o.doubleArg_andunsignedlonglongArg_(1.0, 0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlonglongArg_(1.0, 42)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlonglongArg_(1.0, 1L << 62)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], 1L << 62)
		r = o.doubleArg_andunsignedlonglongArg_(42.0, 0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlonglongArg_(42.0, 42)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlonglongArg_(42.0, 1L << 62)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], 1L << 62)
		r = o.doubleArg_andunsignedlonglongArg_(1e10, 0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 0)
		r = o.doubleArg_andunsignedlonglongArg_(1e10, 42)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 42)
		r = o.doubleArg_andunsignedlonglongArg_(1e10, 1L << 62)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], 1L << 62)


	def testdoubleAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andfloatArg_(0.128, 0.128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_andfloatArg_(0.128, 1.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_andfloatArg_(0.128, 42.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_andfloatArg_(0.128, 1e10)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_andfloatArg_(1.0, 0.128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_andfloatArg_(1.0, 1.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_andfloatArg_(1.0, 42.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_andfloatArg_(1.0, 1e10)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_andfloatArg_(42.0, 0.128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_andfloatArg_(42.0, 1.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_andfloatArg_(42.0, 42.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_andfloatArg_(42.0, 1e10)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_andfloatArg_(1e10, 0.128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_andfloatArg_(1e10, 1.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_andfloatArg_(1e10, 42.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_andfloatArg_(1e10, 1e10)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1e10)


	def testdoubleAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_anddoubleArg_(0.128, 0.128)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_anddoubleArg_(0.128, 1.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_anddoubleArg_(0.128, 42.0)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_anddoubleArg_(0.128, 1e10)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_anddoubleArg_(1.0, 0.128)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_anddoubleArg_(1.0, 1.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_anddoubleArg_(1.0, 42.0)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_anddoubleArg_(1.0, 1e10)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_anddoubleArg_(42.0, 0.128)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_anddoubleArg_(42.0, 1.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_anddoubleArg_(42.0, 42.0)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_anddoubleArg_(42.0, 1e10)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertAlmostEquals(r[2], 1e10)
		r = o.doubleArg_anddoubleArg_(1e10, 0.128)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.doubleArg_anddoubleArg_(1e10, 1.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.doubleArg_anddoubleArg_(1e10, 42.0)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.doubleArg_anddoubleArg_(1e10, 1e10)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertAlmostEquals(r[2], 1e10)


	def testdoubleAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andidArg_(0.128, nil)
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], nil)
		r = o.doubleArg_andidArg_(1.0, nil)
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], nil)
		r = o.doubleArg_andidArg_(42.0, nil)
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], nil)
		r = o.doubleArg_andidArg_(1e10, nil)
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], nil)


	def testdoubleAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andcharPtrArg_(0.128, "hello")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "hello")
		r = o.doubleArg_andcharPtrArg_(0.128, "world")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "world")
		r = o.doubleArg_andcharPtrArg_(0.128, "foobar")
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], "foobar")
		r = o.doubleArg_andcharPtrArg_(1.0, "hello")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "hello")
		r = o.doubleArg_andcharPtrArg_(1.0, "world")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "world")
		r = o.doubleArg_andcharPtrArg_(1.0, "foobar")
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], "foobar")
		r = o.doubleArg_andcharPtrArg_(42.0, "hello")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "hello")
		r = o.doubleArg_andcharPtrArg_(42.0, "world")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "world")
		r = o.doubleArg_andcharPtrArg_(42.0, "foobar")
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], "foobar")
		r = o.doubleArg_andcharPtrArg_(1e10, "hello")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "hello")
		r = o.doubleArg_andcharPtrArg_(1e10, "world")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "world")
		r = o.doubleArg_andcharPtrArg_(1e10, "foobar")
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], "foobar")


	def testdoubleAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andNSPointArg_(0.128, (1, 2))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], (1, 2))
		r = o.doubleArg_andNSPointArg_(0.128, (3, 4))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], (3, 4))
		r = o.doubleArg_andNSPointArg_(1.0, (1, 2))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], (1, 2))
		r = o.doubleArg_andNSPointArg_(1.0, (3, 4))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], (3, 4))
		r = o.doubleArg_andNSPointArg_(42.0, (1, 2))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], (1, 2))
		r = o.doubleArg_andNSPointArg_(42.0, (3, 4))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], (3, 4))
		r = o.doubleArg_andNSPointArg_(1e10, (1, 2))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], (1, 2))
		r = o.doubleArg_andNSPointArg_(1e10, (3, 4))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], (3, 4))


	def testdoubleAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleArg_andNSRectArg_(0.128, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.doubleArg_andNSRectArg_(0.128, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 0.128)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.doubleArg_andNSRectArg_(1.0, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.doubleArg_andNSRectArg_(1.0, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 1.0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.doubleArg_andNSRectArg_(42.0, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.doubleArg_andNSRectArg_(42.0, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 42.0)
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.doubleArg_andNSRectArg_(1e10, ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.doubleArg_andNSRectArg_(1e10, ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[0], 1e10)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testidAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andBOOLArg_(nil, YES)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], YES)
		r = o.idArg_andBOOLArg_(nil, NO)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], NO)


	def testidAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andcharArg_(nil, -128)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -128)
		r = o.idArg_andcharArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andcharArg_(nil, 127)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 127)


	def testidAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andsignedshortArg_(nil, -(1<<14))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -(1<<14))
		r = o.idArg_andsignedshortArg_(nil, -42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -42)
		r = o.idArg_andsignedshortArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andsignedshortArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andsignedshortArg_(nil, 1 << 14)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1 << 14)


	def testidAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andsignedintArg_(nil, -(1<<30))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -(1<<30))
		r = o.idArg_andsignedintArg_(nil, -42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -42)
		r = o.idArg_andsignedintArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andsignedintArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andsignedintArg_(nil, 1 << 30)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1 << 30)


	def testidAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andsignedlongArg_(nil, -(1<<30))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -(1<<30))
		r = o.idArg_andsignedlongArg_(nil, -42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -42)
		r = o.idArg_andsignedlongArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andsignedlongArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andsignedlongArg_(nil, 1 << 30)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1 << 30)


	def testidAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andsignedlonglongArg_(nil, -(1L << 60))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -(1L << 60))
		r = o.idArg_andsignedlonglongArg_(nil, -42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], -42)
		r = o.idArg_andsignedlonglongArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andsignedlonglongArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andsignedlonglongArg_(nil, 1L << 60)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1L << 60)


	def testidAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andunsignedcharArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andunsignedcharArg_(nil, 128)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 128)
		r = o.idArg_andunsignedcharArg_(nil, 255)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 255)


	def testidAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andunsignedshortArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andunsignedshortArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andunsignedshortArg_(nil, 1<<14)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1<<14)


	def testidAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andunsignedintArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andunsignedintArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andunsignedintArg_(nil, 1 << 30)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1 << 30)


	def testidAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andunsignedlongArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andunsignedlongArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andunsignedlongArg_(nil, 1L << 30)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1L << 30)


	def testidAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andunsignedlonglongArg_(nil, 0)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 0)
		r = o.idArg_andunsignedlonglongArg_(nil, 42)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 42)
		r = o.idArg_andunsignedlonglongArg_(nil, 1L << 62)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], 1L << 62)


	def testidAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andfloatArg_(nil, 0.128)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.idArg_andfloatArg_(nil, 1.0)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.idArg_andfloatArg_(nil, 42.0)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.idArg_andfloatArg_(nil, 1e10)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 1e10)


	def testidAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_anddoubleArg_(nil, 0.128)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 0.128)
		r = o.idArg_anddoubleArg_(nil, 1.0)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 1.0)
		r = o.idArg_anddoubleArg_(nil, 42.0)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 42.0)
		r = o.idArg_anddoubleArg_(nil, 1e10)
		self.assertEquals(r[0], nil)
		self.assertAlmostEquals(r[2], 1e10)


	def testidAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andidArg_(nil, nil)
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], nil)


	def testidAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andcharPtrArg_(nil, "hello")
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], "hello")
		r = o.idArg_andcharPtrArg_(nil, "world")
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], "world")
		r = o.idArg_andcharPtrArg_(nil, "foobar")
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], "foobar")


	def testidAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andNSPointArg_(nil, (1, 2))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], (1, 2))
		r = o.idArg_andNSPointArg_(nil, (3, 4))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], (3, 4))


	def testidAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idArg_andNSRectArg_(nil, ((1, 2), (3, 4)))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.idArg_andNSRectArg_(nil, ((7, 8), (9, 10)))
		self.assertEquals(r[0], nil)
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testcharPtrAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andBOOLArg_("hello", YES)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], YES)
		r = o.charPtrArg_andBOOLArg_("hello", NO)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], NO)
		r = o.charPtrArg_andBOOLArg_("world", YES)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], YES)
		r = o.charPtrArg_andBOOLArg_("world", NO)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], NO)
		r = o.charPtrArg_andBOOLArg_("foobar", YES)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], YES)
		r = o.charPtrArg_andBOOLArg_("foobar", NO)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], NO)


	def testcharPtrAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andcharArg_("hello", -128)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -128)
		r = o.charPtrArg_andcharArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andcharArg_("hello", 127)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 127)
		r = o.charPtrArg_andcharArg_("world", -128)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -128)
		r = o.charPtrArg_andcharArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andcharArg_("world", 127)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 127)
		r = o.charPtrArg_andcharArg_("foobar", -128)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -128)
		r = o.charPtrArg_andcharArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andcharArg_("foobar", 127)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 127)


	def testcharPtrAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andsignedshortArg_("hello", -(1<<14))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -(1<<14))
		r = o.charPtrArg_andsignedshortArg_("hello", -42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedshortArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedshortArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedshortArg_("hello", 1 << 14)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1 << 14)
		r = o.charPtrArg_andsignedshortArg_("world", -(1<<14))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -(1<<14))
		r = o.charPtrArg_andsignedshortArg_("world", -42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedshortArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedshortArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedshortArg_("world", 1 << 14)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1 << 14)
		r = o.charPtrArg_andsignedshortArg_("foobar", -(1<<14))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -(1<<14))
		r = o.charPtrArg_andsignedshortArg_("foobar", -42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedshortArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedshortArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedshortArg_("foobar", 1 << 14)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1 << 14)


	def testcharPtrAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andsignedintArg_("hello", -(1<<30))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedintArg_("hello", -42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedintArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedintArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedintArg_("hello", 1 << 30)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andsignedintArg_("world", -(1<<30))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedintArg_("world", -42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedintArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedintArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedintArg_("world", 1 << 30)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andsignedintArg_("foobar", -(1<<30))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedintArg_("foobar", -42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedintArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedintArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedintArg_("foobar", 1 << 30)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1 << 30)


	def testcharPtrAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andsignedlongArg_("hello", -(1<<30))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedlongArg_("hello", -42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlongArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlongArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlongArg_("hello", 1 << 30)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andsignedlongArg_("world", -(1<<30))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedlongArg_("world", -42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlongArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlongArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlongArg_("world", 1 << 30)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andsignedlongArg_("foobar", -(1<<30))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -(1<<30))
		r = o.charPtrArg_andsignedlongArg_("foobar", -42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlongArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlongArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlongArg_("foobar", 1 << 30)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1 << 30)


	def testcharPtrAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andsignedlonglongArg_("hello", -(1L << 60))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -(1L << 60))
		r = o.charPtrArg_andsignedlonglongArg_("hello", -42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlonglongArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlonglongArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlonglongArg_("hello", 1L << 60)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1L << 60)
		r = o.charPtrArg_andsignedlonglongArg_("world", -(1L << 60))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -(1L << 60))
		r = o.charPtrArg_andsignedlonglongArg_("world", -42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlonglongArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlonglongArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlonglongArg_("world", 1L << 60)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1L << 60)
		r = o.charPtrArg_andsignedlonglongArg_("foobar", -(1L << 60))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -(1L << 60))
		r = o.charPtrArg_andsignedlonglongArg_("foobar", -42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], -42)
		r = o.charPtrArg_andsignedlonglongArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andsignedlonglongArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andsignedlonglongArg_("foobar", 1L << 60)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1L << 60)


	def testcharPtrAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andunsignedcharArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedcharArg_("hello", 128)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 128)
		r = o.charPtrArg_andunsignedcharArg_("hello", 255)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 255)
		r = o.charPtrArg_andunsignedcharArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedcharArg_("world", 128)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 128)
		r = o.charPtrArg_andunsignedcharArg_("world", 255)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 255)
		r = o.charPtrArg_andunsignedcharArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedcharArg_("foobar", 128)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 128)
		r = o.charPtrArg_andunsignedcharArg_("foobar", 255)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 255)


	def testcharPtrAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andunsignedshortArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedshortArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedshortArg_("hello", 1<<14)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1<<14)
		r = o.charPtrArg_andunsignedshortArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedshortArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedshortArg_("world", 1<<14)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1<<14)
		r = o.charPtrArg_andunsignedshortArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedshortArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedshortArg_("foobar", 1<<14)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1<<14)


	def testcharPtrAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andunsignedintArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedintArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedintArg_("hello", 1 << 30)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andunsignedintArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedintArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedintArg_("world", 1 << 30)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1 << 30)
		r = o.charPtrArg_andunsignedintArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedintArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedintArg_("foobar", 1 << 30)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1 << 30)


	def testcharPtrAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andunsignedlongArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlongArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlongArg_("hello", 1L << 30)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1L << 30)
		r = o.charPtrArg_andunsignedlongArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlongArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlongArg_("world", 1L << 30)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1L << 30)
		r = o.charPtrArg_andunsignedlongArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlongArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlongArg_("foobar", 1L << 30)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1L << 30)


	def testcharPtrAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andunsignedlonglongArg_("hello", 0)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlonglongArg_("hello", 42)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlonglongArg_("hello", 1L << 62)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], 1L << 62)
		r = o.charPtrArg_andunsignedlonglongArg_("world", 0)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlonglongArg_("world", 42)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlonglongArg_("world", 1L << 62)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], 1L << 62)
		r = o.charPtrArg_andunsignedlonglongArg_("foobar", 0)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 0)
		r = o.charPtrArg_andunsignedlonglongArg_("foobar", 42)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 42)
		r = o.charPtrArg_andunsignedlonglongArg_("foobar", 1L << 62)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], 1L << 62)


	def testcharPtrAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andfloatArg_("hello", 0.128)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_andfloatArg_("hello", 1.0)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_andfloatArg_("hello", 42.0)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_andfloatArg_("hello", 1e10)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charPtrArg_andfloatArg_("world", 0.128)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_andfloatArg_("world", 1.0)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_andfloatArg_("world", 42.0)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_andfloatArg_("world", 1e10)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charPtrArg_andfloatArg_("foobar", 0.128)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_andfloatArg_("foobar", 1.0)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_andfloatArg_("foobar", 42.0)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_andfloatArg_("foobar", 1e10)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 1e10)


	def testcharPtrAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_anddoubleArg_("hello", 0.128)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_anddoubleArg_("hello", 1.0)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_anddoubleArg_("hello", 42.0)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_anddoubleArg_("hello", 1e10)
		self.assertEquals(r[0], "hello")
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charPtrArg_anddoubleArg_("world", 0.128)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_anddoubleArg_("world", 1.0)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_anddoubleArg_("world", 42.0)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_anddoubleArg_("world", 1e10)
		self.assertEquals(r[0], "world")
		self.assertAlmostEquals(r[2], 1e10)
		r = o.charPtrArg_anddoubleArg_("foobar", 0.128)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 0.128)
		r = o.charPtrArg_anddoubleArg_("foobar", 1.0)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 1.0)
		r = o.charPtrArg_anddoubleArg_("foobar", 42.0)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 42.0)
		r = o.charPtrArg_anddoubleArg_("foobar", 1e10)
		self.assertEquals(r[0], "foobar")
		self.assertAlmostEquals(r[2], 1e10)


	def testcharPtrAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andidArg_("hello", nil)
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], nil)
		r = o.charPtrArg_andidArg_("world", nil)
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], nil)
		r = o.charPtrArg_andidArg_("foobar", nil)
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], nil)


	def testcharPtrAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andcharPtrArg_("hello", "hello")
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], "hello")
		r = o.charPtrArg_andcharPtrArg_("hello", "world")
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], "world")
		r = o.charPtrArg_andcharPtrArg_("hello", "foobar")
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], "foobar")
		r = o.charPtrArg_andcharPtrArg_("world", "hello")
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], "hello")
		r = o.charPtrArg_andcharPtrArg_("world", "world")
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], "world")
		r = o.charPtrArg_andcharPtrArg_("world", "foobar")
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], "foobar")
		r = o.charPtrArg_andcharPtrArg_("foobar", "hello")
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], "hello")
		r = o.charPtrArg_andcharPtrArg_("foobar", "world")
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], "world")
		r = o.charPtrArg_andcharPtrArg_("foobar", "foobar")
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], "foobar")


	def testcharPtrAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andNSPointArg_("hello", (1, 2))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], (1, 2))
		r = o.charPtrArg_andNSPointArg_("hello", (3, 4))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], (3, 4))
		r = o.charPtrArg_andNSPointArg_("world", (1, 2))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], (1, 2))
		r = o.charPtrArg_andNSPointArg_("world", (3, 4))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], (3, 4))
		r = o.charPtrArg_andNSPointArg_("foobar", (1, 2))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], (1, 2))
		r = o.charPtrArg_andNSPointArg_("foobar", (3, 4))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], (3, 4))


	def testcharPtrAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrArg_andNSRectArg_("hello", ((1, 2), (3, 4)))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charPtrArg_andNSRectArg_("hello", ((7, 8), (9, 10)))
		self.assertEquals(r[0], "hello")
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.charPtrArg_andNSRectArg_("world", ((1, 2), (3, 4)))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charPtrArg_andNSRectArg_("world", ((7, 8), (9, 10)))
		self.assertEquals(r[0], "world")
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.charPtrArg_andNSRectArg_("foobar", ((1, 2), (3, 4)))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.charPtrArg_andNSRectArg_("foobar", ((7, 8), (9, 10)))
		self.assertEquals(r[0], "foobar")
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testNSPointAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andBOOLArg_((1, 2), YES)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], YES)
		r = o.NSPointArg_andBOOLArg_((1, 2), NO)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], NO)
		r = o.NSPointArg_andBOOLArg_((3, 4), YES)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], YES)
		r = o.NSPointArg_andBOOLArg_((3, 4), NO)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], NO)


	def testNSPointAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andcharArg_((1, 2), -128)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -128)
		r = o.NSPointArg_andcharArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andcharArg_((1, 2), 127)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 127)
		r = o.NSPointArg_andcharArg_((3, 4), -128)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -128)
		r = o.NSPointArg_andcharArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andcharArg_((3, 4), 127)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 127)


	def testNSPointAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andsignedshortArg_((1, 2), -(1<<14))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -(1<<14))
		r = o.NSPointArg_andsignedshortArg_((1, 2), -42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedshortArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedshortArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedshortArg_((1, 2), 1 << 14)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1 << 14)
		r = o.NSPointArg_andsignedshortArg_((3, 4), -(1<<14))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -(1<<14))
		r = o.NSPointArg_andsignedshortArg_((3, 4), -42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedshortArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedshortArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedshortArg_((3, 4), 1 << 14)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1 << 14)


	def testNSPointAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andsignedintArg_((1, 2), -(1<<30))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSPointArg_andsignedintArg_((1, 2), -42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedintArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedintArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedintArg_((1, 2), 1 << 30)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSPointArg_andsignedintArg_((3, 4), -(1<<30))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSPointArg_andsignedintArg_((3, 4), -42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedintArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedintArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedintArg_((3, 4), 1 << 30)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1 << 30)


	def testNSPointAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andsignedlongArg_((1, 2), -(1<<30))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSPointArg_andsignedlongArg_((1, 2), -42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedlongArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedlongArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedlongArg_((1, 2), 1 << 30)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSPointArg_andsignedlongArg_((3, 4), -(1<<30))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSPointArg_andsignedlongArg_((3, 4), -42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedlongArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedlongArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedlongArg_((3, 4), 1 << 30)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1 << 30)


	def testNSPointAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andsignedlonglongArg_((1, 2), -(1L << 60))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -(1L << 60))
		r = o.NSPointArg_andsignedlonglongArg_((1, 2), -42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedlonglongArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedlonglongArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedlonglongArg_((1, 2), 1L << 60)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1L << 60)
		r = o.NSPointArg_andsignedlonglongArg_((3, 4), -(1L << 60))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -(1L << 60))
		r = o.NSPointArg_andsignedlonglongArg_((3, 4), -42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], -42)
		r = o.NSPointArg_andsignedlonglongArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andsignedlonglongArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andsignedlonglongArg_((3, 4), 1L << 60)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1L << 60)


	def testNSPointAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andunsignedcharArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedcharArg_((1, 2), 128)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 128)
		r = o.NSPointArg_andunsignedcharArg_((1, 2), 255)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 255)
		r = o.NSPointArg_andunsignedcharArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedcharArg_((3, 4), 128)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 128)
		r = o.NSPointArg_andunsignedcharArg_((3, 4), 255)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 255)


	def testNSPointAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andunsignedshortArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedshortArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedshortArg_((1, 2), 1<<14)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1<<14)
		r = o.NSPointArg_andunsignedshortArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedshortArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedshortArg_((3, 4), 1<<14)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1<<14)


	def testNSPointAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andunsignedintArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedintArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedintArg_((1, 2), 1 << 30)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSPointArg_andunsignedintArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedintArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedintArg_((3, 4), 1 << 30)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1 << 30)


	def testNSPointAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andunsignedlongArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedlongArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedlongArg_((1, 2), 1L << 30)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1L << 30)
		r = o.NSPointArg_andunsignedlongArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedlongArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedlongArg_((3, 4), 1L << 30)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1L << 30)


	def testNSPointAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andunsignedlonglongArg_((1, 2), 0)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedlonglongArg_((1, 2), 42)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedlonglongArg_((1, 2), 1L << 62)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], 1L << 62)
		r = o.NSPointArg_andunsignedlonglongArg_((3, 4), 0)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 0)
		r = o.NSPointArg_andunsignedlonglongArg_((3, 4), 42)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 42)
		r = o.NSPointArg_andunsignedlonglongArg_((3, 4), 1L << 62)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], 1L << 62)


	def testNSPointAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andfloatArg_((1, 2), 0.128)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSPointArg_andfloatArg_((1, 2), 1.0)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSPointArg_andfloatArg_((1, 2), 42.0)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSPointArg_andfloatArg_((1, 2), 1e10)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.NSPointArg_andfloatArg_((3, 4), 0.128)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSPointArg_andfloatArg_((3, 4), 1.0)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSPointArg_andfloatArg_((3, 4), 42.0)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSPointArg_andfloatArg_((3, 4), 1e10)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 1e10)


	def testNSPointAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_anddoubleArg_((1, 2), 0.128)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSPointArg_anddoubleArg_((1, 2), 1.0)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSPointArg_anddoubleArg_((1, 2), 42.0)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSPointArg_anddoubleArg_((1, 2), 1e10)
		self.assertEquals(r[0], (1, 2))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.NSPointArg_anddoubleArg_((3, 4), 0.128)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSPointArg_anddoubleArg_((3, 4), 1.0)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSPointArg_anddoubleArg_((3, 4), 42.0)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSPointArg_anddoubleArg_((3, 4), 1e10)
		self.assertEquals(r[0], (3, 4))
		self.assertAlmostEquals(r[2], 1e10)


	def testNSPointAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andidArg_((1, 2), nil)
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], nil)
		r = o.NSPointArg_andidArg_((3, 4), nil)
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], nil)


	def testNSPointAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andcharPtrArg_((1, 2), "hello")
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], "hello")
		r = o.NSPointArg_andcharPtrArg_((1, 2), "world")
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], "world")
		r = o.NSPointArg_andcharPtrArg_((1, 2), "foobar")
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], "foobar")
		r = o.NSPointArg_andcharPtrArg_((3, 4), "hello")
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], "hello")
		r = o.NSPointArg_andcharPtrArg_((3, 4), "world")
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], "world")
		r = o.NSPointArg_andcharPtrArg_((3, 4), "foobar")
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], "foobar")


	def testNSPointAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andNSPointArg_((1, 2), (1, 2))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], (1, 2))
		r = o.NSPointArg_andNSPointArg_((1, 2), (3, 4))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], (3, 4))
		r = o.NSPointArg_andNSPointArg_((3, 4), (1, 2))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], (1, 2))
		r = o.NSPointArg_andNSPointArg_((3, 4), (3, 4))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], (3, 4))


	def testNSPointAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointArg_andNSRectArg_((1, 2), ((1, 2), (3, 4)))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.NSPointArg_andNSRectArg_((1, 2), ((7, 8), (9, 10)))
		self.assertEquals(r[0], (1, 2))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.NSPointArg_andNSRectArg_((3, 4), ((1, 2), (3, 4)))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.NSPointArg_andNSRectArg_((3, 4), ((7, 8), (9, 10)))
		self.assertEquals(r[0], (3, 4))
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	def testNSRectAndBOOLArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andBOOLArg_(((1, 2), (3, 4)), YES)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], YES)
		r = o.NSRectArg_andBOOLArg_(((1, 2), (3, 4)), NO)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], NO)
		r = o.NSRectArg_andBOOLArg_(((7, 8), (9, 10)), YES)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], YES)
		r = o.NSRectArg_andBOOLArg_(((7, 8), (9, 10)), NO)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], NO)


	def testNSRectAndcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andcharArg_(((1, 2), (3, 4)), -128)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -128)
		r = o.NSRectArg_andcharArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andcharArg_(((1, 2), (3, 4)), 127)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 127)
		r = o.NSRectArg_andcharArg_(((7, 8), (9, 10)), -128)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -128)
		r = o.NSRectArg_andcharArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andcharArg_(((7, 8), (9, 10)), 127)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 127)


	def testNSRectAndsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andsignedshortArg_(((1, 2), (3, 4)), -(1<<14))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -(1<<14))
		r = o.NSRectArg_andsignedshortArg_(((1, 2), (3, 4)), -42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedshortArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedshortArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedshortArg_(((1, 2), (3, 4)), 1 << 14)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1 << 14)
		r = o.NSRectArg_andsignedshortArg_(((7, 8), (9, 10)), -(1<<14))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -(1<<14))
		r = o.NSRectArg_andsignedshortArg_(((7, 8), (9, 10)), -42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedshortArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedshortArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedshortArg_(((7, 8), (9, 10)), 1 << 14)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1 << 14)


	def testNSRectAndsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andsignedintArg_(((1, 2), (3, 4)), -(1<<30))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSRectArg_andsignedintArg_(((1, 2), (3, 4)), -42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedintArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedintArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedintArg_(((1, 2), (3, 4)), 1 << 30)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSRectArg_andsignedintArg_(((7, 8), (9, 10)), -(1<<30))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSRectArg_andsignedintArg_(((7, 8), (9, 10)), -42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedintArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedintArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedintArg_(((7, 8), (9, 10)), 1 << 30)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1 << 30)


	def testNSRectAndsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andsignedlongArg_(((1, 2), (3, 4)), -(1<<30))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSRectArg_andsignedlongArg_(((1, 2), (3, 4)), -42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedlongArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedlongArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedlongArg_(((1, 2), (3, 4)), 1 << 30)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSRectArg_andsignedlongArg_(((7, 8), (9, 10)), -(1<<30))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -(1<<30))
		r = o.NSRectArg_andsignedlongArg_(((7, 8), (9, 10)), -42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedlongArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedlongArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedlongArg_(((7, 8), (9, 10)), 1 << 30)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1 << 30)


	def testNSRectAndsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andsignedlonglongArg_(((1, 2), (3, 4)), -(1L << 60))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -(1L << 60))
		r = o.NSRectArg_andsignedlonglongArg_(((1, 2), (3, 4)), -42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedlonglongArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedlonglongArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedlonglongArg_(((1, 2), (3, 4)), 1L << 60)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1L << 60)
		r = o.NSRectArg_andsignedlonglongArg_(((7, 8), (9, 10)), -(1L << 60))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -(1L << 60))
		r = o.NSRectArg_andsignedlonglongArg_(((7, 8), (9, 10)), -42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], -42)
		r = o.NSRectArg_andsignedlonglongArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andsignedlonglongArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andsignedlonglongArg_(((7, 8), (9, 10)), 1L << 60)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1L << 60)


	def testNSRectAndunsignedcharArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andunsignedcharArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedcharArg_(((1, 2), (3, 4)), 128)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 128)
		r = o.NSRectArg_andunsignedcharArg_(((1, 2), (3, 4)), 255)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 255)
		r = o.NSRectArg_andunsignedcharArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedcharArg_(((7, 8), (9, 10)), 128)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 128)
		r = o.NSRectArg_andunsignedcharArg_(((7, 8), (9, 10)), 255)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 255)


	def testNSRectAndunsignedshortArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andunsignedshortArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedshortArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedshortArg_(((1, 2), (3, 4)), 1<<14)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1<<14)
		r = o.NSRectArg_andunsignedshortArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedshortArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedshortArg_(((7, 8), (9, 10)), 1<<14)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1<<14)


	def testNSRectAndunsignedintArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andunsignedintArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedintArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedintArg_(((1, 2), (3, 4)), 1 << 30)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1 << 30)
		r = o.NSRectArg_andunsignedintArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedintArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedintArg_(((7, 8), (9, 10)), 1 << 30)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1 << 30)


	def testNSRectAndunsignedlongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andunsignedlongArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedlongArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedlongArg_(((1, 2), (3, 4)), 1L << 30)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1L << 30)
		r = o.NSRectArg_andunsignedlongArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedlongArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedlongArg_(((7, 8), (9, 10)), 1L << 30)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1L << 30)


	def testNSRectAndunsignedlonglongArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andunsignedlonglongArg_(((1, 2), (3, 4)), 0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedlonglongArg_(((1, 2), (3, 4)), 42)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedlonglongArg_(((1, 2), (3, 4)), 1L << 62)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], 1L << 62)
		r = o.NSRectArg_andunsignedlonglongArg_(((7, 8), (9, 10)), 0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 0)
		r = o.NSRectArg_andunsignedlonglongArg_(((7, 8), (9, 10)), 42)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 42)
		r = o.NSRectArg_andunsignedlonglongArg_(((7, 8), (9, 10)), 1L << 62)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], 1L << 62)


	def testNSRectAndfloatArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andfloatArg_(((1, 2), (3, 4)), 0.128)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSRectArg_andfloatArg_(((1, 2), (3, 4)), 1.0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSRectArg_andfloatArg_(((1, 2), (3, 4)), 42.0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSRectArg_andfloatArg_(((1, 2), (3, 4)), 1e10)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.NSRectArg_andfloatArg_(((7, 8), (9, 10)), 0.128)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSRectArg_andfloatArg_(((7, 8), (9, 10)), 1.0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSRectArg_andfloatArg_(((7, 8), (9, 10)), 42.0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSRectArg_andfloatArg_(((7, 8), (9, 10)), 1e10)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 1e10)


	def testNSRectAnddoubleArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_anddoubleArg_(((1, 2), (3, 4)), 0.128)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSRectArg_anddoubleArg_(((1, 2), (3, 4)), 1.0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSRectArg_anddoubleArg_(((1, 2), (3, 4)), 42.0)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSRectArg_anddoubleArg_(((1, 2), (3, 4)), 1e10)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertAlmostEquals(r[2], 1e10)
		r = o.NSRectArg_anddoubleArg_(((7, 8), (9, 10)), 0.128)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 0.128)
		r = o.NSRectArg_anddoubleArg_(((7, 8), (9, 10)), 1.0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 1.0)
		r = o.NSRectArg_anddoubleArg_(((7, 8), (9, 10)), 42.0)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 42.0)
		r = o.NSRectArg_anddoubleArg_(((7, 8), (9, 10)), 1e10)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertAlmostEquals(r[2], 1e10)


	def testNSRectAndidArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andidArg_(((1, 2), (3, 4)), nil)
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], nil)
		r = o.NSRectArg_andidArg_(((7, 8), (9, 10)), nil)
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], nil)


	def testNSRectAndcharPtrArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andcharPtrArg_(((1, 2), (3, 4)), "hello")
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], "hello")
		r = o.NSRectArg_andcharPtrArg_(((1, 2), (3, 4)), "world")
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], "world")
		r = o.NSRectArg_andcharPtrArg_(((1, 2), (3, 4)), "foobar")
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], "foobar")
		r = o.NSRectArg_andcharPtrArg_(((7, 8), (9, 10)), "hello")
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], "hello")
		r = o.NSRectArg_andcharPtrArg_(((7, 8), (9, 10)), "world")
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], "world")
		r = o.NSRectArg_andcharPtrArg_(((7, 8), (9, 10)), "foobar")
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], "foobar")


	def testNSRectAndNSPointArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andNSPointArg_(((1, 2), (3, 4)), (1, 2))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], (1, 2))
		r = o.NSRectArg_andNSPointArg_(((1, 2), (3, 4)), (3, 4))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], (3, 4))
		r = o.NSRectArg_andNSPointArg_(((7, 8), (9, 10)), (1, 2))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], (1, 2))
		r = o.NSRectArg_andNSPointArg_(((7, 8), (9, 10)), (3, 4))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], (3, 4))


	def testNSRectAndNSRectArg(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectArg_andNSRectArg_(((1, 2), (3, 4)), ((1, 2), (3, 4)))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.NSRectArg_andNSRectArg_(((1, 2), (3, 4)), ((7, 8), (9, 10)))
		self.assertEquals(r[0], ((1, 2), (3, 4)))
		self.assertEquals(r[1], ((7, 8), (9, 10)))
		r = o.NSRectArg_andNSRectArg_(((7, 8), (9, 10)), ((1, 2), (3, 4)))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], ((1, 2), (3, 4)))
		r = o.NSRectArg_andNSRectArg_(((7, 8), (9, 10)), ((7, 8), (9, 10)))
		self.assertEquals(r[0], ((7, 8), (9, 10)))
		self.assertEquals(r[1], ((7, 8), (9, 10)))


	# Pass by reference arguments (in)

	def testBOOLIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.BOOLInArg_(YES)
		self.assertEquals(r, YES)
		r = o.BOOLInArg_(NO)
		self.assertEquals(r, NO)


	def testcharIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charInArg_(-128)
		self.assertEquals(r, -128)
		r = o.charInArg_(0)
		self.assertEquals(r, 0)
		r = o.charInArg_(127)
		self.assertEquals(r, 127)


	def testsignedshortIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedshortInArg_(-(1<<14))
		self.assertEquals(r, -(1<<14))
		r = o.signedshortInArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedshortInArg_(0)
		self.assertEquals(r, 0)
		r = o.signedshortInArg_(42)
		self.assertEquals(r, 42)
		r = o.signedshortInArg_(1 << 14)
		self.assertEquals(r, 1 << 14)


	def testsignedintIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedintInArg_(-(1<<30))
		self.assertEquals(r, -(1<<30))
		r = o.signedintInArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedintInArg_(0)
		self.assertEquals(r, 0)
		r = o.signedintInArg_(42)
		self.assertEquals(r, 42)
		r = o.signedintInArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testsignedlongIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlongInArg_(-(1<<30))
		self.assertEquals(r, -(1<<30))
		r = o.signedlongInArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedlongInArg_(0)
		self.assertEquals(r, 0)
		r = o.signedlongInArg_(42)
		self.assertEquals(r, 42)
		r = o.signedlongInArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testsignedlonglongIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.signedlonglongInArg_(-(1L << 60))
		self.assertEquals(r, -(1L << 60))
		r = o.signedlonglongInArg_(-42)
		self.assertEquals(r, -42)
		r = o.signedlonglongInArg_(0)
		self.assertEquals(r, 0)
		r = o.signedlonglongInArg_(42)
		self.assertEquals(r, 42)
		r = o.signedlonglongInArg_(1L << 60)
		self.assertEquals(r, 1L << 60)


	def testunsignedcharIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedcharInArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedcharInArg_(128)
		self.assertEquals(r, 128)
		r = o.unsignedcharInArg_(255)
		self.assertEquals(r, 255)


	def testunsignedshortIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedshortInArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedshortInArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedshortInArg_(1<<14)
		self.assertEquals(r, 1<<14)


	def testunsignedintIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedintInArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedintInArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedintInArg_(1 << 30)
		self.assertEquals(r, 1 << 30)


	def testunsignedlongIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlongInArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedlongInArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedlongInArg_(1L << 30)
		self.assertEquals(r, 1L << 30)


	def testunsignedlonglongIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.unsignedlonglongInArg_(0)
		self.assertEquals(r, 0)
		r = o.unsignedlonglongInArg_(42)
		self.assertEquals(r, 42)
		r = o.unsignedlonglongInArg_(1L << 62)
		self.assertEquals(r, 1L << 62)


	def testfloatIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.floatInArg_(0.128)
		self.assertAlmostEquals(r, 0.128)
		r = o.floatInArg_(1.0)
		self.assertAlmostEquals(r, 1.0)
		r = o.floatInArg_(42.0)
		self.assertAlmostEquals(r, 42.0)
		r = o.floatInArg_(1e10)
		self.assertAlmostEquals(r, 1e10)


	def testdoubleIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.doubleInArg_(0.128)
		self.assertAlmostEquals(r, 0.128)
		r = o.doubleInArg_(1.0)
		self.assertAlmostEquals(r, 1.0)
		r = o.doubleInArg_(42.0)
		self.assertAlmostEquals(r, 42.0)
		r = o.doubleInArg_(1e10)
		self.assertAlmostEquals(r, 1e10)


	def testidIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.idInArg_(nil)
		self.assertEquals(r, nil)


	def testcharPtrIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.charPtrInArg_("hello")
		self.assertEquals(r, "hello")
		r = o.charPtrInArg_("world")
		self.assertEquals(r, "world")
		r = o.charPtrInArg_("foobar")
		self.assertEquals(r, "foobar")


	def testNSPointIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSPointInArg_((1, 2))
		self.assertEquals(r, (1, 2))
		r = o.NSPointInArg_((3, 4))
		self.assertEquals(r, (3, 4))


	def testNSRectIn(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		r = o.NSRectInArg_(((1, 2), (3, 4)))
		self.assertEquals(r, ((1, 2), (3, 4)))
		r = o.NSRectInArg_(((7, 8), (9, 10)))
		self.assertEquals(r, ((7, 8), (9, 10)))


	# Pass by reference arguments (out)

	def testBOOLOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.BOOLOutArg_()
		self.assertEquals(r, (None, YES))
		r = o.BOOLOutArg_()
		self.assertEquals(r, (None, NO))


	def testcharOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.charOutArg_()
		self.assertEquals(r, (None, -128))
		r = o.charOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.charOutArg_()
		self.assertEquals(r, (None, 127))


	def testsignedshortOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedshortOutArg_()
		self.assertEquals(r, (None, -(1<<14)))
		r = o.signedshortOutArg_()
		self.assertEquals(r, (None, -42))
		r = o.signedshortOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.signedshortOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.signedshortOutArg_()
		self.assertEquals(r, (None, 1 << 14))


	def testsignedintOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedintOutArg_()
		self.assertEquals(r, (None, -(1<<30)))
		r = o.signedintOutArg_()
		self.assertEquals(r, (None, -42))
		r = o.signedintOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.signedintOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.signedintOutArg_()
		self.assertEquals(r, (None, 1 << 30))


	def testsignedlongOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedlongOutArg_()
		self.assertEquals(r, (None, -(1<<30)))
		r = o.signedlongOutArg_()
		self.assertEquals(r, (None, -42))
		r = o.signedlongOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.signedlongOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.signedlongOutArg_()
		self.assertEquals(r, (None, 1 << 30))


	def testsignedlonglongOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedlonglongOutArg_()
		self.assertEquals(r, (None, -(1L << 60)))
		r = o.signedlonglongOutArg_()
		self.assertEquals(r, (None, -42))
		r = o.signedlonglongOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.signedlonglongOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.signedlonglongOutArg_()
		self.assertEquals(r, (None, 1L << 60))


	def testunsignedcharOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedcharOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.unsignedcharOutArg_()
		self.assertEquals(r, (None, 128))
		r = o.unsignedcharOutArg_()
		self.assertEquals(r, (None, 255))


	def testunsignedshortOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedshortOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.unsignedshortOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.unsignedshortOutArg_()
		self.assertEquals(r, (None, 1<<14))


	def testunsignedintOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedintOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.unsignedintOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.unsignedintOutArg_()
		self.assertEquals(r, (None, 1 << 30))


	def testunsignedlongOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedlongOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.unsignedlongOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.unsignedlongOutArg_()
		self.assertEquals(r, (None, 1L << 30))


	def testunsignedlonglongOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedlonglongOutArg_()
		self.assertEquals(r, (None, 0))
		r = o.unsignedlonglongOutArg_()
		self.assertEquals(r, (None, 42))
		r = o.unsignedlonglongOutArg_()
		self.assertEquals(r, (None, 1L << 62))


	def testfloatOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.floatOutArg_()
		self.assertAlmostEquals(r, (None, 0.128))
		r = o.floatOutArg_()
		self.assertAlmostEquals(r, (None, 1.0))
		r = o.floatOutArg_()
		self.assertAlmostEquals(r, (None, 42.0))
		r = o.floatOutArg_()
		self.assertAlmostEquals(r, (None, 1e10))


	def testdoubleOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.doubleOutArg_()
		self.assertAlmostEquals(r, (None, 0.128))
		r = o.doubleOutArg_()
		self.assertAlmostEquals(r, (None, 1.0))
		r = o.doubleOutArg_()
		self.assertAlmostEquals(r, (None, 42.0))
		r = o.doubleOutArg_()
		self.assertAlmostEquals(r, (None, 1e10))


	def testidOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.idOutArg_()
		self.assertEquals(r, (None, nil))


	def testcharPtrOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.charPtrOutArg_()
		self.assertEquals(r, (None, "hello"))
		r = o.charPtrOutArg_()
		self.assertEquals(r, (None, "world"))
		r = o.charPtrOutArg_()
		self.assertEquals(r, (None, "foobar"))


	def testNSPointOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.NSPointOutArg_()
		self.assertEquals(r, (None, (1, 2)))
		r = o.NSPointOutArg_()
		self.assertEquals(r, (None, (3, 4)))


	def testNSRectOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.NSRectOutArg_()
		self.assertEquals(r, (None, ((1, 2), (3, 4))))
		r = o.NSRectOutArg_()
		self.assertEquals(r, (None, ((7, 8), (9, 10))))


	# Pass by reference arguments (out)

	def testBOOLInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.BOOLInOutArg_(NO)
		self.assertEquals(r, ( NO, YES))
		r = o.BOOLInOutArg_(YES)
		self.assertEquals(r, ( YES, NO))


	def testcharInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.charInOutArg_(127)
		self.assertEquals(r, ( 127, -128))
		r = o.charInOutArg_(0)
		self.assertEquals(r, ( 0, 0))
		r = o.charInOutArg_(-128)
		self.assertEquals(r, ( -128, 127))


	def testsignedshortInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedshortInOutArg_(1 << 14)
		self.assertEquals(r, ( 1 << 14, -(1<<14)))
		r = o.signedshortInOutArg_(42)
		self.assertEquals(r, ( 42, -42))
		r = o.signedshortInOutArg_(0)
		self.assertEquals(r, ( 0, 0))
		r = o.signedshortInOutArg_(-42)
		self.assertEquals(r, ( -42, 42))
		r = o.signedshortInOutArg_(-(1<<14))
		self.assertEquals(r, ( -(1<<14), 1 << 14))


	def testsignedintInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedintInOutArg_(1 << 30)
		self.assertEquals(r, ( 1 << 30, -(1<<30)))
		r = o.signedintInOutArg_(42)
		self.assertEquals(r, ( 42, -42))
		r = o.signedintInOutArg_(0)
		self.assertEquals(r, ( 0, 0))
		r = o.signedintInOutArg_(-42)
		self.assertEquals(r, ( -42, 42))
		r = o.signedintInOutArg_(-(1<<30))
		self.assertEquals(r, ( -(1<<30), 1 << 30))


	def testsignedlongInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedlongInOutArg_(1 << 30)
		self.assertEquals(r, ( 1 << 30, -(1<<30)))
		r = o.signedlongInOutArg_(42)
		self.assertEquals(r, ( 42, -42))
		r = o.signedlongInOutArg_(0)
		self.assertEquals(r, ( 0, 0))
		r = o.signedlongInOutArg_(-42)
		self.assertEquals(r, ( -42, 42))
		r = o.signedlongInOutArg_(-(1<<30))
		self.assertEquals(r, ( -(1<<30), 1 << 30))


	def testsignedlonglongInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.signedlonglongInOutArg_(1L << 60)
		self.assertEquals(r, ( 1L << 60, -(1L << 60)))
		r = o.signedlonglongInOutArg_(42)
		self.assertEquals(r, ( 42, -42))
		r = o.signedlonglongInOutArg_(0)
		self.assertEquals(r, ( 0, 0))
		r = o.signedlonglongInOutArg_(-42)
		self.assertEquals(r, ( -42, 42))
		r = o.signedlonglongInOutArg_(-(1L << 60))
		self.assertEquals(r, ( -(1L << 60), 1L << 60))


	def testunsignedcharInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedcharInOutArg_(255)
		self.assertEquals(r, ( 255, 0))
		r = o.unsignedcharInOutArg_(128)
		self.assertEquals(r, ( 128, 128))
		r = o.unsignedcharInOutArg_(0)
		self.assertEquals(r, ( 0, 255))


	def testunsignedshortInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedshortInOutArg_(1<<14)
		self.assertEquals(r, ( 1<<14, 0))
		r = o.unsignedshortInOutArg_(42)
		self.assertEquals(r, ( 42, 42))
		r = o.unsignedshortInOutArg_(0)
		self.assertEquals(r, ( 0, 1<<14))


	def testunsignedintInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedintInOutArg_(1 << 30)
		self.assertEquals(r, ( 1 << 30, 0))
		r = o.unsignedintInOutArg_(42)
		self.assertEquals(r, ( 42, 42))
		r = o.unsignedintInOutArg_(0)
		self.assertEquals(r, ( 0, 1 << 30))


	def testunsignedlongInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedlongInOutArg_(1L << 30)
		self.assertEquals(r, ( 1L << 30, 0))
		r = o.unsignedlongInOutArg_(42)
		self.assertEquals(r, ( 42, 42))
		r = o.unsignedlongInOutArg_(0)
		self.assertEquals(r, ( 0, 1L << 30))


	def testunsignedlonglongInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.unsignedlonglongInOutArg_(1L << 62)
		self.assertEquals(r, ( 1L << 62, 0))
		r = o.unsignedlonglongInOutArg_(42)
		self.assertEquals(r, ( 42, 42))
		r = o.unsignedlonglongInOutArg_(0)
		self.assertEquals(r, ( 0, 1L << 62))


	def testfloatInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.floatInOutArg_(1e10)
		self.assertAlmostEquals(r, (1e10, 0.128))
		r = o.floatInOutArg_(42.0)
		self.assertAlmostEquals(r, (42.0, 1.0))
		r = o.floatInOutArg_(1.0)
		self.assertAlmostEquals(r, (1.0, 42.0))
		r = o.floatInOutArg_(0.128)
		self.assertAlmostEquals(r, (0.128, 1e10))


	def testdoubleInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.doubleInOutArg_(1e10)
		self.assertAlmostEquals(r, (1e10, 0.128))
		r = o.doubleInOutArg_(42.0)
		self.assertAlmostEquals(r, (42.0, 1.0))
		r = o.doubleInOutArg_(1.0)
		self.assertAlmostEquals(r, (1.0, 42.0))
		r = o.doubleInOutArg_(0.128)
		self.assertAlmostEquals(r, (0.128, 1e10))


	def testidInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.idInOutArg_(nil)
		self.assertEquals(r, ( nil, nil))


	def testcharPtrInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.charPtrInOutArg_("foobar")
		self.assertEquals(r, ( "foobar", "hello"))
		r = o.charPtrInOutArg_("world")
		self.assertEquals(r, ( "world", "world"))
		r = o.charPtrInOutArg_("hello")
		self.assertEquals(r, ( "hello", "foobar"))


	def testNSPointInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.NSPointInOutArg_((3, 4))
		self.assertEquals(r, ( (3, 4), (1, 2)))
		r = o.NSPointInOutArg_((1, 2))
		self.assertEquals(r, ( (1, 2), (3, 4)))


	def testNSRectInOut(self):
		o = PyObjC_TestClass1.alloc().init()
		self.assert_(o is not None)
		o.reset()
		r = o.NSRectInOutArg_(((7, 8), (9, 10)))
		self.assertEquals(r, ( ((7, 8), (9, 10)), ((1, 2), (3, 4))))
		r = o.NSRectInOutArg_(((1, 2), (3, 4)))
		self.assertEquals(r, ( ((1, 2), (3, 4)), ((7, 8), (9, 10))))



if __name__ == "__main__":
    unittest.main()
