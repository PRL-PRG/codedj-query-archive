from sage.rings.ring import DedekindDomain
from number_field_element import NumberFieldElement
from sage.structure.sequence import Sequence


class Order(DedekindDomain):
    
    def __init__(self, K):
        self._K = K
        
    def number_field(self):
        return self._K
        
    def fraction_field(self):
        return self._K


    

class AbsoluteOrder(Order):

    def __init__(self, K, module_rep):
        Order.__init__(K)
        self._module_rep = module_rep
        
    def __call__(self, x):
        if x.parent() is not self._K:
            x = self._K(x)
        V, embedding, _ = self._K.vector_space()
        if not embedding(x) in self._module_rep:
            raise TypeError, "Not an element of the order."
        return NumberFieldElement(self, x)
        
    def __repr__(self):
        return "Order in %r generated by %r" % (self._K, ",".join([str(b) for b in self.basis()]))
        
    def basis(self):
        V, to_V, from_V = self._K.vector_space()
        return [from_V(b) for b in self._module_rep.basis()]
        
class RelativeOrder(Order):

    def __init__(self, K, absolute_order, base, embedding):
        Order.__init__(K)
        self._absolute_order = absolute_order
        self._base = base
        self._embedding = embedding
    
    def __call__(self, x):
        if x.parent() is not self._K:
            x = self._K(x)
        x = self._absolute_order(x) # will test membership
        return NumberFieldElement(self, x)

    def __repr__(self, x):
        V, to_V, from_V = self._K.vector_space()
        basis = self._module_rep.basis()
        return "Order over %r spanned by %r" % (self._base, ",".join([from_V(b) for b in self._absolute_order.basis()]))
        


def absolute_order_from_generators(gens):
    """
    INPUT:
        gens -- list of elements of a single absolute number field
                that generate an order in that number field as a ZZ
                *module*.

    OUTPUT:
        an absolute order

    EXAMPLES:
        sage: ???
    """
    if len(gens) == 0:
        raise ValueError, "gens must span an order over ZZ"
    gens = Sequence(gens)
    K = gens.universe()
    V, to_V, _ = K.vector_space()
    gens = [to_V(x) for x in gens]
    W = V.span(gens)
    return AbsoluteOrder(K, W)
    
