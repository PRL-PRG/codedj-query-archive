def cns_format(space_group_info):
  result = (str(space_group_info)
    .replace(" :2", "")
    .replace(" :H", "")
    .replace(" :R", "R")
  )
  for rotation in (2,3,4,6):
    for screw in xrange(1,rotation):
      result = result.replace(
        "%d%d" % (rotation, screw),
        "%d(%d)" % (rotation, screw))
  if (3 <= space_group_info.type().number() <= 16):
    result = result.replace(" 1", "")
  return result.replace(" ", "").upper()

# CNS 1.0 spacegroup.lib symbols
table_cns_1_0 = (
'P1',
'P-1',
'P2',
'P2(1)',
'C2',
'PM',
'PC',
'CM',
'CC',
'P2/M',
'P2(1)/M',
'C2/M',
'P2/C',
'P2(1)/C',
'C2/C',
'P222',
'P222(1)',
'P2(1)2(1)2',
'P2(1)2(1)2(1)',
'C222(1)',
'C222',
'F222',
'I222',
'I2(1)2(1)2(1)',
'PMM2',
'PMC2(1)',
'PCC2',
'PMA2',
'PCA2(1)',
'PNC2',
'PMN2(1)',
'PBA2',
'PNA2(1)',
'PNN2',
'CMM2',
'CMC2(1)',
'CCC2',
'AMM2',
'ABM2',
'AMA2',
'ABA2',
'FMM2',
'FDD2',
'IMM2',
'IBA2',
'IMA2',
'PMMM',
'PNNN',
'PCCM',
'PBAN',
'PMMA',
'PNNA',
'PMNA',
'PCCA',
'PBAM',
'PCCN',
'PBCM',
'PNNM',
'PMMN',
'PBCN',
'PBCA',
'PNMA',
'CMCM',
'CMCA',
'CMMM',
'AMMM', # Patterson symmetry of Amm2, Abm2, Ama2, Aba2
'CCCM',
'CMMA',
'CCCA',
'FMMM',
'FDDD',
'IMMM',
'IBAM',
'IBCA',
'IMMA',
'P4',
'P4(1)',
'P4(2)',
'P4(3)',
'I4',
'I4(1)',
'P-4',
'I-4',
'P4/M',
'P4(2)/M',
'P4/N',
'P4(2)/N',
'I4/M',
'I4(1)/A',
'P422',
'P42(1)2',
'P4(1)22',
'P4(1)2(1)2',
'P4(2)22',
'P4(2)2(1)2',
'P4(3)22',
'P4(3)2(1)2',
'I422',
'I4(1)22',
'P4MM',
'P4BM',
'P4(2)CM',
'P4(2)NM',
'P4CC',
'P4NC',
'P4(2)MC',
'P4(2)BC',
'I4MM',
'I4CM',
'I4(1)MD',
'I4(1)CD',
'P-42M',
'P-42C',
'P-42(1)M',
'P-42(1)C',
'P-4M2',
'P-4C2',
'P-4B2',
'P-4N2',
'I-4M2',
'I-4C2',
'I-42M',
'I-42D',
'P4/MMM',
'P4/MCC',
'P4/NBM',
'P4/NNC',
'P4/MBM',
'P4/MNC',
'P4/NMM',
'P4/NCC',
'P4(2)/MMC',
'P4(2)/MCM',
'P4(2)/NBC',
'P4(2)/NNM',
'P4(2)/MBC',
'P4(2)/MNM',
'P4(2)/NMC',
'P4(2)/NCM',
'I4/MMM',
'I4/MCM',
'I4(1)/AMD',
'I4(1)/ACD',
'P3',
'P3(1)',
'P3(2)',
'R3',
'R3R',
'P-3',
'R-3',
'R-3R',
'P312',
'P321',
'P3(1)12',
'P3(1)21',
'P3(2)12',
'P3(2)21',
'R32',
'R32R',
'P3M1',
'P31M',
'P3C1',
'P31C',
'R3M',
'R3MR',
'R3C',
'R3CR',
'P-31M',
'P-31C',
'P-3M1',
'P-3C1',
'R-3M',
'R-3MR',
'R-3C',
'R-3CR',
'P6',
'P6(1)',
'P6(5)',
'P6(2)',
'P6(4)',
'P6(3)',
'P-6',
'P6/M',
'P6(3)/M',
'P622',
'P6(1)22',
'P6(5)22',
'P6(2)22',
'P6(4)22',
'P6(3)22',
'P6MM',
'P6CC',
'P6(3)CM',
'P6(3)MC',
'P-6M2',
'P-6C2',
'P-62M',
'P-62C',
'P6/MMM',
'P6/MCC',
'P6(3)/MCM',
'P6(3)/MMC',
'P23',
'F23',
'I23',
'P2(1)3',
'I2(1)3',
'PM-3',
'PN-3',
'FM-3',
'FD-3',
'IM-3',
'PA-3',
'IA-3',
'P432',
'P4(2)32',
'F432',
'F4(1)32',
'I432',
'P4(3)32',
'P4(1)32',
'I4(1)32',
'P-43M',
'F-43M',
'I-43M',
'P-43N',
'F-43C',
'I-43D',
'PM-3M',
'PN-3N',
'PM-3N',
'PN-3M',
'FM-3M',
'FM-3C',
'FD-3M',
'FD-3C',
'IM-3M',
'IA-3D'
)

def _regression_test():
  from cctbx import sgtbx
  for symbol in table_cns_1_0:
    cns_symbol = cns_format(sgtbx.space_group_info(symbol))
    assert cns_symbol == symbol, (cns_symbol, symbol)
  print "OK"

if (__name__ == "__main__"):
  _regression_test()
