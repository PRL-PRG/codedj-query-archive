#!/usr/bin/env python
# $Header$
# vim: set noet sw=4 ts=4:

# Unfortunately, at the moment, SilverCity and Scintilla both have major bugs
# when it comes to highlighting SQL code.
# 
# Scintilla problems
# ------------------
# Scintilla uses C tokens for SQL code, which results in it being unable to
# tell the difference between a quoted identifier (e.g. "MY_FIELD") and a
# string (e.g. 'a string'). It also has no support for different SQL dialects
# (e.g. C-style comments are always parsed as comments even though some
# databases, like IBM DB2, don't support them).
# 
# SilverCity problems
# -------------------
# For some reason, even though SilverCity is passing a list of SQL keywords to
# the Scintilla SQL lexer, the lexer seems to be ignoring them. Hence keywords
# are always highlighted as identifiers instead of keywords.
# 
# Conclusion
# ----------
# At the moment, there's just too many bugs in both Scintilla and SilverCity
# to make this module usable. If these bugs are fixed, it should become the
# preferred highlighting method for this application for the simple reason
# that it uses CSS to markup the code for highlighting (which the alternative
# enscript unit doesn't). Unfortunately, I suspect that fixing Scintilla and
# SilverCity is a fairly major job...

"""DocSilverCity - Customized version of the SilverCity HTML generators.

This code is mostly based on Kjell Magne Fauske's MySilverCity code. See
<http://fauskes.net/nb/syntaxhighlighting/> for the original.

"""

from SilverCity import SQL

__all__ = ['DocSQLHTMLGenerator']

def mergeCssClasses(oldDict, newDict):
	"""Return only the css classes we are interested in
	
	Parameters:
		oldDict - original dictionary with token id -> css name mappings
		newDict - a dictionary where the keys are the css names we are 
			interested in and the values are either True or a new css name
	Output:
		Returns a dictionary with new token id -> css name mappings
	"""
	result = {}
	for (key, oldValue) in oldDict.items():
		newValue = newDict.get(oldValue, False)
		if newValue:
			if type(newValue) == type(""):
				result[key] = newValue
			else:
				result[key] = oldValue
	return result

class HTMLGeneratorMixIn:
	"""Adds extra functionality to the SilverCity.HTMLGenerator class
	
	The mixin class modifies the behaviour of the SilverCity.HTMLGenerator
	class in three ways:
		- It is possible to specify which CSS classes that are generated 
		- A CSS class name can be renamed and multiple CSS classes can share
			the same name
		- No markup is inserted for whitespaces and linefeeds
	"""

	def __init__(self, htmlgenerator, css_classes = None, pre = True):
		"""Initilize HTML generator
		
		Parameters:
			htmlgenerator - An inststance of the original html generator
			mycss_classes - A dictionary used to modify the css classes
				generated by the original html generators. Default to None.
			pre - If set to True, whitespace and linebreaks are unaltered. 
				Useful for usage in the <pre>..</pre> HTML environment. If 
				set to false, whitespace is replaced by &nbsp; and linefeeds
				with <br /> tags. Default set to True.
		"""
		if css_classes:
			self.css_classes = mergeCssClasses(self.css_classes, css_classes)
		self.pre = pre
		self.htmlgenerator = htmlgenerator

	def preformat(self, text):
		"""Override the SilverCity.HTMLGenerator.preformat method."""
		if self.pre:
			text = self.escape(text.expandtabs())
			return text
		else: 
			return self.htmlgenerator.preformat(self, text)

default_classes = {
	'c_default':          True,
	'c_comment':          True,
	'c_commentline':      'c_comment',
	'c_commentdoc':       'c_comment',
	'c_commentlindedoc':  'c_comment',
	'c_number':           True,
	'c_word':             True,
	'c_string':           True,
	'c_character':        'c_string',
	'c_operator':         True,
	'c_identifier':       True,
	'c_word2':            'c_word',
}

class DocSQLHTMLGenerator(HTMLGeneratorMixIn, SQL.SQLHTMLGenerator):
	def __init__(self, css_classes = None, pre = True):
		SQL.SQLHTMLGenerator.__init__(self)
		HTMLGeneratorMixIn.__init__(self, SQL.SQLHTMLGenerator, css_classes, pre)

def main():
	import StringIO
	# Test the highlighter with a query which exhibits a fair number of different tokens
	code = """\
SELECT
	V."VIEWSCHEMA",
	V.VIEWNAME
FROM
	SYSCAT.TABLES T
	INNER JOIN SYSCAT.VIEWS V
		ON T.TABSCHEMA = V.VIEWSCHEMA
		AND T.TABNAME = V.TABNAME
		AND T.TYPE IN ('V', 'W')
		AND V.VALID = 'Y'
WHERE
	T.TABSCHEMA = 'SYSCAT'
	AND T.CREATED >= CURRENT DATE - 1 MONTH
WITH UR"""
	output = StringIO.StringIO()
	DocSQLHTMLGenerator(None).generate_html(output, code)
	print output.getvalue()

if __name__ == "__main__":
	main()