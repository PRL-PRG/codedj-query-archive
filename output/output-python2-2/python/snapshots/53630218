import sys, os.path

import generate_algebras

def write_copyright(f):
  try: name = __file__
  except: name = sys.argv[0]
  print >> f, """\
/* Copyright (c) 2001-2002 The Regents of the University of California
   through E.O. Lawrence Berkeley National Laboratory, subject to
   approval by the U.S. Department of Energy.
   See files COPYRIGHT.txt and LICENSE.txt for further details.

   Revision history:
     2002 Aug: Copied from cctbx/global (Ralf W. Grosse-Kunstleve)
     2002 Jan: Created (Ralf W. Grosse-Kunstleve)

   *****************************************************
   THIS IS AN AUTOMATICALLY GENERATED FILE. DO NOT EDIT.
   *****************************************************

   Generated by:
     %s
 */""" % (name,)

def one_type(target_dir, array_type_name):
  output_file_name = os.path.normpath(os.path.join(
    target_dir, "%s_apply.h" % (array_type_name,)))
  print "Generating:", output_file_name
  f = open(output_file_name, "w")
  write_copyright(f)
  include_array_type_name = array_type_name
  if (array_type_name == "ref"):
    include_array_type_name = "versa"
  generic_include = "functors"
  if (generate_algebras.base_array_type_name(array_type_name) == "tiny"):
    generic_include = "operators"
  print >> f, """
#ifndef SCITBX_ARRAY_FAMILY_%s_APPLY_H
#define SCITBX_ARRAY_FAMILY_%s_APPLY_H

#ifndef DOXYGEN_SHOULD_SKIP_THIS

#include <scitbx/type_holder.h>
#include <scitbx/array_family/%s.h>
#include <scitbx/array_family/detail/generic_array_%s.h>

namespace scitbx { namespace af {
""" % ((array_type_name.upper(),) * 2 + (
    include_array_type_name, generic_include))

  generate_algebras.generate_unary_apply(f, array_type_name)

  print >> f, """}} // namespace scitbx::af

#endif // DOXYGEN_SHOULD_SKIP_THIS

#endif // SCITBX_ARRAY_FAMILY_%s_APPLY_H""" % (array_type_name.upper(),)
  f.close()

def run(target_dir):
  for array_type_name in (
    "tiny_plain", "tiny",
    "small_plain", "small",
    "shared_plain", "shared",
    "versa_plain", "versa",
    "ref"):
    one_type(target_dir, array_type_name)

if (__name__ == "__main__"):
  run(".")
